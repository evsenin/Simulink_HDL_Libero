// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\tb_SYSTEM\SYSTEM_ip_src_init.v
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// Copyright (c) 2023, Alexei Evsenin, evsenin@gmail.com
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: SYSTEM_ip_src_init
// Source Path: tb_SYSTEM/SYSTEM/AD7173-8-ADC_0/init
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module SYSTEM_ip_src_init
          (clk,
           reset_x,
           data_init_0,
           data_init_1,
           data_init_2,
           data_init_3,
           data_init_4,
           data_init_5,
           data_init_6,
           data_init_7,
           data_init_8,
           data_init_9,
           data_init_10,
           data_init_11,
           data_init_12,
           data_in,
           fifo_empty,
           rst,
           push,
           data_out,
           init_done);

  // Default encoded enumeration values for type state_type_is_init
  parameter state_type_is_init_IN_INF = 3'd0, state_type_is_init_IN_INIT = 3'd1, state_type_is_init_IN_INIT_DONE = 3'd2, state_type_is_init_IN_RESET = 3'd3, state_type_is_init_IN_WAIT0 = 3'd4;

  input   clk;
  input   reset_x;
  input   [23:0] data_init_0;  // ufix24
  input   [23:0] data_init_1;  // ufix24
  input   [23:0] data_init_2;  // ufix24
  input   [23:0] data_init_3;  // ufix24
  input   [23:0] data_init_4;  // ufix24
  input   [23:0] data_init_5;  // ufix24
  input   [23:0] data_init_6;  // ufix24
  input   [23:0] data_init_7;  // ufix24
  input   [23:0] data_init_8;  // ufix24
  input   [23:0] data_init_9;  // ufix24
  input   [23:0] data_init_10;  // ufix24
  input   [23:0] data_init_11;  // ufix24
  input   [23:0] data_init_12;  // ufix24
  input   [23:0] data_in;  // ufix24
  input   fifo_empty;
  input   rst;
  output  push;
  output  [23:0] data_out;  // ufix24
  output  init_done;


  wire [23:0] data_init [0:12];  // ufix24 [13]
  reg [2:0] is_init;  // uint8
  reg [15:0] init_cnt;  // uint16
  reg [23:0] data_in_prev;  // ufix24
  reg [15:0] init_sz;  // uint16
  reg  push_reg;
  reg [23:0] data_out_reg;  // ufix24
  reg  init_done_reg;
  reg [2:0] is_init_next;  // enum type state_type_is_init (5 enums)
  reg [15:0] init_cnt_next;  // uint16
  reg [23:0] data_in_prev_next;  // ufix24
  reg [15:0] init_sz_next;  // uint16
  reg  push_reg_next;
  reg [23:0] data_out_reg_next;  // ufix24
  reg  init_done_reg_next;
  reg [15:0] add_temp;  // ufix16


  assign data_init[0] = data_init_0;
  assign data_init[1] = data_init_1;
  assign data_init[2] = data_init_2;
  assign data_init[3] = data_init_3;
  assign data_init[4] = data_init_4;
  assign data_init[5] = data_init_5;
  assign data_init[6] = data_init_6;
  assign data_init[7] = data_init_7;
  assign data_init[8] = data_init_8;
  assign data_init[9] = data_init_9;
  assign data_init[10] = data_init_10;
  assign data_init[11] = data_init_11;
  assign data_init[12] = data_init_12;

  always @(posedge clk or posedge reset_x)
    begin : init_process
      if (reset_x == 1'b1) begin
        //Entry: SYSTEM/AD7173-8-ADC_0/init
        //Entry Internal: SYSTEM/AD7173-8-ADC_0/init
        //Transition
        is_init <= state_type_is_init_IN_RESET;
        //Entry 'RESET'
        data_out_reg <= 24'b000000000000000000000000;
        init_cnt <= 16'd0;
        init_sz <= 16'd13;
        push_reg <= 1'b0;
        data_in_prev <= 24'b000000000000000000000000;
        init_done_reg <= 1'b0;
      end
      else begin
        is_init <= is_init_next;
        init_cnt <= init_cnt_next;
        data_in_prev <= data_in_prev_next;
        init_sz <= init_sz_next;
        push_reg <= push_reg_next;
        data_out_reg <= data_out_reg_next;
        init_done_reg <= init_done_reg_next;
      end
    end

  always @* begin
    add_temp = 16'b0000000000000000;
    init_cnt_next = init_cnt;
    push_reg_next = push_reg;
    data_out_reg_next = data_out_reg;
    init_done_reg_next = init_done_reg;
    is_init_next = is_init;
    data_in_prev_next = data_in_prev;
    init_sz_next = init_sz;
    //Gateway: SYSTEM/AD7173-8-ADC_0/init
    //During: SYSTEM/AD7173-8-ADC_0/init
    case ( is_init)
      state_type_is_init_IN_INF :
        begin
          //During 'INF'
          if (rst) begin
            //Transition
            //Exit 'INF'
            is_init_next = state_type_is_init_IN_RESET;
            //Entry 'RESET'
            data_out_reg_next = 24'b000000000000000000000000;
            init_cnt_next = 16'd0;
            init_sz_next = 16'd13;
            push_reg_next = 1'b0;
            data_in_prev_next = 24'b000000000000000000000000;
            init_done_reg_next = 1'b0;
          end
          else begin
            push_reg_next = data_in_prev != data_in;
            data_in_prev_next = data_in;
            data_out_reg_next = data_in;
          end
        end
      state_type_is_init_IN_INIT :
        begin
          //During 'INIT'
          if (init_cnt == init_sz) begin
            //Transition
            //Exit 'INIT'
            push_reg_next = 1'b0;
            is_init_next = state_type_is_init_IN_WAIT0;
            //Entry 'WAIT0'
          end
          else if (fifo_empty) begin
            push_reg_next = 1'b1;
            init_cnt_next = init_cnt + 16'b0000000000000001;
            add_temp = init_cnt + 16'b0000000000000001;
            data_out_reg_next = data_init[$signed({1'b0, add_temp}) - 17'sb00000000000000001];
          end
          else begin
            push_reg_next = 1'b0;
          end
        end
      state_type_is_init_IN_INIT_DONE :
        begin
          //During 'INIT_DONE'
          //Transition
          is_init_next = state_type_is_init_IN_INF;
          //Entry 'INF'
          data_in_prev_next = data_in;
          push_reg_next = 1'b0;
        end
      state_type_is_init_IN_RESET :
        begin
          //During 'RESET'
          if ( ! rst) begin
            //Transition
            is_init_next = state_type_is_init_IN_INIT;
            //Entry 'INIT'
            init_cnt_next = 16'd0;
            push_reg_next = 1'b0;
            init_done_reg_next = 1'b0;
          end
          else begin
            data_out_reg_next = 24'b000000000000000000000000;
            init_cnt_next = 16'd0;
            init_sz_next = 16'd13;
            push_reg_next = 1'b0;
            data_in_prev_next = 24'b000000000000000000000000;
            init_done_reg_next = 1'b0;
          end
        end
      default :
        begin
          //case IN_WAIT0:
          //During 'WAIT0'
          if (fifo_empty) begin
            //Transition
            is_init_next = state_type_is_init_IN_INIT_DONE;
            //Entry 'INIT_DONE'
            init_done_reg_next = 1'b1;
          end
        end
    endcase
  end

  assign push = push_reg_next;
  assign data_out = data_out_reg_next;
  assign init_done = init_done_reg_next;


endmodule  // SYSTEM_ip_src_init

