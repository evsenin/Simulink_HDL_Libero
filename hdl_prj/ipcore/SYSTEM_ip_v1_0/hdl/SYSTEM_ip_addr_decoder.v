// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\tb_SYSTEM\SYSTEM_ip_addr_decoder.v
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// Copyright (c) 2023, Alexei Evsenin, evsenin@gmail.com
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: SYSTEM_ip_addr_decoder
// Source Path: SYSTEM_ip/SYSTEM_ip_axi4/SYSTEM_ip_addr_decoder
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module SYSTEM_ip_addr_decoder
          (clk,
           reset_x,
           data_write,
           addr_sel,
           wr_enb,
           rd_enb,
           read_ip_timestamp,
           read_AXI_TVS_1000mV,
           read_AXI_TVS_1800mV,
           read_AXI_TVS_2500mV,
           read_AXI_TVS_tempr,
           read_AXI_SYS_STATUS,
           read_AXI_PWR_STATUS,
           read_AXI_PLL_STATUS,
           read_AXI_I2S_STATUS,
           read_AXI_CC_SPI_Rd,
           read_AXI_CC_STATUS,
           read_AXI_MonADC_STATUS,
           read_AXI_MonADC_SPI_Rd,
           read_AXI_Mon_12V,
           read_AXI_Mon_1V8,
           read_AXI_Mon_3V3,
           read_AXI_Mon_CurrentIn,
           read_AXI_Mon_VoltageIn,
           data_read,
           write_AXI4_Master_Rd_base_address,
           write_AXI4_Master_Wr_base_address,
           write_AXI_CC_SPI_Wr,
           write_AXI_CC_CONTROL,
           write_AXI_PWR_CONTROL,
           write_AXI_DDR_CONTROL,
           write_AXI_MonADC_SPI_Wr,
           write_AXI_MonADC_CONTROL,
           write_AXI_XAVIER_CONTROL);


  input   clk;
  input   reset_x;
  input   [31:0] data_write;  // ufix32
  input   [13:0] addr_sel;  // ufix14
  input   wr_enb;  // ufix1
  input   rd_enb;  // ufix1
  input   [31:0] read_ip_timestamp;  // ufix32
  input   signed [31:0] read_AXI_TVS_1000mV;  // sfix32
  input   signed [31:0] read_AXI_TVS_1800mV;  // sfix32
  input   signed [31:0] read_AXI_TVS_2500mV;  // sfix32
  input   signed [31:0] read_AXI_TVS_tempr;  // sfix32
  input   [7:0] read_AXI_SYS_STATUS;  // ufix8
  input   [7:0] read_AXI_PWR_STATUS;  // ufix8
  input   [7:0] read_AXI_PLL_STATUS;  // ufix8
  input   [3:0] read_AXI_I2S_STATUS;  // ufix4
  input   [31:0] read_AXI_CC_SPI_Rd;  // ufix32
  input   [31:0] read_AXI_CC_STATUS;  // ufix32
  input   [31:0] read_AXI_MonADC_STATUS;  // ufix32
  input   [31:0] read_AXI_MonADC_SPI_Rd;  // ufix32
  input   signed [31:0] read_AXI_Mon_12V;  // sfix32
  input   signed [31:0] read_AXI_Mon_1V8;  // sfix32
  input   signed [31:0] read_AXI_Mon_3V3;  // sfix32
  input   signed [31:0] read_AXI_Mon_CurrentIn;  // sfix32
  input   signed [31:0] read_AXI_Mon_VoltageIn;  // sfix32
  output  [31:0] data_read;  // ufix32
  output  [31:0] write_AXI4_Master_Rd_base_address;  // ufix32
  output  [31:0] write_AXI4_Master_Wr_base_address;  // ufix32
  output  [31:0] write_AXI_CC_SPI_Wr;  // ufix32
  output  [31:0] write_AXI_CC_CONTROL;  // ufix32
  output  [31:0] write_AXI_PWR_CONTROL;  // ufix32
  output  [31:0] write_AXI_DDR_CONTROL;  // ufix32
  output  [31:0] write_AXI_MonADC_SPI_Wr;  // ufix32
  output  [31:0] write_AXI_MonADC_CONTROL;  // ufix32
  output  [31:0] write_AXI_XAVIER_CONTROL;  // ufix32


  wire enb;
  wire decode_sel_ip_timestamp_1_1;  // ufix1
  wire [31:0] const_0;  // ufix32
  wire const_1;  // ufix1
  wire decode_sel_AXI_CC_SPI_Rd_1_1;  // ufix1
  wire decode_sel_AXI_I2S_STATUS_1_1;  // ufix1
  wire decode_sel_AXI_PLL_STATUS_1_1;  // ufix1
  wire decode_sel_AXI_PWR_STATUS_1_1;  // ufix1
  wire decode_sel_AXI_SYS_STATUS_1_1;  // ufix1
  wire decode_sel_AXI_TVS_tempr_1_1;  // ufix1
  wire decode_sel_AXI_TVS_2500mV_1_1;  // ufix1
  wire decode_sel_AXI_TVS_1800mV_1_1;  // ufix1
  wire decode_sel_AXI_TVS_1000mV_1_1;  // ufix1
  reg [31:0] read_reg_ip_timestamp;  // ufix32
  wire [31:0] decode_rd_ip_timestamp_1_1;  // ufix32
  reg signed [31:0] read_reg_AXI_TVS_1000mV;  // sfix32
  wire [31:0] data_slice_AXI_TVS_1000mV_1;  // ufix32
  wire [31:0] decode_rd_AXI_TVS_1000mV_1_1;  // ufix32
  reg signed [31:0] read_reg_AXI_TVS_1800mV;  // sfix32
  wire [31:0] data_slice_AXI_TVS_1800mV_1;  // ufix32
  wire [31:0] decode_rd_AXI_TVS_1800mV_1_1;  // ufix32
  reg signed [31:0] read_reg_AXI_TVS_2500mV;  // sfix32
  wire [31:0] data_slice_AXI_TVS_2500mV_1;  // ufix32
  wire [31:0] decode_rd_AXI_TVS_2500mV_1_1;  // ufix32
  reg signed [31:0] read_reg_AXI_TVS_tempr;  // sfix32
  wire [31:0] data_slice_AXI_TVS_tempr_1;  // ufix32
  wire [31:0] decode_rd_AXI_TVS_tempr_1_1;  // ufix32
  reg [7:0] read_reg_AXI_SYS_STATUS;  // ufix8
  wire [31:0] data_slice_AXI_SYS_STATUS_1;  // ufix32
  wire [31:0] decode_rd_AXI_SYS_STATUS_1_1;  // ufix32
  reg [7:0] read_reg_AXI_PWR_STATUS;  // ufix8
  wire [31:0] data_slice_AXI_PWR_STATUS_1;  // ufix32
  wire [31:0] decode_rd_AXI_PWR_STATUS_1_1;  // ufix32
  reg [7:0] read_reg_AXI_PLL_STATUS;  // ufix8
  wire [31:0] data_slice_AXI_PLL_STATUS_1;  // ufix32
  wire [31:0] decode_rd_AXI_PLL_STATUS_1_1;  // ufix32
  reg [3:0] read_reg_AXI_I2S_STATUS;  // ufix4
  wire [31:0] data_slice_AXI_I2S_STATUS_1;  // ufix32
  wire [31:0] decode_rd_AXI_I2S_STATUS_1_1;  // ufix32
  wire decode_sel_AXI_CC_STATUS_1_1;  // ufix1
  reg [31:0] read_reg_AXI_CC_SPI_Rd;  // ufix32
  wire [31:0] decode_rd_AXI_CC_SPI_Rd_1_1;  // ufix32
  wire decode_sel_AXI_MonADC_STATUS_1_1;  // ufix1
  reg [31:0] read_reg_AXI_CC_STATUS;  // ufix32
  wire [31:0] decode_rd_AXI_CC_STATUS_1_1;  // ufix32
  wire decode_sel_AXI_MonADC_SPI_Rd_1_1;  // ufix1
  reg [31:0] read_reg_AXI_MonADC_STATUS;  // ufix32
  wire [31:0] decode_rd_AXI_MonADC_STATUS_1_1;  // ufix32
  wire decode_sel_AXI_Mon_VoltageIn_1_1;  // ufix1
  wire decode_sel_AXI_Mon_CurrentIn_1_1;  // ufix1
  wire decode_sel_AXI_Mon_3V3_1_1;  // ufix1
  wire decode_sel_AXI_Mon_1V8_1_1;  // ufix1
  wire decode_sel_AXI_Mon_12V_1_1;  // ufix1
  reg [31:0] read_reg_AXI_MonADC_SPI_Rd;  // ufix32
  wire [31:0] decode_rd_AXI_MonADC_SPI_Rd_1_1;  // ufix32
  reg signed [31:0] read_reg_AXI_Mon_12V;  // sfix32
  wire [31:0] data_slice_AXI_Mon_12V_1;  // ufix32
  wire [31:0] decode_rd_AXI_Mon_12V_1_1;  // ufix32
  reg signed [31:0] read_reg_AXI_Mon_1V8;  // sfix32
  wire [31:0] data_slice_AXI_Mon_1V8_1;  // ufix32
  wire [31:0] decode_rd_AXI_Mon_1V8_1_1;  // ufix32
  reg signed [31:0] read_reg_AXI_Mon_3V3;  // sfix32
  wire [31:0] data_slice_AXI_Mon_3V3_1;  // ufix32
  wire [31:0] decode_rd_AXI_Mon_3V3_1_1;  // ufix32
  reg signed [31:0] read_reg_AXI_Mon_CurrentIn;  // sfix32
  wire [31:0] data_slice_AXI_Mon_CurrentIn_1;  // ufix32
  wire [31:0] decode_rd_AXI_Mon_CurrentIn_1_1;  // ufix32
  reg signed [31:0] read_reg_AXI_Mon_VoltageIn;  // sfix32
  wire [31:0] data_slice_AXI_Mon_VoltageIn_1;  // ufix32
  wire [31:0] decode_rd_AXI_Mon_VoltageIn_1_1;  // ufix32
  wire decode_sel_AXI4_Master_Rd_base_address_1_1;  // ufix1
  wire reg_enb_AXI4_Master_Rd_base_address_1_1;  // ufix1
  reg [31:0] data_reg_AXI4_Master_Rd_base_address_1_1;  // ufix32
  wire decode_sel_AXI4_Master_Wr_base_address_1_1;  // ufix1
  wire reg_enb_AXI4_Master_Wr_base_address_1_1;  // ufix1
  reg [31:0] data_reg_AXI4_Master_Wr_base_address_1_1;  // ufix32
  wire decode_sel_AXI_CC_SPI_Wr_1_1;  // ufix1
  wire reg_enb_AXI_CC_SPI_Wr_1_1;  // ufix1
  reg [31:0] data_reg_AXI_CC_SPI_Wr_1_1;  // ufix32
  wire decode_sel_AXI_CC_CONTROL_1_1;  // ufix1
  wire reg_enb_AXI_CC_CONTROL_1_1;  // ufix1
  reg [31:0] data_reg_AXI_CC_CONTROL_1_1;  // ufix32
  wire decode_sel_AXI_PWR_CONTROL_1_1;  // ufix1
  wire reg_enb_AXI_PWR_CONTROL_1_1;  // ufix1
  reg [31:0] data_reg_AXI_PWR_CONTROL_1_1;  // ufix32
  wire decode_sel_AXI_DDR_CONTROL_1_1;  // ufix1
  wire reg_enb_AXI_DDR_CONTROL_1_1;  // ufix1
  reg [31:0] data_reg_AXI_DDR_CONTROL_1_1;  // ufix32
  wire decode_sel_AXI_MonADC_SPI_Wr_1_1;  // ufix1
  wire reg_enb_AXI_MonADC_SPI_Wr_1_1;  // ufix1
  reg [31:0] data_reg_AXI_MonADC_SPI_Wr_1_1;  // ufix32
  wire decode_sel_AXI_MonADC_CONTROL_1_1;  // ufix1
  wire reg_enb_AXI_MonADC_CONTROL_1_1;  // ufix1
  reg [31:0] data_reg_AXI_MonADC_CONTROL_1_1;  // ufix32
  wire decode_sel_AXI_XAVIER_CONTROL_1_1;  // ufix1
  wire reg_enb_AXI_XAVIER_CONTROL_1_1;  // ufix1
  reg [31:0] data_reg_AXI_XAVIER_CONTROL_1_1;  // ufix32


  assign decode_sel_ip_timestamp_1_1 = addr_sel == 14'b00000000000100;



  assign const_0 = 32'b00000000000000000000000000000000;



  assign const_1 = 1'b1;



  assign enb = const_1;

  assign decode_sel_AXI_CC_SPI_Rd_1_1 = addr_sel == 14'b00000001001010;



  assign decode_sel_AXI_I2S_STATUS_1_1 = addr_sel == 14'b00000001001001;



  assign decode_sel_AXI_PLL_STATUS_1_1 = addr_sel == 14'b00000001001000;



  assign decode_sel_AXI_PWR_STATUS_1_1 = addr_sel == 14'b00000001000111;



  assign decode_sel_AXI_SYS_STATUS_1_1 = addr_sel == 14'b00000001000110;



  assign decode_sel_AXI_TVS_tempr_1_1 = addr_sel == 14'b00000001000101;



  assign decode_sel_AXI_TVS_2500mV_1_1 = addr_sel == 14'b00000001000100;



  assign decode_sel_AXI_TVS_1800mV_1_1 = addr_sel == 14'b00000001000011;



  assign decode_sel_AXI_TVS_1000mV_1_1 = addr_sel == 14'b00000001000010;



  always @(posedge clk or posedge reset_x)
    begin : reg_ip_timestamp_process
      if (reset_x == 1'b1) begin
        read_reg_ip_timestamp <= 32'b00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          read_reg_ip_timestamp <= read_ip_timestamp;
        end
      end
    end



  assign decode_rd_ip_timestamp_1_1 = (decode_sel_ip_timestamp_1_1 == 1'b0 ? const_0 :
              read_reg_ip_timestamp);



  always @(posedge clk or posedge reset_x)
    begin : reg_AXI_TVS_1000mV_process
      if (reset_x == 1'b1) begin
        read_reg_AXI_TVS_1000mV <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          read_reg_AXI_TVS_1000mV <= read_AXI_TVS_1000mV;
        end
      end
    end



  assign data_slice_AXI_TVS_1000mV_1 = read_reg_AXI_TVS_1000mV;



  assign decode_rd_AXI_TVS_1000mV_1_1 = (decode_sel_AXI_TVS_1000mV_1_1 == 1'b0 ? decode_rd_ip_timestamp_1_1 :
              data_slice_AXI_TVS_1000mV_1);



  always @(posedge clk or posedge reset_x)
    begin : reg_AXI_TVS_1800mV_process
      if (reset_x == 1'b1) begin
        read_reg_AXI_TVS_1800mV <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          read_reg_AXI_TVS_1800mV <= read_AXI_TVS_1800mV;
        end
      end
    end



  assign data_slice_AXI_TVS_1800mV_1 = read_reg_AXI_TVS_1800mV;



  assign decode_rd_AXI_TVS_1800mV_1_1 = (decode_sel_AXI_TVS_1800mV_1_1 == 1'b0 ? decode_rd_AXI_TVS_1000mV_1_1 :
              data_slice_AXI_TVS_1800mV_1);



  always @(posedge clk or posedge reset_x)
    begin : reg_AXI_TVS_2500mV_process
      if (reset_x == 1'b1) begin
        read_reg_AXI_TVS_2500mV <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          read_reg_AXI_TVS_2500mV <= read_AXI_TVS_2500mV;
        end
      end
    end



  assign data_slice_AXI_TVS_2500mV_1 = read_reg_AXI_TVS_2500mV;



  assign decode_rd_AXI_TVS_2500mV_1_1 = (decode_sel_AXI_TVS_2500mV_1_1 == 1'b0 ? decode_rd_AXI_TVS_1800mV_1_1 :
              data_slice_AXI_TVS_2500mV_1);



  always @(posedge clk or posedge reset_x)
    begin : reg_AXI_TVS_tempr_process
      if (reset_x == 1'b1) begin
        read_reg_AXI_TVS_tempr <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          read_reg_AXI_TVS_tempr <= read_AXI_TVS_tempr;
        end
      end
    end



  assign data_slice_AXI_TVS_tempr_1 = read_reg_AXI_TVS_tempr;



  assign decode_rd_AXI_TVS_tempr_1_1 = (decode_sel_AXI_TVS_tempr_1_1 == 1'b0 ? decode_rd_AXI_TVS_2500mV_1_1 :
              data_slice_AXI_TVS_tempr_1);



  always @(posedge clk or posedge reset_x)
    begin : reg_AXI_SYS_STATUS_process
      if (reset_x == 1'b1) begin
        read_reg_AXI_SYS_STATUS <= 8'b00000000;
      end
      else begin
        if (enb) begin
          read_reg_AXI_SYS_STATUS <= read_AXI_SYS_STATUS;
        end
      end
    end



  assign data_slice_AXI_SYS_STATUS_1 = {24'b0, read_reg_AXI_SYS_STATUS};



  assign decode_rd_AXI_SYS_STATUS_1_1 = (decode_sel_AXI_SYS_STATUS_1_1 == 1'b0 ? decode_rd_AXI_TVS_tempr_1_1 :
              data_slice_AXI_SYS_STATUS_1);



  always @(posedge clk or posedge reset_x)
    begin : reg_AXI_PWR_STATUS_process
      if (reset_x == 1'b1) begin
        read_reg_AXI_PWR_STATUS <= 8'b00000000;
      end
      else begin
        if (enb) begin
          read_reg_AXI_PWR_STATUS <= read_AXI_PWR_STATUS;
        end
      end
    end



  assign data_slice_AXI_PWR_STATUS_1 = {24'b0, read_reg_AXI_PWR_STATUS};



  assign decode_rd_AXI_PWR_STATUS_1_1 = (decode_sel_AXI_PWR_STATUS_1_1 == 1'b0 ? decode_rd_AXI_SYS_STATUS_1_1 :
              data_slice_AXI_PWR_STATUS_1);



  always @(posedge clk or posedge reset_x)
    begin : reg_AXI_PLL_STATUS_process
      if (reset_x == 1'b1) begin
        read_reg_AXI_PLL_STATUS <= 8'b00000000;
      end
      else begin
        if (enb) begin
          read_reg_AXI_PLL_STATUS <= read_AXI_PLL_STATUS;
        end
      end
    end



  assign data_slice_AXI_PLL_STATUS_1 = {24'b0, read_reg_AXI_PLL_STATUS};



  assign decode_rd_AXI_PLL_STATUS_1_1 = (decode_sel_AXI_PLL_STATUS_1_1 == 1'b0 ? decode_rd_AXI_PWR_STATUS_1_1 :
              data_slice_AXI_PLL_STATUS_1);



  always @(posedge clk or posedge reset_x)
    begin : reg_AXI_I2S_STATUS_process
      if (reset_x == 1'b1) begin
        read_reg_AXI_I2S_STATUS <= 4'b0000;
      end
      else begin
        if (enb) begin
          read_reg_AXI_I2S_STATUS <= read_AXI_I2S_STATUS;
        end
      end
    end



  assign data_slice_AXI_I2S_STATUS_1 = {28'b0, read_reg_AXI_I2S_STATUS};



  assign decode_rd_AXI_I2S_STATUS_1_1 = (decode_sel_AXI_I2S_STATUS_1_1 == 1'b0 ? decode_rd_AXI_PLL_STATUS_1_1 :
              data_slice_AXI_I2S_STATUS_1);



  assign decode_sel_AXI_CC_STATUS_1_1 = addr_sel == 14'b00000001001011;



  always @(posedge clk or posedge reset_x)
    begin : reg_AXI_CC_SPI_Rd_process
      if (reset_x == 1'b1) begin
        read_reg_AXI_CC_SPI_Rd <= 32'b00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          read_reg_AXI_CC_SPI_Rd <= read_AXI_CC_SPI_Rd;
        end
      end
    end



  assign decode_rd_AXI_CC_SPI_Rd_1_1 = (decode_sel_AXI_CC_SPI_Rd_1_1 == 1'b0 ? decode_rd_AXI_I2S_STATUS_1_1 :
              read_reg_AXI_CC_SPI_Rd);



  assign decode_sel_AXI_MonADC_STATUS_1_1 = addr_sel == 14'b00000001001100;



  always @(posedge clk or posedge reset_x)
    begin : reg_AXI_CC_STATUS_process
      if (reset_x == 1'b1) begin
        read_reg_AXI_CC_STATUS <= 32'b00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          read_reg_AXI_CC_STATUS <= read_AXI_CC_STATUS;
        end
      end
    end



  assign decode_rd_AXI_CC_STATUS_1_1 = (decode_sel_AXI_CC_STATUS_1_1 == 1'b0 ? decode_rd_AXI_CC_SPI_Rd_1_1 :
              read_reg_AXI_CC_STATUS);



  assign decode_sel_AXI_MonADC_SPI_Rd_1_1 = addr_sel == 14'b00000001001101;



  always @(posedge clk or posedge reset_x)
    begin : reg_AXI_MonADC_STATUS_process
      if (reset_x == 1'b1) begin
        read_reg_AXI_MonADC_STATUS <= 32'b00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          read_reg_AXI_MonADC_STATUS <= read_AXI_MonADC_STATUS;
        end
      end
    end



  assign decode_rd_AXI_MonADC_STATUS_1_1 = (decode_sel_AXI_MonADC_STATUS_1_1 == 1'b0 ? decode_rd_AXI_CC_STATUS_1_1 :
              read_reg_AXI_MonADC_STATUS);



  assign decode_sel_AXI_Mon_VoltageIn_1_1 = addr_sel == 14'b00000001010011;



  assign decode_sel_AXI_Mon_CurrentIn_1_1 = addr_sel == 14'b00000001010010;



  assign decode_sel_AXI_Mon_3V3_1_1 = addr_sel == 14'b00000001010001;



  assign decode_sel_AXI_Mon_1V8_1_1 = addr_sel == 14'b00000001010000;



  assign decode_sel_AXI_Mon_12V_1_1 = addr_sel == 14'b00000001001110;



  always @(posedge clk or posedge reset_x)
    begin : reg_AXI_MonADC_SPI_Rd_process
      if (reset_x == 1'b1) begin
        read_reg_AXI_MonADC_SPI_Rd <= 32'b00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          read_reg_AXI_MonADC_SPI_Rd <= read_AXI_MonADC_SPI_Rd;
        end
      end
    end



  assign decode_rd_AXI_MonADC_SPI_Rd_1_1 = (decode_sel_AXI_MonADC_SPI_Rd_1_1 == 1'b0 ? decode_rd_AXI_MonADC_STATUS_1_1 :
              read_reg_AXI_MonADC_SPI_Rd);



  always @(posedge clk or posedge reset_x)
    begin : reg_AXI_Mon_12V_process
      if (reset_x == 1'b1) begin
        read_reg_AXI_Mon_12V <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          read_reg_AXI_Mon_12V <= read_AXI_Mon_12V;
        end
      end
    end



  assign data_slice_AXI_Mon_12V_1 = read_reg_AXI_Mon_12V;



  assign decode_rd_AXI_Mon_12V_1_1 = (decode_sel_AXI_Mon_12V_1_1 == 1'b0 ? decode_rd_AXI_MonADC_SPI_Rd_1_1 :
              data_slice_AXI_Mon_12V_1);



  always @(posedge clk or posedge reset_x)
    begin : reg_AXI_Mon_1V8_process
      if (reset_x == 1'b1) begin
        read_reg_AXI_Mon_1V8 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          read_reg_AXI_Mon_1V8 <= read_AXI_Mon_1V8;
        end
      end
    end



  assign data_slice_AXI_Mon_1V8_1 = read_reg_AXI_Mon_1V8;



  assign decode_rd_AXI_Mon_1V8_1_1 = (decode_sel_AXI_Mon_1V8_1_1 == 1'b0 ? decode_rd_AXI_Mon_12V_1_1 :
              data_slice_AXI_Mon_1V8_1);



  always @(posedge clk or posedge reset_x)
    begin : reg_AXI_Mon_3V3_process
      if (reset_x == 1'b1) begin
        read_reg_AXI_Mon_3V3 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          read_reg_AXI_Mon_3V3 <= read_AXI_Mon_3V3;
        end
      end
    end



  assign data_slice_AXI_Mon_3V3_1 = read_reg_AXI_Mon_3V3;



  assign decode_rd_AXI_Mon_3V3_1_1 = (decode_sel_AXI_Mon_3V3_1_1 == 1'b0 ? decode_rd_AXI_Mon_1V8_1_1 :
              data_slice_AXI_Mon_3V3_1);



  always @(posedge clk or posedge reset_x)
    begin : reg_AXI_Mon_CurrentIn_process
      if (reset_x == 1'b1) begin
        read_reg_AXI_Mon_CurrentIn <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          read_reg_AXI_Mon_CurrentIn <= read_AXI_Mon_CurrentIn;
        end
      end
    end



  assign data_slice_AXI_Mon_CurrentIn_1 = read_reg_AXI_Mon_CurrentIn;



  assign decode_rd_AXI_Mon_CurrentIn_1_1 = (decode_sel_AXI_Mon_CurrentIn_1_1 == 1'b0 ? decode_rd_AXI_Mon_3V3_1_1 :
              data_slice_AXI_Mon_CurrentIn_1);



  always @(posedge clk or posedge reset_x)
    begin : reg_AXI_Mon_VoltageIn_process
      if (reset_x == 1'b1) begin
        read_reg_AXI_Mon_VoltageIn <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          read_reg_AXI_Mon_VoltageIn <= read_AXI_Mon_VoltageIn;
        end
      end
    end



  assign data_slice_AXI_Mon_VoltageIn_1 = read_reg_AXI_Mon_VoltageIn;



  assign decode_rd_AXI_Mon_VoltageIn_1_1 = (decode_sel_AXI_Mon_VoltageIn_1_1 == 1'b0 ? decode_rd_AXI_Mon_CurrentIn_1_1 :
              data_slice_AXI_Mon_VoltageIn_1);



  assign data_read = decode_rd_AXI_Mon_VoltageIn_1_1;

  assign decode_sel_AXI4_Master_Rd_base_address_1_1 = addr_sel == 14'b00000000000010;



  assign reg_enb_AXI4_Master_Rd_base_address_1_1 = decode_sel_AXI4_Master_Rd_base_address_1_1 & wr_enb;



  always @(posedge clk or posedge reset_x)
    begin : reg_AXI4_Master_Rd_base_address_1_1_process
      if (reset_x == 1'b1) begin
        data_reg_AXI4_Master_Rd_base_address_1_1 <= 32'b00000000000000000000000000000000;
      end
      else begin
        if (enb && reg_enb_AXI4_Master_Rd_base_address_1_1) begin
          data_reg_AXI4_Master_Rd_base_address_1_1 <= data_write;
        end
      end
    end



  assign write_AXI4_Master_Rd_base_address = data_reg_AXI4_Master_Rd_base_address_1_1;

  assign decode_sel_AXI4_Master_Wr_base_address_1_1 = addr_sel == 14'b00000000000011;



  assign reg_enb_AXI4_Master_Wr_base_address_1_1 = decode_sel_AXI4_Master_Wr_base_address_1_1 & wr_enb;



  always @(posedge clk or posedge reset_x)
    begin : reg_AXI4_Master_Wr_base_address_1_1_process
      if (reset_x == 1'b1) begin
        data_reg_AXI4_Master_Wr_base_address_1_1 <= 32'b00000000000000000000000000000000;
      end
      else begin
        if (enb && reg_enb_AXI4_Master_Wr_base_address_1_1) begin
          data_reg_AXI4_Master_Wr_base_address_1_1 <= data_write;
        end
      end
    end



  assign write_AXI4_Master_Wr_base_address = data_reg_AXI4_Master_Wr_base_address_1_1;

  assign decode_sel_AXI_CC_SPI_Wr_1_1 = addr_sel == 14'b00000001000000;



  assign reg_enb_AXI_CC_SPI_Wr_1_1 = decode_sel_AXI_CC_SPI_Wr_1_1 & wr_enb;



  always @(posedge clk or posedge reset_x)
    begin : reg_AXI_CC_SPI_Wr_1_1_process
      if (reset_x == 1'b1) begin
        data_reg_AXI_CC_SPI_Wr_1_1 <= 32'b00000000000000000000000000000000;
      end
      else begin
        if (enb && reg_enb_AXI_CC_SPI_Wr_1_1) begin
          data_reg_AXI_CC_SPI_Wr_1_1 <= data_write;
        end
      end
    end



  assign write_AXI_CC_SPI_Wr = data_reg_AXI_CC_SPI_Wr_1_1;

  assign decode_sel_AXI_CC_CONTROL_1_1 = addr_sel == 14'b00000001000001;



  assign reg_enb_AXI_CC_CONTROL_1_1 = decode_sel_AXI_CC_CONTROL_1_1 & wr_enb;



  always @(posedge clk or posedge reset_x)
    begin : reg_AXI_CC_CONTROL_1_1_process
      if (reset_x == 1'b1) begin
        data_reg_AXI_CC_CONTROL_1_1 <= 32'b00000000000000000000000000000000;
      end
      else begin
        if (enb && reg_enb_AXI_CC_CONTROL_1_1) begin
          data_reg_AXI_CC_CONTROL_1_1 <= data_write;
        end
      end
    end



  assign write_AXI_CC_CONTROL = data_reg_AXI_CC_CONTROL_1_1;

  assign decode_sel_AXI_PWR_CONTROL_1_1 = addr_sel == 14'b00000001001111;



  assign reg_enb_AXI_PWR_CONTROL_1_1 = decode_sel_AXI_PWR_CONTROL_1_1 & wr_enb;



  always @(posedge clk or posedge reset_x)
    begin : reg_AXI_PWR_CONTROL_1_1_process
      if (reset_x == 1'b1) begin
        data_reg_AXI_PWR_CONTROL_1_1 <= 32'b00000000000000000000000000000000;
      end
      else begin
        if (enb && reg_enb_AXI_PWR_CONTROL_1_1) begin
          data_reg_AXI_PWR_CONTROL_1_1 <= data_write;
        end
      end
    end



  assign write_AXI_PWR_CONTROL = data_reg_AXI_PWR_CONTROL_1_1;

  assign decode_sel_AXI_DDR_CONTROL_1_1 = addr_sel == 14'b00000001010100;



  assign reg_enb_AXI_DDR_CONTROL_1_1 = decode_sel_AXI_DDR_CONTROL_1_1 & wr_enb;



  always @(posedge clk or posedge reset_x)
    begin : reg_AXI_DDR_CONTROL_1_1_process
      if (reset_x == 1'b1) begin
        data_reg_AXI_DDR_CONTROL_1_1 <= 32'b00000000000000000000000000000000;
      end
      else begin
        if (enb && reg_enb_AXI_DDR_CONTROL_1_1) begin
          data_reg_AXI_DDR_CONTROL_1_1 <= data_write;
        end
      end
    end



  assign write_AXI_DDR_CONTROL = data_reg_AXI_DDR_CONTROL_1_1;

  assign decode_sel_AXI_MonADC_SPI_Wr_1_1 = addr_sel == 14'b00000001010101;



  assign reg_enb_AXI_MonADC_SPI_Wr_1_1 = decode_sel_AXI_MonADC_SPI_Wr_1_1 & wr_enb;



  always @(posedge clk or posedge reset_x)
    begin : reg_AXI_MonADC_SPI_Wr_1_1_process
      if (reset_x == 1'b1) begin
        data_reg_AXI_MonADC_SPI_Wr_1_1 <= 32'b00000000000000000000000000000000;
      end
      else begin
        if (enb && reg_enb_AXI_MonADC_SPI_Wr_1_1) begin
          data_reg_AXI_MonADC_SPI_Wr_1_1 <= data_write;
        end
      end
    end



  assign write_AXI_MonADC_SPI_Wr = data_reg_AXI_MonADC_SPI_Wr_1_1;

  assign decode_sel_AXI_MonADC_CONTROL_1_1 = addr_sel == 14'b00000001010110;



  assign reg_enb_AXI_MonADC_CONTROL_1_1 = decode_sel_AXI_MonADC_CONTROL_1_1 & wr_enb;



  always @(posedge clk or posedge reset_x)
    begin : reg_AXI_MonADC_CONTROL_1_1_process
      if (reset_x == 1'b1) begin
        data_reg_AXI_MonADC_CONTROL_1_1 <= 32'b00000000000000000000000000000000;
      end
      else begin
        if (enb && reg_enb_AXI_MonADC_CONTROL_1_1) begin
          data_reg_AXI_MonADC_CONTROL_1_1 <= data_write;
        end
      end
    end



  assign write_AXI_MonADC_CONTROL = data_reg_AXI_MonADC_CONTROL_1_1;

  assign decode_sel_AXI_XAVIER_CONTROL_1_1 = addr_sel == 14'b00000001010111;



  assign reg_enb_AXI_XAVIER_CONTROL_1_1 = decode_sel_AXI_XAVIER_CONTROL_1_1 & wr_enb;



  always @(posedge clk or posedge reset_x)
    begin : reg_AXI_XAVIER_CONTROL_1_1_process
      if (reset_x == 1'b1) begin
        data_reg_AXI_XAVIER_CONTROL_1_1 <= 32'b00000000000000000000000000000000;
      end
      else begin
        if (enb && reg_enb_AXI_XAVIER_CONTROL_1_1) begin
          data_reg_AXI_XAVIER_CONTROL_1_1 <= data_write;
        end
      end
    end



  assign write_AXI_XAVIER_CONTROL = data_reg_AXI_XAVIER_CONTROL_1_1;

endmodule  // SYSTEM_ip_addr_decoder

