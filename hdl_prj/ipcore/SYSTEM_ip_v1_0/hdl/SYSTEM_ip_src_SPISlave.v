// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\tb_SYSTEM\SYSTEM_ip_src_SPISlave.v
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// Copyright (c) 2023, Alexei Evsenin, evsenin@gmail.com
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: SYSTEM_ip_src_SPISlave
// Source Path: tb_SYSTEM/SYSTEM/SPISlave
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module SYSTEM_ip_src_SPISlave
          (clk,
           reset_x,
           nCS0,
           SCK,
           MOSI,
           tstamp_valid,
           tstamp_value,
           MISO);


  input   clk;
  input   reset_x;
  input   nCS0;
  input   SCK;
  input   MOSI;
  output  tstamp_valid;
  output  [63:0] tstamp_value;  // ufix64
  output  MISO;


  reg  Delay6_out1;
  reg  Delay7_out1;
  reg  Delay5_out1;
  wire [31:0] raddr;  // uint32
  reg [31:0] Delay3_out1;  // uint32
  wire rvalid;
  reg  Delay4_out1;
  reg [31:0] Unit_Delay_Enabled_Synchronous_out1;  // uint32
  wire MISO_1;
  wire wvalid;
  wire [31:0] wdata;  // uint32
  wire [31:0] waddr;  // uint32
  reg  Delay2_out1;
  reg [31:0] Delay1_out1;  // uint32
  wire Compare_To_Constant1_out1;
  wire AND1_out1;
  reg  Unit_Delay_out1;
  wire Compare_To_Constant_out1;
  wire AND_out1;
  reg [31:0] Delay_out1;  // uint32
  reg [31:0] Unit_Delay_Enabled_Synchronous1_out1;  // uint32
  reg [31:0] Unit_Delay_Enabled_Synchronous2_out1;  // uint32
  wire [63:0] Bit_Concat_out1;  // ufix64
  reg  Delay8_out1;


  always @(posedge clk or posedge reset_x)
    begin : Delay6_process
      if (reset_x == 1'b1) begin
        Delay6_out1 <= 1'b0;
      end
      else begin
        Delay6_out1 <= nCS0;
      end
    end


  always @(posedge clk or posedge reset_x)
    begin : Delay7_process
      if (reset_x == 1'b1) begin
        Delay7_out1 <= 1'b0;
      end
      else begin
        Delay7_out1 <= MOSI;
      end
    end


  always @(posedge clk or posedge reset_x)
    begin : Delay5_process
      if (reset_x == 1'b1) begin
        Delay5_out1 <= 1'b0;
      end
      else begin
        Delay5_out1 <= SCK;
      end
    end


  always @(posedge clk or posedge reset_x)
    begin : Delay3_process
      if (reset_x == 1'b1) begin
        Delay3_out1 <= 32'b00000000000000000000000000000000;
      end
      else begin
        Delay3_out1 <= raddr;
      end
    end


  always @(posedge clk or posedge reset_x)
    begin : Delay4_process
      if (reset_x == 1'b1) begin
        Delay4_out1 <= 1'b0;
      end
      else begin
        Delay4_out1 <= rvalid;
      end
    end


  always @(posedge clk or posedge reset_x)
    begin : Unit_Delay_Enabled_Synchronous_process
      if (reset_x == 1'b1) begin
        Unit_Delay_Enabled_Synchronous_out1 <= 32'b00000000000000000000000000000000;
      end
      else begin
        if (Delay4_out1) begin
          Unit_Delay_Enabled_Synchronous_out1 <= Delay3_out1;
        end
      end
    end


  SYSTEM_ip_src_spi_slave u_spi_slave (.clk(clk),
                                       .reset_x(reset_x),
                                       .nCS(Delay6_out1),
                                       .MOSI(Delay7_out1),
                                       .SCK(Delay5_out1),
                                       .rdata(Unit_Delay_Enabled_Synchronous_out1),  // uint32
                                       .MISO(MISO_1),
                                       .wvalid(wvalid),
                                       .rvalid(rvalid),
                                       .wdata(wdata),  // uint32
                                       .waddr(waddr),  // uint32
                                       .raddr(raddr)  // uint32
                                       );
  always @(posedge clk or posedge reset_x)
    begin : Delay2_process
      if (reset_x == 1'b1) begin
        Delay2_out1 <= 1'b0;
      end
      else begin
        Delay2_out1 <= wvalid;
      end
    end


  always @(posedge clk or posedge reset_x)
    begin : Delay1_process
      if (reset_x == 1'b1) begin
        Delay1_out1 <= 32'b00000000000000000000000000000000;
      end
      else begin
        Delay1_out1 <= waddr;
      end
    end


  assign Compare_To_Constant1_out1 = Delay1_out1 == 32'b00000000000000000000010000000100;


  assign AND1_out1 = Delay2_out1 & Compare_To_Constant1_out1;


  always @(posedge clk or posedge reset_x)
    begin : Unit_Delay_process
      if (reset_x == 1'b1) begin
        Unit_Delay_out1 <= 1'b0;
      end
      else begin
        Unit_Delay_out1 <= AND1_out1;
      end
    end


  assign tstamp_valid = Unit_Delay_out1;

  assign Compare_To_Constant_out1 = Delay1_out1 == 32'b00000000000000000000010000000000;


  assign AND_out1 = Delay2_out1 & Compare_To_Constant_out1;


  always @(posedge clk or posedge reset_x)
    begin : Delay_process
      if (reset_x == 1'b1) begin
        Delay_out1 <= 32'b00000000000000000000000000000000;
      end
      else begin
        Delay_out1 <= wdata;
      end
    end


  always @(posedge clk or posedge reset_x)
    begin : Unit_Delay_Enabled_Synchronous1_process
      if (reset_x == 1'b1) begin
        Unit_Delay_Enabled_Synchronous1_out1 <= 32'b00000000000000000000000000000000;
      end
      else begin
        if (AND_out1) begin
          Unit_Delay_Enabled_Synchronous1_out1 <= Delay_out1;
        end
      end
    end


  always @(posedge clk or posedge reset_x)
    begin : Unit_Delay_Enabled_Synchronous2_process
      if (reset_x == 1'b1) begin
        Unit_Delay_Enabled_Synchronous2_out1 <= 32'b00000000000000000000000000000000;
      end
      else begin
        if (AND1_out1) begin
          Unit_Delay_Enabled_Synchronous2_out1 <= Delay_out1;
        end
      end
    end


  assign Bit_Concat_out1 = {Unit_Delay_Enabled_Synchronous1_out1, Unit_Delay_Enabled_Synchronous2_out1};


  assign tstamp_value = Bit_Concat_out1;

  always @(posedge clk or posedge reset_x)
    begin : Delay8_process
      if (reset_x == 1'b1) begin
        Delay8_out1 <= 1'b0;
      end
      else begin
        Delay8_out1 <= MISO_1;
      end
    end


  assign MISO = Delay8_out1;

endmodule  // SYSTEM_ip_src_SPISlave

