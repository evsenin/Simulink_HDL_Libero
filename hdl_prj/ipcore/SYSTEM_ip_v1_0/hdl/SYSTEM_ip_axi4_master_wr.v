// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\tb_SYSTEM\SYSTEM_ip_axi4_master_wr.v
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// Copyright (c) 2023, Alexei Evsenin, evsenin@gmail.com
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: SYSTEM_ip_axi4_master_wr
// Source Path: SYSTEM_ip/SYSTEM_ip_axi4_master_wr
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module SYSTEM_ip_axi4_master_wr
          (clk,
           reset_x,
           AXI4_Master_Wr_AWREADY,
           AXI4_Master_Wr_WREADY,
           AXI4_Master_Wr_BID,
           AXI4_Master_Wr_BRESP,
           AXI4_Master_Wr_BVALID,
           user_data,
           user_wr_addr,
           user_wr_len,
           user_wr_valid,
           write_AXI4_Master_Wr_base_address,
           soft_reset_pending,
           AXI4_Master_Wr_AWID,
           AXI4_Master_Wr_AWADDR,
           AXI4_Master_Wr_AWLEN,
           AXI4_Master_Wr_AWSIZE,
           AXI4_Master_Wr_AWBURST,
           AXI4_Master_Wr_AWLOCK,
           AXI4_Master_Wr_AWCACHE,
           AXI4_Master_Wr_AWPROT,
           AXI4_Master_Wr_AWVALID,
           AXI4_Master_Wr_WDATA,
           AXI4_Master_Wr_WSTRB,
           AXI4_Master_Wr_WLAST,
           AXI4_Master_Wr_WVALID,
           AXI4_Master_Wr_BREADY,
           user_wr_ready,
           user_wr_complete,
           in_burst_axi4_master_wr);


  input   clk;
  input   reset_x;
  input   AXI4_Master_Wr_AWREADY;  // ufix1
  input   AXI4_Master_Wr_WREADY;  // ufix1
  input   AXI4_Master_Wr_BID;  // ufix1
  input   [1:0] AXI4_Master_Wr_BRESP;  // ufix2
  input   AXI4_Master_Wr_BVALID;  // ufix1
  input   [31:0] user_data;  // ufix32
  input   [31:0] user_wr_addr;  // ufix32
  input   [7:0] user_wr_len;  // ufix8
  input   user_wr_valid;  // ufix1
  input   [31:0] write_AXI4_Master_Wr_base_address;  // ufix32
  input   soft_reset_pending;  // ufix1
  output  AXI4_Master_Wr_AWID;  // ufix1
  output  [31:0] AXI4_Master_Wr_AWADDR;  // ufix32
  output  [7:0] AXI4_Master_Wr_AWLEN;  // ufix8
  output  [2:0] AXI4_Master_Wr_AWSIZE;  // ufix3
  output  [1:0] AXI4_Master_Wr_AWBURST;  // ufix2
  output  AXI4_Master_Wr_AWLOCK;  // ufix1
  output  [3:0] AXI4_Master_Wr_AWCACHE;  // ufix4
  output  [2:0] AXI4_Master_Wr_AWPROT;  // ufix3
  output  AXI4_Master_Wr_AWVALID;  // ufix1
  output  [31:0] AXI4_Master_Wr_WDATA;  // ufix32
  output  [3:0] AXI4_Master_Wr_WSTRB;  // ufix4
  output  AXI4_Master_Wr_WLAST;  // ufix1
  output  AXI4_Master_Wr_WVALID;  // ufix1
  output  AXI4_Master_Wr_BREADY;  // ufix1
  output  user_wr_ready;  // ufix1
  output  user_wr_complete;  // ufix1
  output  in_burst_axi4_master_wr;  // ufix1


  wire enb;
  wire const_len_dec;  // ufix1
  wire signed [8:0] len_decrement_sub_temp;  // sfix9
  wire signed [8:0] len_decrement_1;  // sfix9
  wire [7:0] len_decrement_2;  // ufix8
  wire signed [8:0] len_decrement_3;  // sfix9
  wire [7:0] len_val;  // ufix8
  wire const_1_1;  // ufix1
  wire [31:0] full_addr;  // ufix32
  wire const_IDWidth;  // ufix1
  wire out_fifo_empty;  // ufix1
  wire wvalid_internal;  // ufix1
  wire out_fifo_ack;  // ufix1
  reg  wr_transfer;  // ufix1
  wire [31:0] wr_fifo_data;  // ufix32
  reg [31:0] out_fifo_wdata;  // ufix32
  reg  out_fifo_push;  // ufix1
  wire out_fifo_afull;  // ufix1
  reg  wr_fifo_ack;  // ufix1
  wire [31:0] wr_fifo_addr;  // ufix32
  wire wr_fifo_empty;  // ufix1
  wire wr_fifo_afull;  // ufix1
  wire wr_valid_internal;  // ufix1
  wire [7:0] wr_fifo_len;  // ufix8
  reg [7:0] axi4_master_wr_wr_astate;  // uint8
  reg [7:0] axi4_master_wr_wr_dstate;  // uint8
  reg [7:0] axi4_master_wr_wr_len_reg;  // ufix8
  reg [31:0] axi4_master_wr_wr_addr_reg;  // ufix32
  reg  axi4_master_wr_wr_awid_reg;  // ufix1
  reg  axi4_master_wr_last_burst_reg;
  reg  axi4_master_wr_data_done_reg;
  reg  axi4_master_wr_addr_done_reg;
  reg [7:0] axi4_master_wr_awlen_reg;  // ufix8
  reg [7:0] axi4_master_wr_burst_cnt_reg;  // ufix8
  reg  axi4_master_wr_awvalid_reg;
  reg [31:0] axi4_master_wr_awaddr_reg;  // ufix32
  reg  axi4_master_wr_awid_reg;  // ufix1
  reg  axi4_master_wr_wvalid_reg;
  reg  axi4_master_wr_wlast_reg;
  reg [7:0] axi4_master_wr_wr_astate_next;  // uint8
  reg [7:0] axi4_master_wr_wr_dstate_next;  // uint8
  reg [7:0] axi4_master_wr_wr_len_reg_next;  // ufix8
  reg [31:0] axi4_master_wr_wr_addr_reg_next;  // ufix32
  reg  axi4_master_wr_wr_awid_reg_next;  // ufix1
  reg  axi4_master_wr_last_burst_reg_next;
  reg  axi4_master_wr_data_done_reg_next;
  reg  axi4_master_wr_addr_done_reg_next;
  reg [7:0] axi4_master_wr_awlen_reg_next;  // ufix8
  reg [7:0] axi4_master_wr_burst_cnt_reg_next;  // ufix8
  reg  axi4_master_wr_awvalid_reg_next;
  reg [31:0] axi4_master_wr_awaddr_reg_next;  // ufix32
  reg  axi4_master_wr_awid_reg_next;  // ufix1
  reg  axi4_master_wr_wvalid_reg_next;
  reg  axi4_master_wr_wlast_reg_next;
  reg  AXI4_Master_Wr_AWVALID_1;  // ufix1
  reg [31:0] AXI4_Master_Wr_AWADDR_1;  // ufix32
  reg [7:0] AXI4_Master_Wr_AWLEN_1;  // ufix8
  reg  AXI4_Master_Wr_AWID_1;  // ufix1
  reg  out_fifo_wlast;  // ufix1
  reg  wr_complete_internal;  // ufix1
  wire [2:0] const_awsize;  // ufix3
  wire [1:0] const_1_2;  // ufix2
  wire const_0_1;  // ufix1
  wire [3:0] const_3_4;  // ufix4
  wire [2:0] const_0_3;  // ufix3
  wire [3:0] const_wstrb;  // ufix4
  wire aw_transfer;  // ufix1
  wire [8:0] const_0_9;  // ufix9
  wire [8:0] const_1_9;  // ufix9
  wire [8:0] aw_transfer_len;  // ufix9
  wire w_transfer;  // ufix1
  wire [8:0] w_transfer_len;  // ufix9
  reg signed [31:0] accum_value;  // sfix32
  wire signed [31:0] accum_awlen_adder_1;  // sfix32
  wire signed [31:0] accum_aw_len;  // sfix32
  wire signed [31:0] accum_wlen_adder_1;  // sfix32
  wire signed [31:0] accum_w_len;  // sfix32
  reg  axi4_master_wr_wr_valid;
  reg  axi4_master_wr_reset_pending;
  reg  axi4_master_wr_last_burst_reg_temp;
  reg  axi4_master_wr_addr_done_reg_temp;


  assign const_len_dec = 1'b1;



  assign len_decrement_1 = {1'b0, user_wr_len};
  assign len_decrement_2 = {7'b0, const_len_dec};
  assign len_decrement_3 = {1'b0, len_decrement_2};
  assign len_decrement_sub_temp = len_decrement_1 - len_decrement_3;
  assign len_val = (len_decrement_sub_temp[8] == 1'b1 ? 8'b00000000 :
              len_decrement_sub_temp[7:0]);



  assign const_1_1 = 1'b1;



  assign full_addr = user_wr_addr + write_AXI4_Master_Wr_base_address;



  assign const_IDWidth = 1'b0;



  assign enb = const_1_1;

  assign wvalid_internal =  ~ out_fifo_empty;



  assign out_fifo_ack = AXI4_Master_Wr_WREADY & wvalid_internal;



  always @(posedge clk or posedge reset_x)
    begin : wr_transfer_reg_process
      if (reset_x == 1'b1) begin
        out_fifo_wdata <= 32'b00000000000000000000000000000000;
      end
      else begin
        if (enb && wr_transfer) begin
          out_fifo_wdata <= wr_fifo_data;
        end
      end
    end



  SYSTEM_ip_wdata_fifo u_SYSTEM_ip_wdata_fifo_inst (.clk(clk),
                                                    .reset_x(reset_x),
                                                    .enb(const_1_1),
                                                    .In(out_fifo_wdata),  // ufix32
                                                    .Push(out_fifo_push),  // ufix1
                                                    .Pop(out_fifo_ack),  // ufix1
                                                    .Out(AXI4_Master_Wr_WDATA),  // ufix32
                                                    .Empty(out_fifo_empty),  // ufix1
                                                    .AFull(out_fifo_afull)  // ufix1
                                                    );

  SYSTEM_ip_wr_addr_fifo u_SYSTEM_ip_wr_addr_fifo_inst (.clk(clk),
                                                        .reset_x(reset_x),
                                                        .enb(const_1_1),
                                                        .In(full_addr),  // ufix32
                                                        .Push(user_wr_valid),  // ufix1
                                                        .Pop(wr_fifo_ack),  // ufix1
                                                        .Out(wr_fifo_addr)  // ufix32
                                                        );

  SYSTEM_ip_wr_data_fifo u_SYSTEM_ip_wr_data_fifo_inst (.clk(clk),
                                                        .reset_x(reset_x),
                                                        .enb(const_1_1),
                                                        .In(user_data),  // ufix32
                                                        .Push(user_wr_valid),  // ufix1
                                                        .Pop(wr_fifo_ack),  // ufix1
                                                        .Out(wr_fifo_data),  // ufix32
                                                        .Empty(wr_fifo_empty),  // ufix1
                                                        .AFull(wr_fifo_afull)  // ufix1
                                                        );

  assign wr_valid_internal =  ~ wr_fifo_empty;



  SYSTEM_ip_wr_len_fifo u_SYSTEM_ip_wr_len_fifo_inst (.clk(clk),
                                                      .reset_x(reset_x),
                                                      .enb(const_1_1),
                                                      .In(len_val),  // ufix8
                                                      .Push(user_wr_valid),  // ufix1
                                                      .Pop(wr_fifo_ack),  // ufix1
                                                      .Out(wr_fifo_len)  // ufix8
                                                      );

  always @(posedge clk or posedge reset_x)
    begin : axi4_master_wr_process
      if (reset_x == 1'b1) begin
        axi4_master_wr_wr_astate <= 8'd0;
        axi4_master_wr_wr_dstate <= 8'd0;
        axi4_master_wr_wr_len_reg <= 8'b00000000;
        axi4_master_wr_wr_addr_reg <= 32'b00000000000000000000000000000000;
        axi4_master_wr_wr_awid_reg <= 1'b0;
        axi4_master_wr_awlen_reg <= 8'b00000000;
        axi4_master_wr_burst_cnt_reg <= 8'b00000000;
        axi4_master_wr_awvalid_reg <= 1'b0;
        axi4_master_wr_awaddr_reg <= 32'b00000000000000000000000000000000;
        axi4_master_wr_awid_reg <= 1'b0;
        axi4_master_wr_wvalid_reg <= 1'b0;
        axi4_master_wr_wlast_reg <= 1'b0;
        axi4_master_wr_last_burst_reg <= 1'b0;
        axi4_master_wr_data_done_reg <= 1'b0;
        axi4_master_wr_addr_done_reg <= 1'b0;
      end
      else begin
        if (enb) begin
          axi4_master_wr_wr_astate <= axi4_master_wr_wr_astate_next;
          axi4_master_wr_wr_dstate <= axi4_master_wr_wr_dstate_next;
          axi4_master_wr_wr_len_reg <= axi4_master_wr_wr_len_reg_next;
          axi4_master_wr_wr_addr_reg <= axi4_master_wr_wr_addr_reg_next;
          axi4_master_wr_wr_awid_reg <= axi4_master_wr_wr_awid_reg_next;
          axi4_master_wr_last_burst_reg <= axi4_master_wr_last_burst_reg_next;
          axi4_master_wr_data_done_reg <= axi4_master_wr_data_done_reg_next;
          axi4_master_wr_addr_done_reg <= axi4_master_wr_addr_done_reg_next;
          axi4_master_wr_awlen_reg <= axi4_master_wr_awlen_reg_next;
          axi4_master_wr_burst_cnt_reg <= axi4_master_wr_burst_cnt_reg_next;
          axi4_master_wr_awvalid_reg <= axi4_master_wr_awvalid_reg_next;
          axi4_master_wr_awaddr_reg <= axi4_master_wr_awaddr_reg_next;
          axi4_master_wr_awid_reg <= axi4_master_wr_awid_reg_next;
          axi4_master_wr_wvalid_reg <= axi4_master_wr_wvalid_reg_next;
          axi4_master_wr_wlast_reg <= axi4_master_wr_wlast_reg_next;
        end
      end
    end

  always @(AXI4_Master_Wr_AWREADY, axi4_master_wr_addr_done_reg,
       axi4_master_wr_awaddr_reg, axi4_master_wr_awid_reg,
       axi4_master_wr_awlen_reg, axi4_master_wr_awvalid_reg,
       axi4_master_wr_burst_cnt_reg, axi4_master_wr_data_done_reg,
       axi4_master_wr_last_burst_reg, axi4_master_wr_wlast_reg,
       axi4_master_wr_wr_addr_reg, axi4_master_wr_wr_astate,
       axi4_master_wr_wr_awid_reg, axi4_master_wr_wr_dstate,
       axi4_master_wr_wr_len_reg, axi4_master_wr_wvalid_reg, const_IDWidth,
       out_fifo_afull, soft_reset_pending, wr_fifo_addr, wr_fifo_len,
       wr_valid_internal) begin
    axi4_master_wr_last_burst_reg_temp = axi4_master_wr_last_burst_reg;
    axi4_master_wr_addr_done_reg_temp = axi4_master_wr_addr_done_reg;
    axi4_master_wr_wr_astate_next = axi4_master_wr_wr_astate;
    axi4_master_wr_wr_dstate_next = axi4_master_wr_wr_dstate;
    axi4_master_wr_wr_len_reg_next = axi4_master_wr_wr_len_reg;
    axi4_master_wr_wr_addr_reg_next = axi4_master_wr_wr_addr_reg;
    axi4_master_wr_wr_awid_reg_next = axi4_master_wr_wr_awid_reg;
    axi4_master_wr_data_done_reg_next = axi4_master_wr_data_done_reg;
    axi4_master_wr_awlen_reg_next = axi4_master_wr_awlen_reg;
    axi4_master_wr_burst_cnt_reg_next = axi4_master_wr_burst_cnt_reg;
    axi4_master_wr_awvalid_reg_next = axi4_master_wr_awvalid_reg;
    axi4_master_wr_awaddr_reg_next = axi4_master_wr_awaddr_reg;
    axi4_master_wr_awid_reg_next = axi4_master_wr_awid_reg;
    axi4_master_wr_wvalid_reg_next = axi4_master_wr_wvalid_reg;
    axi4_master_wr_wlast_reg_next = axi4_master_wr_wlast_reg;
    axi4_master_wr_wr_valid = wr_valid_internal != 1'b0;
    axi4_master_wr_reset_pending = soft_reset_pending != 1'b0;
    wr_complete_internal = (axi4_master_wr_last_burst_reg && axi4_master_wr_wlast_reg) && axi4_master_wr_wvalid_reg;
    case ( axi4_master_wr_wr_astate)
      8'd0 :
        begin
          axi4_master_wr_last_burst_reg_temp = 1'b0;
          axi4_master_wr_addr_done_reg_temp = 1'b0;
          if (axi4_master_wr_wr_valid && ( ! axi4_master_wr_reset_pending)) begin
            axi4_master_wr_wr_astate_next = 8'd1;
          end
          axi4_master_wr_wr_len_reg_next = wr_fifo_len;
          axi4_master_wr_wr_addr_reg_next = wr_fifo_addr;
          axi4_master_wr_wr_awid_reg_next = const_IDWidth;
        end
      8'd1 :
        begin
          axi4_master_wr_addr_done_reg_temp = 1'b0;
          if (axi4_master_wr_awvalid_reg && AXI4_Master_Wr_AWREADY) begin
            axi4_master_wr_awvalid_reg_next = 1'b0;
            axi4_master_wr_wr_astate_next = 8'd3;
          end
          else begin
            axi4_master_wr_awvalid_reg_next = 1'b1;
          end
          axi4_master_wr_awaddr_reg_next = axi4_master_wr_wr_addr_reg;
          axi4_master_wr_awid_reg_next = axi4_master_wr_wr_awid_reg;
          axi4_master_wr_awlen_reg_next = axi4_master_wr_wr_len_reg;
          axi4_master_wr_last_burst_reg_temp = 1'b1;
        end
      8'd3 :
        begin
          if (axi4_master_wr_data_done_reg) begin
            if (axi4_master_wr_last_burst_reg) begin
              axi4_master_wr_wr_astate_next = 8'd0;
            end
            else begin
              axi4_master_wr_wr_astate_next = 8'd1;
            end
            axi4_master_wr_wr_addr_reg_next = axi4_master_wr_wr_addr_reg + 32'b00000000000000000000010000000000;
            axi4_master_wr_addr_done_reg_temp = 1'b1;
          end
        end
      default :
        begin
          axi4_master_wr_wr_astate_next = 8'd0;
        end
    endcase
    case ( axi4_master_wr_wr_dstate)
      8'd0 :
        begin
          wr_fifo_ack = 1'b0;
          wr_transfer = 1'b0;
          axi4_master_wr_data_done_reg_next = 1'b0;
          if (axi4_master_wr_wr_valid && ( ! axi4_master_wr_reset_pending)) begin
            axi4_master_wr_wr_dstate_next = 8'd1;
          end
          axi4_master_wr_wvalid_reg_next = 1'b0;
          axi4_master_wr_wlast_reg_next = 1'b0;
        end
      8'd1 :
        begin
          axi4_master_wr_wr_dstate_next = 8'd2;
          axi4_master_wr_data_done_reg_next = 1'b0;
          axi4_master_wr_burst_cnt_reg_next = axi4_master_wr_wr_len_reg;
          wr_fifo_ack = 1'b0;
          wr_transfer = 1'b0;
        end
      8'd2 :
        begin
          if (( ~ out_fifo_afull) && axi4_master_wr_wr_valid) begin
            axi4_master_wr_wvalid_reg_next = 1'b1;
            wr_fifo_ack = 1'b1;
            if (axi4_master_wr_burst_cnt_reg == 8'b00000000) begin
              axi4_master_wr_wlast_reg_next = 1'b1;
              axi4_master_wr_wr_dstate_next = 8'd3;
              axi4_master_wr_data_done_reg_next = 1'b1;
            end
            axi4_master_wr_burst_cnt_reg_next = axi4_master_wr_burst_cnt_reg - 8'b00000001;
          end
          else begin
            axi4_master_wr_wvalid_reg_next = 1'b0;
            wr_fifo_ack = 1'b0;
          end
          wr_transfer = 1'b1;
        end
      8'd3 :
        begin
          if (axi4_master_wr_addr_done_reg_temp) begin
            if (axi4_master_wr_last_burst_reg_temp) begin
              axi4_master_wr_wr_dstate_next = 8'd0;
            end
            else begin
              axi4_master_wr_wr_dstate_next = 8'd1;
            end
          end
          axi4_master_wr_wvalid_reg_next = 1'b0;
          axi4_master_wr_wlast_reg_next = 1'b0;
          wr_fifo_ack = 1'b0;
          wr_transfer = 1'b0;
          axi4_master_wr_data_done_reg_next = 1'b1;
        end
      default :
        begin
          wr_fifo_ack = 1'b0;
          wr_transfer = 1'b0;
          axi4_master_wr_wr_dstate_next = 8'd0;
        end
    endcase
    AXI4_Master_Wr_AWVALID_1 = axi4_master_wr_awvalid_reg;
    AXI4_Master_Wr_AWADDR_1 = axi4_master_wr_awaddr_reg;
    AXI4_Master_Wr_AWLEN_1 = axi4_master_wr_awlen_reg;
    AXI4_Master_Wr_AWID_1 = axi4_master_wr_awid_reg;
    out_fifo_push = axi4_master_wr_wvalid_reg;
    out_fifo_wlast = axi4_master_wr_wlast_reg;
    axi4_master_wr_last_burst_reg_next = axi4_master_wr_last_burst_reg_temp;
    axi4_master_wr_addr_done_reg_next = axi4_master_wr_addr_done_reg_temp;
  end



  assign const_awsize = 3'b010;



  assign AXI4_Master_Wr_AWSIZE = const_awsize;

  assign const_1_2 = 2'b01;



  assign AXI4_Master_Wr_AWBURST = const_1_2;

  assign const_0_1 = 1'b0;



  assign AXI4_Master_Wr_AWLOCK = const_0_1;

  assign const_3_4 = 4'b0011;



  assign AXI4_Master_Wr_AWCACHE = const_3_4;

  assign const_0_3 = 3'b000;



  assign AXI4_Master_Wr_AWPROT = const_0_3;

  assign const_wstrb = 4'b1111;



  assign AXI4_Master_Wr_WSTRB = const_wstrb;

  SYSTEM_ip_wlast_fifo u_SYSTEM_ip_wlast_fifo_inst (.clk(clk),
                                                    .reset_x(reset_x),
                                                    .enb(const_1_1),
                                                    .In(out_fifo_wlast),  // ufix1
                                                    .Push(out_fifo_push),  // ufix1
                                                    .Pop(out_fifo_ack),  // ufix1
                                                    .Out(AXI4_Master_Wr_WLAST)  // ufix1
                                                    );

  assign AXI4_Master_Wr_WVALID = wvalid_internal;

  assign AXI4_Master_Wr_BREADY = const_1_1;

  assign user_wr_ready =  ~ wr_fifo_afull;



  assign user_wr_complete = wr_complete_internal;

  assign aw_transfer = AXI4_Master_Wr_AWREADY & AXI4_Master_Wr_AWVALID_1;



  assign const_0_9 = 9'b000000000;



  assign const_1_9 = 9'b000000001;



  assign aw_transfer_len = (aw_transfer == 1'b0 ? const_0_9 :
              const_1_9);



  assign w_transfer = const_1_1 & AXI4_Master_Wr_BVALID;



  assign w_transfer_len = (w_transfer == 1'b0 ? const_0_9 :
              const_1_9);



  assign accum_awlen_adder_1 = {23'b0, aw_transfer_len};
  assign accum_aw_len = accum_awlen_adder_1 + accum_value;



  assign accum_wlen_adder_1 = {23'b0, w_transfer_len};
  assign accum_w_len = accum_aw_len - accum_wlen_adder_1;



  always @(posedge clk or posedge reset_x)
    begin : reg_accum_process
      if (reset_x == 1'b1) begin
        accum_value <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          accum_value <= accum_w_len;
        end
      end
    end



  assign in_burst_axi4_master_wr = accum_value > 32'sb00000000000000000000000000000000;



  assign AXI4_Master_Wr_AWID = AXI4_Master_Wr_AWID_1;

  assign AXI4_Master_Wr_AWADDR = AXI4_Master_Wr_AWADDR_1;

  assign AXI4_Master_Wr_AWLEN = AXI4_Master_Wr_AWLEN_1;

  assign AXI4_Master_Wr_AWVALID = AXI4_Master_Wr_AWVALID_1;

endmodule  // SYSTEM_ip_axi4_master_wr

