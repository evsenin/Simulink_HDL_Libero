// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\tb_SYSTEM\SYSTEM_ip_src_AD9545CC.v
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// Copyright (c) 2023, Alexei Evsenin, evsenin@gmail.com
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: SYSTEM_ip_src_AD9545CC
// Source Path: tb_SYSTEM/SYSTEM/AD9545CC
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module SYSTEM_ip_src_AD9545CC
          (clk,
           reset_x,
           AXI_SPI_Wr,
           AXI_CONTROL,
           MISO,
           M20,
           nCS,
           SCK,
           MOSI,
           nRESET,
           M43,
           LOCKED,
           CLK_SELECT,
           AXI_SPI_Rd,
           AXI_STATUS);


  input   clk;
  input   reset_x;
  input   [31:0] AXI_SPI_Wr;  // uint32
  input   [31:0] AXI_CONTROL;  // uint32
  input   MISO;
  input   [2:0] M20;  // ufix3
  output  nCS;  // ufix1
  output  SCK;  // ufix1
  output  MOSI;  // ufix1
  output  nRESET;
  output  [1:0] M43;  // ufix2
  output  LOCKED;
  output  CLK_SELECT;
  output  [31:0] AXI_SPI_Rd;  // uint32
  output  [31:0] AXI_STATUS;  // uint32


  wire [23:0] Constant2_out1 [0:121];  // ufix24 [122]
  wire [23:0] Data_Type_Conversion_out1;  // ufix24
  wire dtc1;  // ufix1
  wire pulse;
  wire pulse_out2deadOutdeadOut;
  wire Data_Type_Conversion4_out1;  // ufix1
  reg  REG_MISO_out1;  // ufix1
  wire HDL_FIFO_out2;
  wire NOT_out1;
  wire stop;
  reg  Delay2_out1;
  wire push;
  reg  Delay3_out1;
  reg  Delay5_out1;
  wire [23:0] data_out;  // ufix24
  wire resetn;
  wire init_done;
  reg [23:0] Delay1_out1;  // ufix24
  wire [23:0] HDL_FIFO_out1;  // ufix24
  wire [23:0] din;  // ufix24
  wire [23:0] data_out_1;  // ufix24
  wire [1:0] Constant_out1;  // ufix2
  reg [2:0] REG_M20_IN_out1;  // ufix3
  wire dtc1_1;  // ufix1_E1
  wire Extract_Bits2_out1;  // ufix1
  wire Extract_Bits3_out1;  // ufix1
  wire AND3_out1;
  wire AND2_out1;
  wire dtc1_2;  // ufix1_E2
  wire Extract_Bits5_out1;  // ufix1
  wire OR_out1;
  wire dtc1_3;  // ufix1_E1
  wire Extract_Bits_out1;  // ufix1
  wire [1:0] Bit_Concat_out1;  // ufix2
  wire [1:0] Switch_out1;  // ufix2
  reg [1:0] REG_M43_OUT_out1;  // ufix2
  wire dtc1_4;  // ufix1
  wire AND_out1;
  reg  REG_LOCKED_out1;
  wire dtc1_5;  // ufix1_E4
  wire Extract_Bits7_out1;  // ufix1
  reg  REG_CLK_SELECT_out1;  // ufix1
  wire AND1_out1;
  wire [31:0] Data_Type_Conversion3_out1;  // uint32
  wire [31:0] Data_Type_Conversion1_out1;  // uint32

  // Предполагается, что 
  // M2 - REFB active
  // M4 - DIST0C mute
  // Тогда, как только залочились по REFB
  // отключаем OUT0C
  // и противоположная сторона останется
  // на своем клоке
  // M6 = nCS
  // M5 = MISO
  // Manual:
  // https://www.analog.com/media/en/technical-documentation/data-sheets/ad9543.pdf
  // 
  // Registers:
  // https://www.analog.com/media/en/technical-documentation/user-guides/ad9543-register-map-reference-manual-ug-1167.pdf
  // any change of DATA_IN value 
  // start SPI load of new value
  // see init INF state


  assign Constant2_out1[0] = 24'b000000000000000010111101;
  assign Constant2_out1[1] = 24'b000000010000000010000000;
  assign Constant2_out1[2] = 24'b000000010000000100000010;
  assign Constant2_out1[3] = 24'b000000010000001010001000;
  assign Constant2_out1[4] = 24'b000000010000001110100110;
  assign Constant2_out1[5] = 24'b000000010000010010101010;
  assign Constant2_out1[6] = 24'b000000010000010100100010;
  assign Constant2_out1[7] = 24'b000000010000011001010110;
  assign Constant2_out1[8] = 24'b000000100000000000011000;
  assign Constant2_out1[9] = 24'b000000100000000100001001;
  assign Constant2_out1[10] = 24'b000000100000001101110100;
  assign Constant2_out1[11] = 24'b000000100000010000111011;
  assign Constant2_out1[12] = 24'b000000100000010110100100;
  assign Constant2_out1[13] = 24'b000000100000011000001011;
  assign Constant2_out1[14] = 24'b000000100000011100110010;
  assign Constant2_out1[15] = 24'b000001000000000001111100;
  assign Constant2_out1[16] = 24'b000001000000010110010000;
  assign Constant2_out1[17] = 24'b000001000000011000101111;
  assign Constant2_out1[18] = 24'b000001000000011101010000;
  assign Constant2_out1[19] = 24'b000001000000100000001001;
  assign Constant2_out1[20] = 24'b000001000010000001111100;
  assign Constant2_out1[21] = 24'b000001000010010110010000;
  assign Constant2_out1[22] = 24'b000001000010011000101111;
  assign Constant2_out1[23] = 24'b000001000010011101010000;
  assign Constant2_out1[24] = 24'b000001000010100000001001;
  assign Constant2_out1[25] = 24'b000001000100000001110000;
  assign Constant2_out1[26] = 24'b000001000100000100000010;
  assign Constant2_out1[27] = 24'b000001000100010101010000;
  assign Constant2_out1[28] = 24'b000001000100011011010110;
  assign Constant2_out1[29] = 24'b000001000100011111011100;
  assign Constant2_out1[30] = 24'b000001000100100000000001;
  assign Constant2_out1[31] = 24'b000001000110000001110000;
  assign Constant2_out1[32] = 24'b000001000110000100000010;
  assign Constant2_out1[33] = 24'b000001000110010101010000;
  assign Constant2_out1[34] = 24'b000001000110011011010110;
  assign Constant2_out1[35] = 24'b000001000110011111011100;
  assign Constant2_out1[36] = 24'b000001000110100000000001;
  assign Constant2_out1[37] = 24'b000100000000000001010101;
  assign Constant2_out1[38] = 24'b000100000000000101010101;
  assign Constant2_out1[39] = 24'b000100000000001001010101;
  assign Constant2_out1[40] = 24'b000100000000001101010101;
  assign Constant2_out1[41] = 24'b000100000000010001010101;
  assign Constant2_out1[42] = 24'b000100000000010100100001;
  assign Constant2_out1[43] = 24'b000100001000000100001000;
  assign Constant2_out1[44] = 24'b000100001101011100000101;
  assign Constant2_out1[45] = 24'b000100001101100000000101;
  assign Constant2_out1[46] = 24'b000100001101100100001100;
  assign Constant2_out1[47] = 24'b000100001101101100000101;
  assign Constant2_out1[48] = 24'b000100010000000000001010;
  assign Constant2_out1[49] = 24'b000100010001001000001010;
  assign Constant2_out1[50] = 24'b000100010010010000001010;
  assign Constant2_out1[51] = 24'b000100100000000000000001;
  assign Constant2_out1[52] = 24'b000100100000000100000010;
  assign Constant2_out1[53] = 24'b000100100000001000000010;
  assign Constant2_out1[54] = 24'b000100100000001100000001;
  assign Constant2_out1[55] = 24'b000100100000010010000000;
  assign Constant2_out1[56] = 24'b000100100000010111110000;
  assign Constant2_out1[57] = 24'b000100100000011011111010;
  assign Constant2_out1[58] = 24'b000100100000011100000010;
  assign Constant2_out1[59] = 24'b000100100000100001110000;
  assign Constant2_out1[60] = 24'b000100100000100100000010;
  assign Constant2_out1[61] = 24'b000100100000110000011001;
  assign Constant2_out1[62] = 24'b000100100000110100000110;
  assign Constant2_out1[63] = 24'b000100100001000000000001;
  assign Constant2_out1[64] = 24'b000100100001001100000010;
  assign Constant2_out1[65] = 24'b000100100010000000010001;
  assign Constant2_out1[66] = 24'b000100100010000100001000;
  assign Constant2_out1[67] = 24'b000100100010001000000010;
  assign Constant2_out1[68] = 24'b000100100010001100000001;
  assign Constant2_out1[69] = 24'b000100100010010010000000;
  assign Constant2_out1[70] = 24'b000100100010010111110000;
  assign Constant2_out1[71] = 24'b000100100010011011111010;
  assign Constant2_out1[72] = 24'b000100100010011100000010;
  assign Constant2_out1[73] = 24'b000100100010100011000011;
  assign Constant2_out1[74] = 24'b000100100010100100001001;
  assign Constant2_out1[75] = 24'b000100100010110001101001;
  assign Constant2_out1[76] = 24'b000100100010110100011000;
  assign Constant2_out1[77] = 24'b000100100100000000000100;
  assign Constant2_out1[78] = 24'b000100100100000100000011;
  assign Constant2_out1[79] = 24'b000100100100001000000010;
  assign Constant2_out1[80] = 24'b000100100100001100000001;
  assign Constant2_out1[81] = 24'b000100100100010010000000;
  assign Constant2_out1[82] = 24'b000100100100010111110000;
  assign Constant2_out1[83] = 24'b000100100100011011111010;
  assign Constant2_out1[84] = 24'b000100100100011100000010;
  assign Constant2_out1[85] = 24'b000100100100100001110000;
  assign Constant2_out1[86] = 24'b000100100100100100000010;
  assign Constant2_out1[87] = 24'b000100100100110000011001;
  assign Constant2_out1[88] = 24'b000100100100110100000110;
  assign Constant2_out1[89] = 24'b000100100101000000000001;
  assign Constant2_out1[90] = 24'b000100100101001100000010;
  assign Constant2_out1[91] = 24'b000101000000000010101011;
  assign Constant2_out1[92] = 24'b000101000000000110101010;
  assign Constant2_out1[93] = 24'b000101000000001010101010;
  assign Constant2_out1[94] = 24'b000101000000001110101010;
  assign Constant2_out1[95] = 24'b000101000000010010101010;
  assign Constant2_out1[96] = 24'b000101000000010100100010;
  assign Constant2_out1[97] = 24'b000101001000000100001010;
  assign Constant2_out1[98] = 24'b000101001101011100000101;
  assign Constant2_out1[99] = 24'b000101001101100000000101;
  assign Constant2_out1[100] = 24'b000101001101101100000101;
  assign Constant2_out1[101] = 24'b000101010000000000001101;
  assign Constant2_out1[102] = 24'b000101010001001000001101;
  assign Constant2_out1[103] = 24'b000101100000000000000001;
  assign Constant2_out1[104] = 24'b000101100000000100001001;
  assign Constant2_out1[105] = 24'b000101100000001100000001;
  assign Constant2_out1[106] = 24'b000101100000010010000000;
  assign Constant2_out1[107] = 24'b000101100000010111110000;
  assign Constant2_out1[108] = 24'b000101100000011011111010;
  assign Constant2_out1[109] = 24'b000101100000011100000010;
  assign Constant2_out1[110] = 24'b000101100000100011000011;
  assign Constant2_out1[111] = 24'b000101100000100100001001;
  assign Constant2_out1[112] = 24'b000101100000110001100011;
  assign Constant2_out1[113] = 24'b000101100000110100011001;
  assign Constant2_out1[114] = 24'b001000000000000100000011;
  assign Constant2_out1[115] = 24'b001000010000010100000100;
  assign Constant2_out1[116] = 24'b001010000000010111010000;
  assign Constant2_out1[117] = 24'b001010000000011011000010;
  assign Constant2_out1[118] = 24'b001010000000101010000000;
  assign Constant2_out1[119] = 24'b001010000100010111010000;
  assign Constant2_out1[120] = 24'b001010000100011011000010;
  assign Constant2_out1[121] = 24'b001010000100101010000000;


  assign Data_Type_Conversion_out1 = AXI_SPI_Wr[23:0];


  assign dtc1 = AXI_CONTROL[0];


  SYSTEM_ip_src_pulse u_pulse (.clk(clk),
                               .reset_x(reset_x),
                               .valid(dtc1),  // ufix1
                               .rise(pulse),
                               .fall(pulse_out2deadOutdeadOut)
                               );
  assign Data_Type_Conversion4_out1 = MISO;


  always @(posedge clk or posedge reset_x)
    begin : REG_MISO_process
      if (reset_x == 1'b1) begin
        REG_MISO_out1 <= 1'b0;
      end
      else begin
        REG_MISO_out1 <= Data_Type_Conversion4_out1;
      end
    end


  assign NOT_out1 =  ~ HDL_FIFO_out2;


  always @(posedge clk or posedge reset_x)
    begin : Delay2_process
      if (reset_x == 1'b1) begin
        Delay2_out1 <= 1'b0;
      end
      else begin
        Delay2_out1 <= stop;
      end
    end


  always @(posedge clk or posedge reset_x)
    begin : Delay3_process
      if (reset_x == 1'b1) begin
        Delay3_out1 <= 1'b0;
      end
      else begin
        Delay3_out1 <= push;
      end
    end


  always @(posedge clk or posedge reset_x)
    begin : Delay5_process
      if (reset_x == 1'b1) begin
        Delay5_out1 <= 1'b0;
      end
      else begin
        Delay5_out1 <= HDL_FIFO_out2;
      end
    end


  SYSTEM_ip_src_init_block u_init (.clk(clk),
                                   .reset_x(reset_x),
                                   .data_init_0(Constant2_out1[0]),  // ufix24
                                   .data_init_1(Constant2_out1[1]),  // ufix24
                                   .data_init_2(Constant2_out1[2]),  // ufix24
                                   .data_init_3(Constant2_out1[3]),  // ufix24
                                   .data_init_4(Constant2_out1[4]),  // ufix24
                                   .data_init_5(Constant2_out1[5]),  // ufix24
                                   .data_init_6(Constant2_out1[6]),  // ufix24
                                   .data_init_7(Constant2_out1[7]),  // ufix24
                                   .data_init_8(Constant2_out1[8]),  // ufix24
                                   .data_init_9(Constant2_out1[9]),  // ufix24
                                   .data_init_10(Constant2_out1[10]),  // ufix24
                                   .data_init_11(Constant2_out1[11]),  // ufix24
                                   .data_init_12(Constant2_out1[12]),  // ufix24
                                   .data_init_13(Constant2_out1[13]),  // ufix24
                                   .data_init_14(Constant2_out1[14]),  // ufix24
                                   .data_init_15(Constant2_out1[15]),  // ufix24
                                   .data_init_16(Constant2_out1[16]),  // ufix24
                                   .data_init_17(Constant2_out1[17]),  // ufix24
                                   .data_init_18(Constant2_out1[18]),  // ufix24
                                   .data_init_19(Constant2_out1[19]),  // ufix24
                                   .data_init_20(Constant2_out1[20]),  // ufix24
                                   .data_init_21(Constant2_out1[21]),  // ufix24
                                   .data_init_22(Constant2_out1[22]),  // ufix24
                                   .data_init_23(Constant2_out1[23]),  // ufix24
                                   .data_init_24(Constant2_out1[24]),  // ufix24
                                   .data_init_25(Constant2_out1[25]),  // ufix24
                                   .data_init_26(Constant2_out1[26]),  // ufix24
                                   .data_init_27(Constant2_out1[27]),  // ufix24
                                   .data_init_28(Constant2_out1[28]),  // ufix24
                                   .data_init_29(Constant2_out1[29]),  // ufix24
                                   .data_init_30(Constant2_out1[30]),  // ufix24
                                   .data_init_31(Constant2_out1[31]),  // ufix24
                                   .data_init_32(Constant2_out1[32]),  // ufix24
                                   .data_init_33(Constant2_out1[33]),  // ufix24
                                   .data_init_34(Constant2_out1[34]),  // ufix24
                                   .data_init_35(Constant2_out1[35]),  // ufix24
                                   .data_init_36(Constant2_out1[36]),  // ufix24
                                   .data_init_37(Constant2_out1[37]),  // ufix24
                                   .data_init_38(Constant2_out1[38]),  // ufix24
                                   .data_init_39(Constant2_out1[39]),  // ufix24
                                   .data_init_40(Constant2_out1[40]),  // ufix24
                                   .data_init_41(Constant2_out1[41]),  // ufix24
                                   .data_init_42(Constant2_out1[42]),  // ufix24
                                   .data_init_43(Constant2_out1[43]),  // ufix24
                                   .data_init_44(Constant2_out1[44]),  // ufix24
                                   .data_init_45(Constant2_out1[45]),  // ufix24
                                   .data_init_46(Constant2_out1[46]),  // ufix24
                                   .data_init_47(Constant2_out1[47]),  // ufix24
                                   .data_init_48(Constant2_out1[48]),  // ufix24
                                   .data_init_49(Constant2_out1[49]),  // ufix24
                                   .data_init_50(Constant2_out1[50]),  // ufix24
                                   .data_init_51(Constant2_out1[51]),  // ufix24
                                   .data_init_52(Constant2_out1[52]),  // ufix24
                                   .data_init_53(Constant2_out1[53]),  // ufix24
                                   .data_init_54(Constant2_out1[54]),  // ufix24
                                   .data_init_55(Constant2_out1[55]),  // ufix24
                                   .data_init_56(Constant2_out1[56]),  // ufix24
                                   .data_init_57(Constant2_out1[57]),  // ufix24
                                   .data_init_58(Constant2_out1[58]),  // ufix24
                                   .data_init_59(Constant2_out1[59]),  // ufix24
                                   .data_init_60(Constant2_out1[60]),  // ufix24
                                   .data_init_61(Constant2_out1[61]),  // ufix24
                                   .data_init_62(Constant2_out1[62]),  // ufix24
                                   .data_init_63(Constant2_out1[63]),  // ufix24
                                   .data_init_64(Constant2_out1[64]),  // ufix24
                                   .data_init_65(Constant2_out1[65]),  // ufix24
                                   .data_init_66(Constant2_out1[66]),  // ufix24
                                   .data_init_67(Constant2_out1[67]),  // ufix24
                                   .data_init_68(Constant2_out1[68]),  // ufix24
                                   .data_init_69(Constant2_out1[69]),  // ufix24
                                   .data_init_70(Constant2_out1[70]),  // ufix24
                                   .data_init_71(Constant2_out1[71]),  // ufix24
                                   .data_init_72(Constant2_out1[72]),  // ufix24
                                   .data_init_73(Constant2_out1[73]),  // ufix24
                                   .data_init_74(Constant2_out1[74]),  // ufix24
                                   .data_init_75(Constant2_out1[75]),  // ufix24
                                   .data_init_76(Constant2_out1[76]),  // ufix24
                                   .data_init_77(Constant2_out1[77]),  // ufix24
                                   .data_init_78(Constant2_out1[78]),  // ufix24
                                   .data_init_79(Constant2_out1[79]),  // ufix24
                                   .data_init_80(Constant2_out1[80]),  // ufix24
                                   .data_init_81(Constant2_out1[81]),  // ufix24
                                   .data_init_82(Constant2_out1[82]),  // ufix24
                                   .data_init_83(Constant2_out1[83]),  // ufix24
                                   .data_init_84(Constant2_out1[84]),  // ufix24
                                   .data_init_85(Constant2_out1[85]),  // ufix24
                                   .data_init_86(Constant2_out1[86]),  // ufix24
                                   .data_init_87(Constant2_out1[87]),  // ufix24
                                   .data_init_88(Constant2_out1[88]),  // ufix24
                                   .data_init_89(Constant2_out1[89]),  // ufix24
                                   .data_init_90(Constant2_out1[90]),  // ufix24
                                   .data_init_91(Constant2_out1[91]),  // ufix24
                                   .data_init_92(Constant2_out1[92]),  // ufix24
                                   .data_init_93(Constant2_out1[93]),  // ufix24
                                   .data_init_94(Constant2_out1[94]),  // ufix24
                                   .data_init_95(Constant2_out1[95]),  // ufix24
                                   .data_init_96(Constant2_out1[96]),  // ufix24
                                   .data_init_97(Constant2_out1[97]),  // ufix24
                                   .data_init_98(Constant2_out1[98]),  // ufix24
                                   .data_init_99(Constant2_out1[99]),  // ufix24
                                   .data_init_100(Constant2_out1[100]),  // ufix24
                                   .data_init_101(Constant2_out1[101]),  // ufix24
                                   .data_init_102(Constant2_out1[102]),  // ufix24
                                   .data_init_103(Constant2_out1[103]),  // ufix24
                                   .data_init_104(Constant2_out1[104]),  // ufix24
                                   .data_init_105(Constant2_out1[105]),  // ufix24
                                   .data_init_106(Constant2_out1[106]),  // ufix24
                                   .data_init_107(Constant2_out1[107]),  // ufix24
                                   .data_init_108(Constant2_out1[108]),  // ufix24
                                   .data_init_109(Constant2_out1[109]),  // ufix24
                                   .data_init_110(Constant2_out1[110]),  // ufix24
                                   .data_init_111(Constant2_out1[111]),  // ufix24
                                   .data_init_112(Constant2_out1[112]),  // ufix24
                                   .data_init_113(Constant2_out1[113]),  // ufix24
                                   .data_init_114(Constant2_out1[114]),  // ufix24
                                   .data_init_115(Constant2_out1[115]),  // ufix24
                                   .data_init_116(Constant2_out1[116]),  // ufix24
                                   .data_init_117(Constant2_out1[117]),  // ufix24
                                   .data_init_118(Constant2_out1[118]),  // ufix24
                                   .data_init_119(Constant2_out1[119]),  // ufix24
                                   .data_init_120(Constant2_out1[120]),  // ufix24
                                   .data_init_121(Constant2_out1[121]),  // ufix24
                                   .data_in(Data_Type_Conversion_out1),  // ufix24
                                   .fifo_empty(Delay5_out1),
                                   .rst(pulse),
                                   .push(push),
                                   .data_out(data_out),  // ufix24
                                   .resetn(resetn),
                                   .init_done(init_done)
                                   );
  always @(posedge clk or posedge reset_x)
    begin : Delay1_process
      if (reset_x == 1'b1) begin
        Delay1_out1 <= 24'b000000000000000000000000;
      end
      else begin
        Delay1_out1 <= data_out;
      end
    end


  SYSTEM_ip_src_HDL_FIFO_block u_HDL_FIFO (.clk(clk),
                                           .reset_x(reset_x),
                                           .In(Delay1_out1),  // ufix24
                                           .Push(Delay3_out1),
                                           .Pop(Delay2_out1),
                                           .Out(HDL_FIFO_out1),  // ufix24
                                           .Empty(HDL_FIFO_out2)
                                           );
  assign din = HDL_FIFO_out1;
  SYSTEM_ip_src_spi_sm_block u_spi_sm (.clk(clk),
                                       .reset_x(reset_x),
                                       .data_in(din),  // ufix24
                                       .MISO(REG_MISO_out1),  // ufix1
                                       .start(NOT_out1),
                                       .nCS(nCS),  // ufix1
                                       .MOSI(MOSI),  // ufix1
                                       .data_out(data_out_1),  // ufix24
                                       .SCK(SCK),  // ufix1
                                       .stop(stop)
                                       );
  assign nRESET = resetn;

  assign Constant_out1 = 2'b00;


  always @(posedge clk or posedge reset_x)
    begin : REG_M20_IN_process
      if (reset_x == 1'b1) begin
        REG_M20_IN_out1 <= 3'b000;
      end
      else begin
        REG_M20_IN_out1 <= M20;
      end
    end


  assign dtc1_1 = REG_M20_IN_out1[1];


  assign Extract_Bits2_out1 = dtc1_1;



  assign Extract_Bits3_out1 = REG_M20_IN_out1[2];


  assign AND3_out1 = Extract_Bits2_out1 & Extract_Bits3_out1;


  assign AND2_out1 = init_done & AND3_out1;


  assign dtc1_2 = AXI_CONTROL[2];


  assign Extract_Bits5_out1 = dtc1_2;



  assign OR_out1 = AND2_out1 | Extract_Bits5_out1;


  assign dtc1_3 = AXI_CONTROL[1];


  assign Extract_Bits_out1 = dtc1_3;



  assign Bit_Concat_out1 = {OR_out1, Extract_Bits_out1};


  assign Switch_out1 = (init_done == 1'b0 ? Constant_out1 :
              Bit_Concat_out1);


  always @(posedge clk or posedge reset_x)
    begin : REG_M43_OUT_process
      if (reset_x == 1'b1) begin
        REG_M43_OUT_out1 <= 2'b00;
      end
      else begin
        REG_M43_OUT_out1 <= Switch_out1;
      end
    end


  assign M43 = REG_M43_OUT_out1;

  assign dtc1_4 = REG_M20_IN_out1[0];


  assign AND_out1 = dtc1_4 & init_done;


  always @(posedge clk or posedge reset_x)
    begin : REG_LOCKED_process
      if (reset_x == 1'b1) begin
        REG_LOCKED_out1 <= 1'b0;
      end
      else begin
        REG_LOCKED_out1 <= AND_out1;
      end
    end


  assign LOCKED = REG_LOCKED_out1;

  assign dtc1_5 = AXI_CONTROL[4];


  assign Extract_Bits7_out1 = dtc1_5;



  always @(posedge clk or posedge reset_x)
    begin : REG_CLK_SELECT_process
      if (reset_x == 1'b1) begin
        REG_CLK_SELECT_out1 <= 1'b0;
      end
      else begin
        REG_CLK_SELECT_out1 <= Extract_Bits7_out1;
      end
    end


  assign AND1_out1 = REG_LOCKED_out1 & REG_CLK_SELECT_out1;


  assign CLK_SELECT = AND1_out1;

  assign Data_Type_Conversion3_out1 = {8'b0, data_out_1};


  assign AXI_SPI_Rd = Data_Type_Conversion3_out1;

  assign Data_Type_Conversion1_out1 = {29'b0, REG_M20_IN_out1};


  assign AXI_STATUS = Data_Type_Conversion1_out1;

endmodule  // SYSTEM_ip_src_AD9545CC

