// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\tb_SYSTEM\SYSTEM_ip.v
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: -1
// Target subsystem base rate: -1
// 
// Copyright (c) 2023, Alexei Evsenin, evsenin@gmail.com
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: SYSTEM_ip
// Source Path: SYSTEM_ip
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module SYSTEM_ip
          (IPCORE_CLK,
           IPCORE_RESETN,
           TVS_valid,
           TVS_chan,
           TVS_data,
           SYS_STATUS,
           PWR_STATUS,
           PLL_STATUS,
           XAVIER_SPI2_SCK,
           XAVIER_SPI2_nCS0,
           XAVIER_SPI2_MOSI,
           XAVIER_I2S_CLK,
           XAVIER_I2S_FS,
           XAVIER_I2S_SDIN,
           XAVIER_I2S_SDOUT,
           CC_MISO,
           CC_M20,
           XAVIER_SPI1_nCS0,
           XAVIER_SPI1_SCK,
           XAVIER_SPI1_MOSI,
           MonADC_nERROR,
           MonADC_MISO,
           AXI4_Master_Rd_RDATA,
           AXI4_Master_Rd_RLAST,
           AXI4_Master_Rd_RVALID,
           AXI4_Master_Rd_RID,
           AXI4_Master_Rd_RRESP,
           AXI4_Master_Rd_ARREADY,
           AXI4_Master_Wr_AWREADY,
           AXI4_Master_Wr_WREADY,
           AXI4_Master_Wr_BID,
           AXI4_Master_Wr_BRESP,
           AXI4_Master_Wr_BVALID,
           AXI4_ACLK,
           AXI4_ARESETN,
           AXI4_AWID,
           AXI4_AWADDR,
           AXI4_AWLEN,
           AXI4_AWSIZE,
           AXI4_AWBURST,
           AXI4_AWLOCK,
           AXI4_AWCACHE,
           AXI4_AWPROT,
           AXI4_AWVALID,
           AXI4_WDATA,
           AXI4_WSTRB,
           AXI4_WLAST,
           AXI4_WVALID,
           AXI4_BREADY,
           AXI4_ARID,
           AXI4_ARADDR,
           AXI4_ARLEN,
           AXI4_ARSIZE,
           AXI4_ARBURST,
           AXI4_ARLOCK,
           AXI4_ARCACHE,
           AXI4_ARPROT,
           AXI4_ARVALID,
           AXI4_RREADY,
           DDR_RESET,
           PWR_CONTOL,
           XAVIER_SPI2_MISO,
           PPS_OUT,
           CC_nCS,
           CC_nRESET,
           CC_MOSI,
           CC_SCK,
           CC_M43,
           CC_LOCKED,
           CC_CLK_SEL,
           SysReset_N,
           XAVIER_SPI1_MISO,
           MonADC_nCS,
           MonADC_SCK,
           MonADC_MOSI,
           XAVIER_RESET_N,
           XAVIER_SPI1_ENB_MISO,
           AXI4_Master_Rd_ARID,
           AXI4_Master_Rd_ARADDR,
           AXI4_Master_Rd_ARLEN,
           AXI4_Master_Rd_ARSIZE,
           AXI4_Master_Rd_ARBURST,
           AXI4_Master_Rd_ARLOCK,
           AXI4_Master_Rd_ARCACHE,
           AXI4_Master_Rd_ARPROT,
           AXI4_Master_Rd_ARVALID,
           AXI4_Master_Rd_RREADY,
           AXI4_Master_Wr_AWID,
           AXI4_Master_Wr_AWADDR,
           AXI4_Master_Wr_AWLEN,
           AXI4_Master_Wr_AWSIZE,
           AXI4_Master_Wr_AWBURST,
           AXI4_Master_Wr_AWLOCK,
           AXI4_Master_Wr_AWCACHE,
           AXI4_Master_Wr_AWPROT,
           AXI4_Master_Wr_AWVALID,
           AXI4_Master_Wr_WDATA,
           AXI4_Master_Wr_WSTRB,
           AXI4_Master_Wr_WLAST,
           AXI4_Master_Wr_WVALID,
           AXI4_Master_Wr_BREADY,
           AXI4_AWREADY,
           AXI4_WREADY,
           AXI4_BID,
           AXI4_BRESP,
           AXI4_BVALID,
           AXI4_ARREADY,
           AXI4_RID,
           AXI4_RDATA,
           AXI4_RRESP,
           AXI4_RLAST,
           AXI4_RVALID);


  input   IPCORE_CLK;  // ufix1
  input   IPCORE_RESETN;  // ufix1
  input   TVS_valid;  // ufix1
  input   [1:0] TVS_chan;  // ufix2
  input   [15:0] TVS_data;  // ufix16
  input   [7:0] SYS_STATUS;  // ufix8
  input   [7:0] PWR_STATUS;  // ufix8
  input   [7:0] PLL_STATUS;  // ufix8
  input   XAVIER_SPI2_SCK;  // ufix1
  input   XAVIER_SPI2_nCS0;  // ufix1
  input   XAVIER_SPI2_MOSI;  // ufix1
  input   XAVIER_I2S_CLK;  // ufix1
  input   XAVIER_I2S_FS;  // ufix1
  input   XAVIER_I2S_SDIN;  // ufix1
  input   XAVIER_I2S_SDOUT;  // ufix1
  input   CC_MISO;  // ufix1
  input   [2:0] CC_M20;  // ufix3
  input   XAVIER_SPI1_nCS0;  // ufix1
  input   XAVIER_SPI1_SCK;  // ufix1
  input   XAVIER_SPI1_MOSI;  // ufix1
  input   MonADC_nERROR;  // ufix1
  input   MonADC_MISO;  // ufix1
  input   [31:0] AXI4_Master_Rd_RDATA;  // ufix32
  input   AXI4_Master_Rd_RLAST;  // ufix1
  input   AXI4_Master_Rd_RVALID;  // ufix1
  input   AXI4_Master_Rd_RID;  // ufix1
  input   [1:0] AXI4_Master_Rd_RRESP;  // ufix2
  input   AXI4_Master_Rd_ARREADY;  // ufix1
  input   AXI4_Master_Wr_AWREADY;  // ufix1
  input   AXI4_Master_Wr_WREADY;  // ufix1
  input   AXI4_Master_Wr_BID;  // ufix1
  input   [1:0] AXI4_Master_Wr_BRESP;  // ufix2
  input   AXI4_Master_Wr_BVALID;  // ufix1
  input   AXI4_ACLK;  // ufix1
  input   AXI4_ARESETN;  // ufix1
  input   [15:0] AXI4_AWID;  // ufix16
  input   [15:0] AXI4_AWADDR;  // ufix16
  input   [7:0] AXI4_AWLEN;  // ufix8
  input   [2:0] AXI4_AWSIZE;  // ufix3
  input   [1:0] AXI4_AWBURST;  // ufix2
  input   AXI4_AWLOCK;  // ufix1
  input   [3:0] AXI4_AWCACHE;  // ufix4
  input   [2:0] AXI4_AWPROT;  // ufix3
  input   AXI4_AWVALID;  // ufix1
  input   [31:0] AXI4_WDATA;  // ufix32
  input   [3:0] AXI4_WSTRB;  // ufix4
  input   AXI4_WLAST;  // ufix1
  input   AXI4_WVALID;  // ufix1
  input   AXI4_BREADY;  // ufix1
  input   [15:0] AXI4_ARID;  // ufix16
  input   [15:0] AXI4_ARADDR;  // ufix16
  input   [7:0] AXI4_ARLEN;  // ufix8
  input   [2:0] AXI4_ARSIZE;  // ufix3
  input   [1:0] AXI4_ARBURST;  // ufix2
  input   AXI4_ARLOCK;  // ufix1
  input   [3:0] AXI4_ARCACHE;  // ufix4
  input   [2:0] AXI4_ARPROT;  // ufix3
  input   AXI4_ARVALID;  // ufix1
  input   AXI4_RREADY;  // ufix1
  output  DDR_RESET;  // ufix1
  output  [7:0] PWR_CONTOL;  // ufix8
  output  XAVIER_SPI2_MISO;  // ufix1
  output  PPS_OUT;  // ufix1
  output  CC_nCS;  // ufix1
  output  CC_nRESET;  // ufix1
  output  CC_MOSI;  // ufix1
  output  CC_SCK;  // ufix1
  output  [1:0] CC_M43;  // ufix2
  output  CC_LOCKED;  // ufix1
  output  CC_CLK_SEL;  // ufix1
  output  SysReset_N;  // ufix1
  output  XAVIER_SPI1_MISO;  // ufix1
  output  MonADC_nCS;  // ufix1
  output  MonADC_SCK;  // ufix1
  output  MonADC_MOSI;  // ufix1
  output  XAVIER_RESET_N;  // ufix1
  output  XAVIER_SPI1_ENB_MISO;  // ufix1
  output  AXI4_Master_Rd_ARID;  // ufix1
  output  [31:0] AXI4_Master_Rd_ARADDR;  // ufix32
  output  [7:0] AXI4_Master_Rd_ARLEN;  // ufix8
  output  [2:0] AXI4_Master_Rd_ARSIZE;  // ufix3
  output  [1:0] AXI4_Master_Rd_ARBURST;  // ufix2
  output  AXI4_Master_Rd_ARLOCK;  // ufix1
  output  [3:0] AXI4_Master_Rd_ARCACHE;  // ufix4
  output  [2:0] AXI4_Master_Rd_ARPROT;  // ufix3
  output  AXI4_Master_Rd_ARVALID;  // ufix1
  output  AXI4_Master_Rd_RREADY;  // ufix1
  output  AXI4_Master_Wr_AWID;  // ufix1
  output  [31:0] AXI4_Master_Wr_AWADDR;  // ufix32
  output  [7:0] AXI4_Master_Wr_AWLEN;  // ufix8
  output  [2:0] AXI4_Master_Wr_AWSIZE;  // ufix3
  output  [1:0] AXI4_Master_Wr_AWBURST;  // ufix2
  output  AXI4_Master_Wr_AWLOCK;  // ufix1
  output  [3:0] AXI4_Master_Wr_AWCACHE;  // ufix4
  output  [2:0] AXI4_Master_Wr_AWPROT;  // ufix3
  output  AXI4_Master_Wr_AWVALID;  // ufix1
  output  [31:0] AXI4_Master_Wr_WDATA;  // ufix32
  output  [3:0] AXI4_Master_Wr_WSTRB;  // ufix4
  output  AXI4_Master_Wr_WLAST;  // ufix1
  output  AXI4_Master_Wr_WVALID;  // ufix1
  output  AXI4_Master_Wr_BREADY;  // ufix1
  output  AXI4_AWREADY;  // ufix1
  output  AXI4_WREADY;  // ufix1
  output  [15:0] AXI4_BID;  // ufix16
  output  [1:0] AXI4_BRESP;  // ufix2
  output  AXI4_BVALID;  // ufix1
  output  AXI4_ARREADY;  // ufix1
  output  [15:0] AXI4_RID;  // ufix16
  output  [31:0] AXI4_RDATA;  // ufix32
  output  [1:0] AXI4_RRESP;  // ufix2
  output  AXI4_RLAST;  // ufix1
  output  AXI4_RVALID;  // ufix1


  wire reset_x;
  wire signed [15:0] TVS_data_sig;  // sfix16
  wire [31:0] ip_timestamp;  // ufix32
  wire reset_cm;  // ufix1
  wire [31:0] axi_wr_data_sig;  // ufix32
  wire [31:0] axi_wr_m2s_wr_addr_sig;  // ufix32
  wire [7:0] axi_wr_m2s_wr_len_sig;  // ufix8
  wire axi_wr_m2s_wr_valid_sig;  // ufix1
  wire [31:0] write_AXI4_Master_Wr_base_address;  // ufix32
  wire soft_reset_pending;  // ufix1
  wire top_user_wr_ready;  // ufix1
  wire top_user_wr_complete;  // ufix1
  wire in_burst_axi4_master_wr;  // ufix1
  wire reset_internal;  // ufix1
  wire reset_before_sync;  // ufix1
  wire [31:0] axi_rd_m2s_rd_addr_sig;  // ufix32
  wire [7:0] axi_rd_m2s_rd_len_sig;  // ufix8
  wire axi_rd_m2s_rd_avalid_sig;  // ufix1
  wire [31:0] write_AXI4_Master_Rd_base_address;  // ufix32
  wire [31:0] top_user_data;  // ufix32
  wire top_user_rd_aready;  // ufix1
  wire top_user_rd_dvalid;  // ufix1
  wire in_burst_axi4_master_rd;  // ufix1
  wire signed [31:0] AXI_TVS_1000mV_sig;  // sfix32
  wire signed [31:0] AXI_TVS_1800mV_sig;  // sfix32
  wire signed [31:0] AXI_TVS_2500mV_sig;  // sfix32
  wire signed [31:0] AXI_TVS_tempr_sig;  // sfix32
  wire [7:0] AXI_SYS_STATUS_sig;  // ufix8
  wire [7:0] AXI_PWR_STATUS_sig;  // ufix8
  wire [7:0] AXI_PLL_STATUS_sig;  // ufix8
  wire [3:0] AXI_I2S_STATUS_sig;  // ufix4
  wire [31:0] AXI_CC_SPI_Rd_sig;  // ufix32
  wire [31:0] AXI_CC_STATUS_sig;  // ufix32
  wire [31:0] AXI_MonADC_STATUS_sig;  // ufix32
  wire [31:0] AXI_MonADC_SPI_Rd_sig;  // ufix32
  wire signed [31:0] AXI_Mon_12V_sig;  // sfix32
  wire signed [31:0] AXI_Mon_1V8_sig;  // sfix32
  wire signed [31:0] AXI_Mon_3V3_sig;  // sfix32
  wire signed [31:0] AXI_Mon_CurrentIn_sig;  // sfix32
  wire signed [31:0] AXI_Mon_VoltageIn_sig;  // sfix32
  wire [31:0] write_AXI_CC_SPI_Wr;  // ufix32
  wire [31:0] write_AXI_CC_CONTROL;  // ufix32
  wire [31:0] write_AXI_PWR_CONTROL;  // ufix32
  wire [31:0] write_AXI_DDR_CONTROL;  // ufix32
  wire [31:0] write_AXI_MonADC_SPI_Wr;  // ufix32
  wire [31:0] write_AXI_MonADC_CONTROL;  // ufix32
  wire [31:0] write_AXI_XAVIER_CONTROL;  // ufix32
  wire DDR_RESET_sig;  // ufix1
  wire [7:0] PWR_CONTOL_sig;  // ufix8
  wire XAVIER_SPI2_MISO_sig;  // ufix1
  wire PPS_OUT_sig;  // ufix1
  wire CC_nCS_sig;  // ufix1
  wire CC_nRESET_sig;  // ufix1
  wire CC_MOSI_sig;  // ufix1
  wire CC_SCK_sig;  // ufix1
  wire [1:0] CC_M43_sig;  // ufix2
  wire CC_LOCKED_sig;  // ufix1
  wire CC_CLK_SEL_sig;  // ufix1
  wire SysReset_N_sig;  // ufix1
  wire XAVIER_SPI1_MISO_sig;  // ufix1
  wire MonADC_nCS_sig;  // ufix1
  wire MonADC_SCK_sig;  // ufix1
  wire MonADC_MOSI_sig;  // ufix1
  wire XAVIER_RESET_N_sig;  // ufix1
  wire XAVIER_SPI1_ENB_MISO_sig;  // ufix1


  assign TVS_data_sig = TVS_data;



  assign ip_timestamp = 32'b10001001001001111001000100001100;



  assign reset_cm =  ~ IPCORE_RESETN;



  SYSTEM_ip_axi4_master_wr u_SYSTEM_ip_axi4_master_wr_inst (.clk(IPCORE_CLK),  // ufix1
                                                            .reset_x(reset_x),
                                                            .AXI4_Master_Wr_AWREADY(AXI4_Master_Wr_AWREADY),  // ufix1
                                                            .AXI4_Master_Wr_WREADY(AXI4_Master_Wr_WREADY),  // ufix1
                                                            .AXI4_Master_Wr_BID(AXI4_Master_Wr_BID),  // ufix1
                                                            .AXI4_Master_Wr_BRESP(AXI4_Master_Wr_BRESP),  // ufix2
                                                            .AXI4_Master_Wr_BVALID(AXI4_Master_Wr_BVALID),  // ufix1
                                                            .user_data(axi_wr_data_sig),  // ufix32
                                                            .user_wr_addr(axi_wr_m2s_wr_addr_sig),  // ufix32
                                                            .user_wr_len(axi_wr_m2s_wr_len_sig),  // ufix8
                                                            .user_wr_valid(axi_wr_m2s_wr_valid_sig),  // ufix1
                                                            .write_AXI4_Master_Wr_base_address(write_AXI4_Master_Wr_base_address),  // ufix32
                                                            .soft_reset_pending(soft_reset_pending),  // ufix1
                                                            .AXI4_Master_Wr_AWID(AXI4_Master_Wr_AWID),  // ufix1
                                                            .AXI4_Master_Wr_AWADDR(AXI4_Master_Wr_AWADDR),  // ufix32
                                                            .AXI4_Master_Wr_AWLEN(AXI4_Master_Wr_AWLEN),  // ufix8
                                                            .AXI4_Master_Wr_AWSIZE(AXI4_Master_Wr_AWSIZE),  // ufix3
                                                            .AXI4_Master_Wr_AWBURST(AXI4_Master_Wr_AWBURST),  // ufix2
                                                            .AXI4_Master_Wr_AWLOCK(AXI4_Master_Wr_AWLOCK),  // ufix1
                                                            .AXI4_Master_Wr_AWCACHE(AXI4_Master_Wr_AWCACHE),  // ufix4
                                                            .AXI4_Master_Wr_AWPROT(AXI4_Master_Wr_AWPROT),  // ufix3
                                                            .AXI4_Master_Wr_AWVALID(AXI4_Master_Wr_AWVALID),  // ufix1
                                                            .AXI4_Master_Wr_WDATA(AXI4_Master_Wr_WDATA),  // ufix32
                                                            .AXI4_Master_Wr_WSTRB(AXI4_Master_Wr_WSTRB),  // ufix4
                                                            .AXI4_Master_Wr_WLAST(AXI4_Master_Wr_WLAST),  // ufix1
                                                            .AXI4_Master_Wr_WVALID(AXI4_Master_Wr_WVALID),  // ufix1
                                                            .AXI4_Master_Wr_BREADY(AXI4_Master_Wr_BREADY),  // ufix1
                                                            .user_wr_ready(top_user_wr_ready),  // ufix1
                                                            .user_wr_complete(top_user_wr_complete),  // ufix1
                                                            .in_burst_axi4_master_wr(in_burst_axi4_master_wr)  // ufix1
                                                            );

  assign reset_before_sync = reset_cm | reset_internal;



  SYSTEM_ip_reset_sync u_SYSTEM_ip_reset_sync_inst (.clk(IPCORE_CLK),  // ufix1
                                                    .reset_in(reset_before_sync),  // ufix1
                                                    .reset_out(reset_x)
                                                    );

  SYSTEM_ip_axi4_master_rd u_SYSTEM_ip_axi4_master_rd_inst (.clk(IPCORE_CLK),  // ufix1
                                                            .reset_x(reset_x),
                                                            .AXI4_Master_Rd_RDATA(AXI4_Master_Rd_RDATA),  // ufix32
                                                            .AXI4_Master_Rd_RLAST(AXI4_Master_Rd_RLAST),  // ufix1
                                                            .AXI4_Master_Rd_RVALID(AXI4_Master_Rd_RVALID),  // ufix1
                                                            .AXI4_Master_Rd_RID(AXI4_Master_Rd_RID),  // ufix1
                                                            .AXI4_Master_Rd_RRESP(AXI4_Master_Rd_RRESP),  // ufix2
                                                            .AXI4_Master_Rd_ARREADY(AXI4_Master_Rd_ARREADY),  // ufix1
                                                            .user_rd_addr(axi_rd_m2s_rd_addr_sig),  // ufix32
                                                            .user_rd_len(axi_rd_m2s_rd_len_sig),  // ufix8
                                                            .user_rd_avalid(axi_rd_m2s_rd_avalid_sig),  // ufix1
                                                            .write_AXI4_Master_Rd_base_address(write_AXI4_Master_Rd_base_address),  // ufix32
                                                            .soft_reset_pending(soft_reset_pending),  // ufix1
                                                            .AXI4_Master_Rd_ARID(AXI4_Master_Rd_ARID),  // ufix1
                                                            .AXI4_Master_Rd_ARADDR(AXI4_Master_Rd_ARADDR),  // ufix32
                                                            .AXI4_Master_Rd_ARLEN(AXI4_Master_Rd_ARLEN),  // ufix8
                                                            .AXI4_Master_Rd_ARSIZE(AXI4_Master_Rd_ARSIZE),  // ufix3
                                                            .AXI4_Master_Rd_ARBURST(AXI4_Master_Rd_ARBURST),  // ufix2
                                                            .AXI4_Master_Rd_ARLOCK(AXI4_Master_Rd_ARLOCK),  // ufix1
                                                            .AXI4_Master_Rd_ARCACHE(AXI4_Master_Rd_ARCACHE),  // ufix4
                                                            .AXI4_Master_Rd_ARPROT(AXI4_Master_Rd_ARPROT),  // ufix3
                                                            .AXI4_Master_Rd_ARVALID(AXI4_Master_Rd_ARVALID),  // ufix1
                                                            .AXI4_Master_Rd_RREADY(AXI4_Master_Rd_RREADY),  // ufix1
                                                            .user_data(top_user_data),  // ufix32
                                                            .user_rd_aready(top_user_rd_aready),  // ufix1
                                                            .user_rd_dvalid(top_user_rd_dvalid),  // ufix1
                                                            .in_burst_axi4_master_rd(in_burst_axi4_master_rd)  // ufix1
                                                            );

  SYSTEM_ip_axi4 u_SYSTEM_ip_axi4_inst (.reset_x(reset_x),
                                        .AXI4_ACLK(AXI4_ACLK),  // ufix1
                                        .AXI4_ARESETN(AXI4_ARESETN),  // ufix1
                                        .AXI4_AWID(AXI4_AWID),  // ufix16
                                        .AXI4_AWADDR(AXI4_AWADDR),  // ufix16
                                        .AXI4_AWLEN(AXI4_AWLEN),  // ufix8
                                        .AXI4_AWSIZE(AXI4_AWSIZE),  // ufix3
                                        .AXI4_AWBURST(AXI4_AWBURST),  // ufix2
                                        .AXI4_AWLOCK(AXI4_AWLOCK),  // ufix1
                                        .AXI4_AWCACHE(AXI4_AWCACHE),  // ufix4
                                        .AXI4_AWPROT(AXI4_AWPROT),  // ufix3
                                        .AXI4_AWVALID(AXI4_AWVALID),  // ufix1
                                        .AXI4_WDATA(AXI4_WDATA),  // ufix32
                                        .AXI4_WSTRB(AXI4_WSTRB),  // ufix4
                                        .AXI4_WLAST(AXI4_WLAST),  // ufix1
                                        .AXI4_WVALID(AXI4_WVALID),  // ufix1
                                        .AXI4_BREADY(AXI4_BREADY),  // ufix1
                                        .AXI4_ARID(AXI4_ARID),  // ufix16
                                        .AXI4_ARADDR(AXI4_ARADDR),  // ufix16
                                        .AXI4_ARLEN(AXI4_ARLEN),  // ufix8
                                        .AXI4_ARSIZE(AXI4_ARSIZE),  // ufix3
                                        .AXI4_ARBURST(AXI4_ARBURST),  // ufix2
                                        .AXI4_ARLOCK(AXI4_ARLOCK),  // ufix1
                                        .AXI4_ARCACHE(AXI4_ARCACHE),  // ufix4
                                        .AXI4_ARPROT(AXI4_ARPROT),  // ufix3
                                        .AXI4_ARVALID(AXI4_ARVALID),  // ufix1
                                        .AXI4_RREADY(AXI4_RREADY),  // ufix1
                                        .read_ip_timestamp(ip_timestamp),  // ufix32
                                        .read_AXI_TVS_1000mV(AXI_TVS_1000mV_sig),  // sfix32
                                        .read_AXI_TVS_1800mV(AXI_TVS_1800mV_sig),  // sfix32
                                        .read_AXI_TVS_2500mV(AXI_TVS_2500mV_sig),  // sfix32
                                        .read_AXI_TVS_tempr(AXI_TVS_tempr_sig),  // sfix32
                                        .read_AXI_SYS_STATUS(AXI_SYS_STATUS_sig),  // ufix8
                                        .read_AXI_PWR_STATUS(AXI_PWR_STATUS_sig),  // ufix8
                                        .read_AXI_PLL_STATUS(AXI_PLL_STATUS_sig),  // ufix8
                                        .read_AXI_I2S_STATUS(AXI_I2S_STATUS_sig),  // ufix4
                                        .read_AXI_CC_SPI_Rd(AXI_CC_SPI_Rd_sig),  // ufix32
                                        .read_AXI_CC_STATUS(AXI_CC_STATUS_sig),  // ufix32
                                        .read_AXI_MonADC_STATUS(AXI_MonADC_STATUS_sig),  // ufix32
                                        .read_AXI_MonADC_SPI_Rd(AXI_MonADC_SPI_Rd_sig),  // ufix32
                                        .read_AXI_Mon_12V(AXI_Mon_12V_sig),  // sfix32
                                        .read_AXI_Mon_1V8(AXI_Mon_1V8_sig),  // sfix32
                                        .read_AXI_Mon_3V3(AXI_Mon_3V3_sig),  // sfix32
                                        .read_AXI_Mon_CurrentIn(AXI_Mon_CurrentIn_sig),  // sfix32
                                        .read_AXI_Mon_VoltageIn(AXI_Mon_VoltageIn_sig),  // sfix32
                                        .in_burst_axi4_master_rd(in_burst_axi4_master_rd),  // ufix1
                                        .in_burst_axi4_master_wr(in_burst_axi4_master_wr),  // ufix1
                                        .AXI4_AWREADY(AXI4_AWREADY),  // ufix1
                                        .AXI4_WREADY(AXI4_WREADY),  // ufix1
                                        .AXI4_BID(AXI4_BID),  // ufix16
                                        .AXI4_BRESP(AXI4_BRESP),  // ufix2
                                        .AXI4_BVALID(AXI4_BVALID),  // ufix1
                                        .AXI4_ARREADY(AXI4_ARREADY),  // ufix1
                                        .AXI4_RID(AXI4_RID),  // ufix16
                                        .AXI4_RDATA(AXI4_RDATA),  // ufix32
                                        .AXI4_RRESP(AXI4_RRESP),  // ufix2
                                        .AXI4_RLAST(AXI4_RLAST),  // ufix1
                                        .AXI4_RVALID(AXI4_RVALID),  // ufix1
                                        .write_AXI4_Master_Rd_base_address(write_AXI4_Master_Rd_base_address),  // ufix32
                                        .write_AXI4_Master_Wr_base_address(write_AXI4_Master_Wr_base_address),  // ufix32
                                        .write_AXI_CC_SPI_Wr(write_AXI_CC_SPI_Wr),  // ufix32
                                        .write_AXI_CC_CONTROL(write_AXI_CC_CONTROL),  // ufix32
                                        .write_AXI_PWR_CONTROL(write_AXI_PWR_CONTROL),  // ufix32
                                        .write_AXI_DDR_CONTROL(write_AXI_DDR_CONTROL),  // ufix32
                                        .write_AXI_MonADC_SPI_Wr(write_AXI_MonADC_SPI_Wr),  // ufix32
                                        .write_AXI_MonADC_CONTROL(write_AXI_MonADC_CONTROL),  // ufix32
                                        .write_AXI_XAVIER_CONTROL(write_AXI_XAVIER_CONTROL),  // ufix32
                                        .soft_reset_pending(soft_reset_pending),  // ufix1
                                        .reset_internal(reset_internal)  // ufix1
                                        );

  SYSTEM_ip_dut u_SYSTEM_ip_dut_inst (.clk(IPCORE_CLK),  // ufix1
                                      .reset_x(reset_x),
                                      .TVS_valid(TVS_valid),  // ufix1
                                      .TVS_chan(TVS_chan),  // ufix2
                                      .TVS_data(TVS_data_sig),  // sfix16
                                      .SYS_STATUS(SYS_STATUS),  // ufix8
                                      .PWR_STATUS(PWR_STATUS),  // ufix8
                                      .PLL_STATUS(PLL_STATUS),  // ufix8
                                      .XAVIER_SPI2_SCK(XAVIER_SPI2_SCK),  // ufix1
                                      .XAVIER_SPI2_nCS0(XAVIER_SPI2_nCS0),  // ufix1
                                      .XAVIER_SPI2_MOSI(XAVIER_SPI2_MOSI),  // ufix1
                                      .XAVIER_I2S_CLK(XAVIER_I2S_CLK),  // ufix1
                                      .XAVIER_I2S_FS(XAVIER_I2S_FS),  // ufix1
                                      .XAVIER_I2S_SDIN(XAVIER_I2S_SDIN),  // ufix1
                                      .XAVIER_I2S_SDOUT(XAVIER_I2S_SDOUT),  // ufix1
                                      .AXI_CC_SPI_Wr(write_AXI_CC_SPI_Wr),  // ufix32
                                      .AXI_CC_CONTROL(write_AXI_CC_CONTROL),  // ufix32
                                      .CC_MISO(CC_MISO),  // ufix1
                                      .CC_M20(CC_M20),  // ufix3
                                      .axi_wr_s2m_wr_ready(top_user_wr_ready),  // ufix1
                                      .axi_wr_s2m_wr_complete(top_user_wr_complete),  // ufix1
                                      .axi_rd_s2m_rd_aready(top_user_rd_aready),  // ufix1
                                      .axi_rd_s2m_rd_dvalid(top_user_rd_dvalid),  // ufix1
                                      .axi_rd_data(top_user_data),  // ufix32
                                      .XAVIER_SPI1_nCS0(XAVIER_SPI1_nCS0),  // ufix1
                                      .XAVIER_SPI1_SCK(XAVIER_SPI1_SCK),  // ufix1
                                      .XAVIER_SPI1_MOSI(XAVIER_SPI1_MOSI),  // ufix1
                                      .MonADC_nERROR(MonADC_nERROR),  // ufix1
                                      .MonADC_MISO(MonADC_MISO),  // ufix1
                                      .AXI_XAVIER_CONTROL(write_AXI_XAVIER_CONTROL),  // ufix32
                                      .AXI_PWR_CONTROL(write_AXI_PWR_CONTROL),  // ufix32
                                      .AXI_DDR_CONTROL(write_AXI_DDR_CONTROL),  // ufix32
                                      .AXI_MonADC_SPI_Wr(write_AXI_MonADC_SPI_Wr),  // ufix32
                                      .AXI_MonADC_CONTROL(write_AXI_MonADC_CONTROL),  // ufix32
                                      .AXI_TVS_1000mV(AXI_TVS_1000mV_sig),  // sfix32
                                      .AXI_TVS_1800mV(AXI_TVS_1800mV_sig),  // sfix32
                                      .AXI_TVS_2500mV(AXI_TVS_2500mV_sig),  // sfix32
                                      .AXI_TVS_tempr(AXI_TVS_tempr_sig),  // sfix32
                                      .AXI_SYS_STATUS(AXI_SYS_STATUS_sig),  // ufix8
                                      .DDR_RESET(DDR_RESET_sig),  // ufix1
                                      .PWR_CONTOL(PWR_CONTOL_sig),  // ufix8
                                      .AXI_PWR_STATUS(AXI_PWR_STATUS_sig),  // ufix8
                                      .XAVIER_SPI2_MISO(XAVIER_SPI2_MISO_sig),  // ufix1
                                      .AXI_PLL_STATUS(AXI_PLL_STATUS_sig),  // ufix8
                                      .PPS_OUT(PPS_OUT_sig),  // ufix1
                                      .AXI_I2S_STATUS(AXI_I2S_STATUS_sig),  // ufix4
                                      .CC_nCS(CC_nCS_sig),  // ufix1
                                      .CC_nRESET(CC_nRESET_sig),  // ufix1
                                      .CC_MOSI(CC_MOSI_sig),  // ufix1
                                      .CC_SCK(CC_SCK_sig),  // ufix1
                                      .CC_M43(CC_M43_sig),  // ufix2
                                      .AXI_CC_SPI_Rd(AXI_CC_SPI_Rd_sig),  // ufix32
                                      .AXI_CC_STATUS(AXI_CC_STATUS_sig),  // ufix32
                                      .CC_LOCKED(CC_LOCKED_sig),  // ufix1
                                      .CC_CLK_SEL(CC_CLK_SEL_sig),  // ufix1
                                      .SysReset_N(SysReset_N_sig),  // ufix1
                                      .axi_wr_m2s_wr_addr(axi_wr_m2s_wr_addr_sig),  // ufix32
                                      .axi_wr_m2s_wr_len(axi_wr_m2s_wr_len_sig),  // ufix8
                                      .axi_wr_m2s_wr_valid(axi_wr_m2s_wr_valid_sig),  // ufix1
                                      .axi_wr_data(axi_wr_data_sig),  // ufix32
                                      .axi_rd_m2s_rd_addr(axi_rd_m2s_rd_addr_sig),  // ufix32
                                      .axi_rd_m2s_rd_len(axi_rd_m2s_rd_len_sig),  // ufix8
                                      .axi_rd_m2s_rd_avalid(axi_rd_m2s_rd_avalid_sig),  // ufix1
                                      .XAVIER_SPI1_MISO(XAVIER_SPI1_MISO_sig),  // ufix1
                                      .AXI_MonADC_STATUS(AXI_MonADC_STATUS_sig),  // ufix32
                                      .AXI_MonADC_SPI_Rd(AXI_MonADC_SPI_Rd_sig),  // ufix32
                                      .AXI_Mon_1V8(AXI_Mon_1V8_sig),  // sfix32
                                      .AXI_Mon_3V3(AXI_Mon_3V3_sig),  // sfix32
                                      .AXI_Mon_CurrentIn(AXI_Mon_CurrentIn_sig),  // sfix32
                                      .AXI_Mon_VoltageIn(AXI_Mon_VoltageIn_sig),  // sfix32
                                      .AXI_Mon_12V(AXI_Mon_12V_sig),  // sfix32
                                      .MonADC_nCS(MonADC_nCS_sig),  // ufix1
                                      .MonADC_SCK(MonADC_SCK_sig),  // ufix1
                                      .MonADC_MOSI(MonADC_MOSI_sig),  // ufix1
                                      .XAVIER_RESET_N(XAVIER_RESET_N_sig),  // ufix1
                                      .XAVIER_SPI1_ENB_MISO(XAVIER_SPI1_ENB_MISO_sig)  // ufix1
                                      );

  assign DDR_RESET = DDR_RESET_sig;

  assign PWR_CONTOL = PWR_CONTOL_sig;

  assign XAVIER_SPI2_MISO = XAVIER_SPI2_MISO_sig;

  assign PPS_OUT = PPS_OUT_sig;

  assign CC_nCS = CC_nCS_sig;

  assign CC_nRESET = CC_nRESET_sig;

  assign CC_MOSI = CC_MOSI_sig;

  assign CC_SCK = CC_SCK_sig;

  assign CC_M43 = CC_M43_sig;

  assign CC_LOCKED = CC_LOCKED_sig;

  assign CC_CLK_SEL = CC_CLK_SEL_sig;

  assign SysReset_N = SysReset_N_sig;

  assign XAVIER_SPI1_MISO = XAVIER_SPI1_MISO_sig;

  assign MonADC_nCS = MonADC_nCS_sig;

  assign MonADC_SCK = MonADC_SCK_sig;

  assign MonADC_MOSI = MonADC_MOSI_sig;

  assign XAVIER_RESET_N = XAVIER_RESET_N_sig;

  assign XAVIER_SPI1_ENB_MISO = XAVIER_SPI1_ENB_MISO_sig;

endmodule  // SYSTEM_ip

