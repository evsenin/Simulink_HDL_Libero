// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\tb_SYSTEM\SYSTEM_ip_reset_hold.v
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// Copyright (c) 2023, Alexei Evsenin, evsenin@gmail.com
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: SYSTEM_ip_reset_hold
// Source Path: SYSTEM_ip/SYSTEM_ip_axi4/SYSTEM_ip_axi4_module/SYSTEM_ip_reset_hold
// Hierarchy Level: 3
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module SYSTEM_ip_reset_hold
          (clk,
           reset_x,
           reset_in,
           in_burst,
           reset_out,
           reset_pending);


  input   clk;
  input   reset_x;
  input   reset_in;  // ufix1
  input   in_burst;  // ufix1
  output  reset_out;  // ufix1
  output  reset_pending;  // ufix1


  wire enb;
  wire const_1;  // ufix1
  reg [7:0] reset_hold_module_hstate;  // uint8
  reg  reset_hold_module_reset_out_reg;
  reg  reset_hold_module_reset_pending_reg;
  reg [7:0] reset_hold_module_hstate_next;  // uint8
  reg  reset_hold_module_reset_out_reg_next;
  reg  reset_hold_module_reset_pending_reg_next;
  reg  reset_out_1;  // ufix1
  reg  reset_pending_1;  // ufix1
  reg  reset_hold_module_reset_in;
  reg  reset_hold_module_in_burst;


  assign const_1 = 1'b1;



  assign enb = const_1;

  always @(posedge clk or posedge reset_x)
    begin : reset_hold_module_process
      if (reset_x == 1'b1) begin
        reset_hold_module_hstate <= 8'd0;
        reset_hold_module_reset_out_reg <= 1'b0;
        reset_hold_module_reset_pending_reg <= 1'b0;
      end
      else begin
        if (enb) begin
          reset_hold_module_hstate <= reset_hold_module_hstate_next;
          reset_hold_module_reset_out_reg <= reset_hold_module_reset_out_reg_next;
          reset_hold_module_reset_pending_reg <= reset_hold_module_reset_pending_reg_next;
        end
      end
    end

  always @(in_burst, reset_hold_module_hstate, reset_hold_module_reset_out_reg,
       reset_hold_module_reset_pending_reg, reset_in) begin
    reset_hold_module_hstate_next = reset_hold_module_hstate;
    reset_hold_module_reset_out_reg_next = reset_hold_module_reset_out_reg;
    reset_hold_module_reset_pending_reg_next = reset_hold_module_reset_pending_reg;
    reset_hold_module_reset_in = reset_in != 1'b0;
    reset_hold_module_in_burst = in_burst != 1'b0;
    case ( reset_hold_module_hstate)
      8'd0 :
        begin
          if (reset_hold_module_in_burst) begin
            reset_hold_module_reset_out_reg_next = 1'b0;
            if (reset_hold_module_reset_in) begin
              reset_hold_module_reset_pending_reg_next = 1'b1;
              reset_hold_module_hstate_next = 8'd2;
            end
            else begin
              reset_hold_module_reset_pending_reg_next = 1'b0;
              reset_hold_module_hstate_next = 8'd1;
            end
          end
          else begin
            reset_hold_module_reset_out_reg_next = reset_hold_module_reset_in;
            reset_hold_module_reset_pending_reg_next = 1'b0;
          end
        end
      8'd1 :
        begin
          if ( ! reset_hold_module_in_burst) begin
            reset_hold_module_reset_out_reg_next = reset_hold_module_reset_in;
            reset_hold_module_reset_pending_reg_next = 1'b0;
            reset_hold_module_hstate_next = 8'd0;
          end
          else if (reset_hold_module_reset_in) begin
            reset_hold_module_reset_out_reg_next = 1'b0;
            reset_hold_module_reset_pending_reg_next = 1'b1;
            reset_hold_module_hstate_next = 8'd2;
          end
          else begin
            reset_hold_module_reset_out_reg_next = 1'b0;
            reset_hold_module_reset_pending_reg_next = 1'b0;
          end
        end
      8'd2 :
        begin
          reset_hold_module_reset_out_reg_next = 1'b0;
          reset_hold_module_reset_pending_reg_next = 1'b1;
          if ( ! reset_hold_module_in_burst) begin
            reset_hold_module_hstate_next = 8'd3;
          end
        end
      8'd3 :
        begin
          reset_hold_module_reset_out_reg_next = 1'b1;
          reset_hold_module_reset_pending_reg_next = 1'b1;
          reset_hold_module_hstate_next = 8'd0;
        end
      default :
        begin
          reset_hold_module_hstate_next = 8'd0;
        end
    endcase
    reset_out_1 = reset_hold_module_reset_out_reg;
    reset_pending_1 = reset_hold_module_reset_pending_reg;
  end



  assign reset_out = reset_out_1;

  assign reset_pending = reset_pending_1;

endmodule  // SYSTEM_ip_reset_hold

