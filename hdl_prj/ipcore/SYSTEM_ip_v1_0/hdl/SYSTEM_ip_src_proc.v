// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\tb_SYSTEM\SYSTEM_ip_src_proc.v
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// Copyright (c) 2023, Alexei Evsenin, evsenin@gmail.com
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: SYSTEM_ip_src_proc
// Source Path: tb_SYSTEM/SYSTEM/AD7173-8-ADC_0/proc
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module SYSTEM_ip_src_proc
          (clk,
           reset_x,
           data,
           valid,
           chan,
           idx,
           coeff,
           value);


  input   clk;
  input   reset_x;
  input   [23:0] data;  // ufix24
  input   valid;
  input   [7:0] chan;  // uint8
  input   [7:0] idx;  // uint8
  input   [15:0] coeff;  // ufix16_En16
  output  signed [31:0] value;  // sfix32_En31


  wire Equal_relop1;
  wire AND_out1;
  reg  Unit_Delay_out1;
  wire Compare_To_Constant_out1;
  wire switch_compare_1;
  wire signed [31:0] Data_Type_Conversion_out1;  // int32
  wire signed [31:0] Bias_const_val_1;  // int32
  wire signed [32:0] Bias_add_temp;  // sfix33
  wire signed [32:0] Bias_1;  // sfix33
  wire signed [32:0] Bias_2;  // sfix33
  wire signed [31:0] Bias_out1;  // int32
  wire signed [63:0] Gain_cast;  // sfix64_En53
  wire signed [31:0] Gain_out1;  // sfix32_En31
  reg signed [31:0] MagnResReg_out1;  // sfix32_En31
  wire signed [32:0] Subtract_sub_cast;  // sfix33_En31
  wire signed [32:0] Subtract_sub_cast_1;  // sfix33_En31
  wire signed [32:0] Subtract_sub_temp;  // sfix33_En31
  wire signed [31:0] Subtract_out1;  // sfix32_En31
  wire signed [16:0] Product_cast;  // sfix17_En16
  wire signed [48:0] Product_mul_temp;  // sfix49_En47
  wire signed [47:0] Product_cast_1;  // sfix48_En47
  wire signed [31:0] Product_out1;  // sfix32_En31
  wire signed [32:0] Add_add_cast;  // sfix33_En31
  wire signed [32:0] Add_add_cast_1;  // sfix33_En31
  wire signed [32:0] Add_add_temp;  // sfix33_En31
  wire signed [31:0] Add_out1;  // sfix32_En31
  wire signed [31:0] Switch_out1;  // sfix32_En31

  // offset binary coded input.
  // Result in range [-1 : 1]
  // Чтобы можно было в случае плохих таймингов 
  // исключить пути из проверки для MagnResReg


  assign Equal_relop1 = idx == chan;


  assign AND_out1 = Equal_relop1 & valid;


  always @(posedge clk or posedge reset_x)
    begin : Unit_Delay_process
      if (reset_x == 1'b1) begin
        Unit_Delay_out1 <= 1'b0;
      end
      else begin
        Unit_Delay_out1 <= AND_out1;
      end
    end


  SYSTEM_ip_src_Compare_To_Constant u_Compare_To_Constant (.u(coeff),  // ufix16_En16
                                                           .y(Compare_To_Constant_out1)
                                                           );
  assign switch_compare_1 = Compare_To_Constant_out1 > 1'b0;



  assign Data_Type_Conversion_out1 = {8'b0, data};


  assign Bias_const_val_1 = 32'sb11111111100000000000000000000000;



  assign Bias_1 = {Data_Type_Conversion_out1[31], Data_Type_Conversion_out1};
  assign Bias_2 = {Bias_const_val_1[31], Bias_const_val_1};
  assign Bias_add_temp = Bias_1 + Bias_2;
  assign Bias_out1 = ((Bias_add_temp[32] == 1'b0) && (Bias_add_temp[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((Bias_add_temp[32] == 1'b1) && (Bias_add_temp[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(Bias_add_temp[31:0])));


  assign Gain_cast = {{2{Bias_out1[31]}}, {Bias_out1, 30'b000000000000000000000000000000}};
  assign Gain_out1 = ((Gain_cast[63] == 1'b0) && (Gain_cast[62:53] != 10'b0000000000) ? 32'sb01111111111111111111111111111111 :
              ((Gain_cast[63] == 1'b1) && (Gain_cast[62:53] != 10'b1111111111) ? 32'sb10000000000000000000000000000000 :
              $signed(Gain_cast[53:22])));


  assign Subtract_sub_cast = {Gain_out1[31], Gain_out1};
  assign Subtract_sub_cast_1 = {MagnResReg_out1[31], MagnResReg_out1};
  assign Subtract_sub_temp = Subtract_sub_cast - Subtract_sub_cast_1;
  assign Subtract_out1 = ((Subtract_sub_temp[32] == 1'b0) && (Subtract_sub_temp[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((Subtract_sub_temp[32] == 1'b1) && (Subtract_sub_temp[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(Subtract_sub_temp[31:0])));


  assign Product_cast = {1'b0, coeff};
  assign Product_mul_temp = Subtract_out1 * Product_cast;
  assign Product_cast_1 = Product_mul_temp[47:0];
  assign Product_out1 = Product_cast_1[47:16];


  assign Add_add_cast = {Product_out1[31], Product_out1};
  assign Add_add_cast_1 = {MagnResReg_out1[31], MagnResReg_out1};
  assign Add_add_temp = Add_add_cast + Add_add_cast_1;
  assign Add_out1 = ((Add_add_temp[32] == 1'b0) && (Add_add_temp[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((Add_add_temp[32] == 1'b1) && (Add_add_temp[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(Add_add_temp[31:0])));


  assign Switch_out1 = (switch_compare_1 == 1'b0 ? Add_out1 :
              Gain_out1);


  always @(posedge clk or posedge reset_x)
    begin : MagnResReg_process
      if (reset_x == 1'b1) begin
        MagnResReg_out1 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (Unit_Delay_out1) begin
          MagnResReg_out1 <= Switch_out1;
        end
      end
    end


  assign value = MagnResReg_out1;

endmodule  // SYSTEM_ip_src_proc

