// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\tb_SYSTEM\SYSTEM_ip_axi4_master_rd.v
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// Copyright (c) 2023, Alexei Evsenin, evsenin@gmail.com
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: SYSTEM_ip_axi4_master_rd
// Source Path: SYSTEM_ip/SYSTEM_ip_axi4_master_rd
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module SYSTEM_ip_axi4_master_rd
          (clk,
           reset_x,
           AXI4_Master_Rd_RDATA,
           AXI4_Master_Rd_RLAST,
           AXI4_Master_Rd_RVALID,
           AXI4_Master_Rd_RID,
           AXI4_Master_Rd_RRESP,
           AXI4_Master_Rd_ARREADY,
           user_rd_addr,
           user_rd_len,
           user_rd_avalid,
           write_AXI4_Master_Rd_base_address,
           soft_reset_pending,
           AXI4_Master_Rd_ARID,
           AXI4_Master_Rd_ARADDR,
           AXI4_Master_Rd_ARLEN,
           AXI4_Master_Rd_ARSIZE,
           AXI4_Master_Rd_ARBURST,
           AXI4_Master_Rd_ARLOCK,
           AXI4_Master_Rd_ARCACHE,
           AXI4_Master_Rd_ARPROT,
           AXI4_Master_Rd_ARVALID,
           AXI4_Master_Rd_RREADY,
           user_data,
           user_rd_aready,
           user_rd_dvalid,
           in_burst_axi4_master_rd);


  input   clk;
  input   reset_x;
  input   [31:0] AXI4_Master_Rd_RDATA;  // ufix32
  input   AXI4_Master_Rd_RLAST;  // ufix1
  input   AXI4_Master_Rd_RVALID;  // ufix1
  input   AXI4_Master_Rd_RID;  // ufix1
  input   [1:0] AXI4_Master_Rd_RRESP;  // ufix2
  input   AXI4_Master_Rd_ARREADY;  // ufix1
  input   [31:0] user_rd_addr;  // ufix32
  input   [7:0] user_rd_len;  // ufix8
  input   user_rd_avalid;  // ufix1
  input   [31:0] write_AXI4_Master_Rd_base_address;  // ufix32
  input   soft_reset_pending;  // ufix1
  output  AXI4_Master_Rd_ARID;  // ufix1
  output  [31:0] AXI4_Master_Rd_ARADDR;  // ufix32
  output  [7:0] AXI4_Master_Rd_ARLEN;  // ufix8
  output  [2:0] AXI4_Master_Rd_ARSIZE;  // ufix3
  output  [1:0] AXI4_Master_Rd_ARBURST;  // ufix2
  output  AXI4_Master_Rd_ARLOCK;  // ufix1
  output  [3:0] AXI4_Master_Rd_ARCACHE;  // ufix4
  output  [2:0] AXI4_Master_Rd_ARPROT;  // ufix3
  output  AXI4_Master_Rd_ARVALID;  // ufix1
  output  AXI4_Master_Rd_RREADY;  // ufix1
  output  [31:0] user_data;  // ufix32
  output  user_rd_aready;  // ufix1
  output  user_rd_dvalid;  // ufix1
  output  in_burst_axi4_master_rd;  // ufix1


  wire enb;
  wire const_len_dec;  // ufix1
  wire signed [8:0] len_decrement_sub_temp;  // sfix9
  wire signed [8:0] len_decrement_1;  // sfix9
  wire [7:0] len_decrement_2;  // ufix8
  wire signed [8:0] len_decrement_3;  // sfix9
  wire [7:0] len_val;  // ufix8
  wire const_1_1;  // ufix1
  wire [31:0] full_addr;  // ufix32
  wire const_IDWidth;  // ufix1
  reg  rd_fifo_ack;  // ufix1
  wire [31:0] rd_fifo_addr;  // ufix32
  wire rd_fifo_empty;  // ufix1
  wire rd_fifo_afull;  // ufix1
  wire rd_valid_internal;  // ufix1
  wire [7:0] rd_fifo_len;  // ufix8
  reg [7:0] axi4_master_rd_rd_state;  // uint8
  reg [7:0] axi4_master_rd_rd_len;  // ufix8
  reg [31:0] axi4_master_rd_rd_addr;  // ufix32
  reg  axi4_master_rd_last_burst;
  reg  axi4_master_rd_rd_arid;  // ufix1
  reg  axi4_master_rd_arvalid_reg;
  reg [31:0] axi4_master_rd_araddr_reg;  // ufix32
  reg [7:0] axi4_master_rd_arlen_reg;  // ufix8
  reg  axi4_master_rd_rd_arid_reg;  // ufix1
  reg [7:0] axi4_master_rd_rd_state_next;  // uint8
  reg [7:0] axi4_master_rd_rd_len_next;  // ufix8
  reg [31:0] axi4_master_rd_rd_addr_next;  // ufix32
  reg  axi4_master_rd_last_burst_next;
  reg  axi4_master_rd_rd_arid_next;  // ufix1
  reg  axi4_master_rd_arvalid_reg_next;
  reg [31:0] axi4_master_rd_araddr_reg_next;  // ufix32
  reg [7:0] axi4_master_rd_arlen_reg_next;  // ufix8
  reg  axi4_master_rd_rd_arid_reg_next;  // ufix1
  reg  AXI4_Master_Rd_ARVALID_1;  // ufix1
  reg [31:0] AXI4_Master_Rd_ARADDR_1;  // ufix32
  reg [7:0] AXI4_Master_Rd_ARLEN_1;  // ufix8
  reg  AXI4_Master_Rd_ARID_1;  // ufix1
  wire [2:0] const_arsize;  // ufix3
  wire [1:0] const_1_2;  // ufix2
  wire const_0_1;  // ufix1
  wire [3:0] const_3_4;  // ufix4
  wire [2:0] const_0_3;  // ufix3
  wire rdata_fifo_empty;  // ufix1
  wire rdata_fifo_full;  // ufix1
  wire rdata_fifo_valid;  // ufix1
  wire rd_dvalid;  // ufix1
  wire ar_transfer;  // ufix1
  wire [8:0] const_0_9;  // ufix9
  wire [8:0] const_1_9;  // ufix9
  wire [8:0] arlen_adder_1;  // ufix9
  wire [8:0] arlen_plusone;  // ufix9
  wire [8:0] ar_transfer_len;  // ufix9
  wire r_transfer;  // ufix1
  wire [8:0] r_transfer_len;  // ufix9
  reg signed [31:0] accum_value;  // sfix32
  wire signed [31:0] accum_arlen_adder_1;  // sfix32
  wire signed [31:0] accum_ar_len;  // sfix32
  wire signed [31:0] accum_rlen_adder_1;  // sfix32
  wire signed [31:0] accum_ar_len_1;  // sfix32


  assign const_len_dec = 1'b1;



  assign len_decrement_1 = {1'b0, user_rd_len};
  assign len_decrement_2 = {7'b0, const_len_dec};
  assign len_decrement_3 = {1'b0, len_decrement_2};
  assign len_decrement_sub_temp = len_decrement_1 - len_decrement_3;
  assign len_val = (len_decrement_sub_temp[8] == 1'b1 ? 8'b00000000 :
              len_decrement_sub_temp[7:0]);



  assign const_1_1 = 1'b1;



  assign full_addr = user_rd_addr + write_AXI4_Master_Rd_base_address;



  assign const_IDWidth = 1'b0;



  assign enb = const_1_1;

  SYSTEM_ip_rd_addr_fifo u_SYSTEM_ip_rd_addr_fifo_inst (.clk(clk),
                                                        .reset_x(reset_x),
                                                        .enb(const_1_1),
                                                        .In(full_addr),  // ufix32
                                                        .Push(user_rd_avalid),  // ufix1
                                                        .Pop(rd_fifo_ack),  // ufix1
                                                        .Out(rd_fifo_addr),  // ufix32
                                                        .Empty(rd_fifo_empty),  // ufix1
                                                        .AFull(rd_fifo_afull)  // ufix1
                                                        );

  assign rd_valid_internal =  ~ rd_fifo_empty;



  SYSTEM_ip_rd_len_fifo u_SYSTEM_ip_rd_len_fifo_inst (.clk(clk),
                                                      .reset_x(reset_x),
                                                      .enb(const_1_1),
                                                      .In(len_val),  // ufix8
                                                      .Push(user_rd_avalid),  // ufix1
                                                      .Pop(rd_fifo_ack),  // ufix1
                                                      .Out(rd_fifo_len)  // ufix8
                                                      );

  always @(posedge clk or posedge reset_x)
    begin : axi4_master_rd_process
      if (reset_x == 1'b1) begin
        axi4_master_rd_rd_state <= 8'd0;
        axi4_master_rd_rd_len <= 8'b00000000;
        axi4_master_rd_rd_addr <= 32'b00000000000000000000000000000000;
        axi4_master_rd_rd_arid <= 1'b0;
        axi4_master_rd_arlen_reg <= 8'b00000000;
        axi4_master_rd_arvalid_reg <= 1'b0;
        axi4_master_rd_araddr_reg <= 32'b00000000000000000000000000000000;
        axi4_master_rd_rd_arid_reg <= 1'b0;
        axi4_master_rd_last_burst <= 1'b0;
      end
      else begin
        if (enb) begin
          axi4_master_rd_rd_state <= axi4_master_rd_rd_state_next;
          axi4_master_rd_rd_len <= axi4_master_rd_rd_len_next;
          axi4_master_rd_rd_addr <= axi4_master_rd_rd_addr_next;
          axi4_master_rd_last_burst <= axi4_master_rd_last_burst_next;
          axi4_master_rd_rd_arid <= axi4_master_rd_rd_arid_next;
          axi4_master_rd_arvalid_reg <= axi4_master_rd_arvalid_reg_next;
          axi4_master_rd_araddr_reg <= axi4_master_rd_araddr_reg_next;
          axi4_master_rd_arlen_reg <= axi4_master_rd_arlen_reg_next;
          axi4_master_rd_rd_arid_reg <= axi4_master_rd_rd_arid_reg_next;
        end
      end
    end

  always @(AXI4_Master_Rd_ARREADY, axi4_master_rd_araddr_reg, axi4_master_rd_arlen_reg,
       axi4_master_rd_arvalid_reg, axi4_master_rd_last_burst,
       axi4_master_rd_rd_addr, axi4_master_rd_rd_arid,
       axi4_master_rd_rd_arid_reg, axi4_master_rd_rd_len,
       axi4_master_rd_rd_state, const_IDWidth, rd_fifo_addr, rd_fifo_len,
       rd_valid_internal, soft_reset_pending) begin
    axi4_master_rd_rd_state_next = axi4_master_rd_rd_state;
    axi4_master_rd_rd_len_next = axi4_master_rd_rd_len;
    axi4_master_rd_rd_addr_next = axi4_master_rd_rd_addr;
    axi4_master_rd_last_burst_next = axi4_master_rd_last_burst;
    axi4_master_rd_rd_arid_next = axi4_master_rd_rd_arid;
    axi4_master_rd_arvalid_reg_next = axi4_master_rd_arvalid_reg;
    axi4_master_rd_araddr_reg_next = axi4_master_rd_araddr_reg;
    axi4_master_rd_arlen_reg_next = axi4_master_rd_arlen_reg;
    axi4_master_rd_rd_arid_reg_next = axi4_master_rd_rd_arid_reg;
    rd_fifo_ack = 1'b0;
    case ( axi4_master_rd_rd_state)
      8'd0 :
        begin
          rd_fifo_ack = 1'b1;
          if ((rd_valid_internal != 1'b0) && (soft_reset_pending == 1'b0)) begin
            axi4_master_rd_rd_state_next = 8'd1;
          end
          axi4_master_rd_arvalid_reg_next = 1'b0;
          axi4_master_rd_last_burst_next = 1'b0;
          axi4_master_rd_rd_len_next = rd_fifo_len;
          axi4_master_rd_rd_addr_next = rd_fifo_addr;
          axi4_master_rd_rd_arid_next = const_IDWidth;
        end
      8'd1 :
        begin
          if (AXI4_Master_Rd_ARREADY && axi4_master_rd_arvalid_reg) begin
            axi4_master_rd_arvalid_reg_next = 1'b0;
            if (axi4_master_rd_last_burst) begin
              axi4_master_rd_rd_state_next = 8'd0;
            end
            else begin
              axi4_master_rd_rd_state_next = 8'd2;
            end
          end
          else begin
            axi4_master_rd_arvalid_reg_next = 1'b1;
          end
          axi4_master_rd_araddr_reg_next = axi4_master_rd_rd_addr;
          axi4_master_rd_rd_arid_reg_next = axi4_master_rd_rd_arid;
          axi4_master_rd_arlen_reg_next = axi4_master_rd_rd_len;
          axi4_master_rd_last_burst_next = 1'b1;
        end
      8'd2 :
        begin
          axi4_master_rd_rd_addr_next = axi4_master_rd_rd_addr + 32'b00000000000000000000010000000000;
          axi4_master_rd_rd_state_next = 8'd1;
        end
      default :
        begin
          axi4_master_rd_rd_state_next = 8'd0;
        end
    endcase
    AXI4_Master_Rd_ARVALID_1 = axi4_master_rd_arvalid_reg;
    AXI4_Master_Rd_ARADDR_1 = axi4_master_rd_araddr_reg;
    AXI4_Master_Rd_ARLEN_1 = axi4_master_rd_arlen_reg;
    AXI4_Master_Rd_ARID_1 = axi4_master_rd_rd_arid_reg;
  end



  assign const_arsize = 3'b010;



  assign AXI4_Master_Rd_ARSIZE = const_arsize;

  assign const_1_2 = 2'b01;



  assign AXI4_Master_Rd_ARBURST = const_1_2;

  assign const_0_1 = 1'b0;



  assign AXI4_Master_Rd_ARLOCK = const_0_1;

  assign const_3_4 = 4'b0011;



  assign AXI4_Master_Rd_ARCACHE = const_3_4;

  assign const_0_3 = 3'b000;



  assign AXI4_Master_Rd_ARPROT = const_0_3;

  SYSTEM_ip_rdata_fifo u_SYSTEM_ip_rdata_fifo_inst (.clk(clk),
                                                    .reset_x(reset_x),
                                                    .enb(const_1_1),
                                                    .In(AXI4_Master_Rd_RDATA),  // ufix32
                                                    .Push(AXI4_Master_Rd_RVALID),  // ufix1
                                                    .Pop(const_1_1),  // ufix1
                                                    .Out(user_data),  // ufix32
                                                    .Empty(rdata_fifo_empty),  // ufix1
                                                    .Full(rdata_fifo_full)  // ufix1
                                                    );

  assign AXI4_Master_Rd_RREADY =  ~ rdata_fifo_full;



  assign user_rd_aready =  ~ rd_fifo_afull;



  assign rdata_fifo_valid =  ~ rdata_fifo_empty;



  assign rd_dvalid = rdata_fifo_valid & const_1_1;



  assign user_rd_dvalid = rd_dvalid;

  assign ar_transfer = AXI4_Master_Rd_ARREADY & AXI4_Master_Rd_ARVALID_1;



  assign const_0_9 = 9'b000000000;



  assign const_1_9 = 9'b000000001;



  assign arlen_adder_1 = {1'b0, AXI4_Master_Rd_ARLEN_1};
  assign arlen_plusone = arlen_adder_1 + const_1_9;



  assign ar_transfer_len = (ar_transfer == 1'b0 ? const_0_9 :
              arlen_plusone);



  assign r_transfer = AXI4_Master_Rd_RREADY & AXI4_Master_Rd_RVALID;



  assign r_transfer_len = (r_transfer == 1'b0 ? const_0_9 :
              const_1_9);



  assign accum_arlen_adder_1 = {23'b0, ar_transfer_len};
  assign accum_ar_len = accum_arlen_adder_1 + accum_value;



  assign accum_rlen_adder_1 = {23'b0, r_transfer_len};
  assign accum_ar_len_1 = accum_ar_len - accum_rlen_adder_1;



  always @(posedge clk or posedge reset_x)
    begin : reg_accum_process
      if (reset_x == 1'b1) begin
        accum_value <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          accum_value <= accum_ar_len_1;
        end
      end
    end



  assign in_burst_axi4_master_rd = accum_value > 32'sb00000000000000000000000000000000;



  assign AXI4_Master_Rd_ARID = AXI4_Master_Rd_ARID_1;

  assign AXI4_Master_Rd_ARADDR = AXI4_Master_Rd_ARADDR_1;

  assign AXI4_Master_Rd_ARLEN = AXI4_Master_Rd_ARLEN_1;

  assign AXI4_Master_Rd_ARVALID = AXI4_Master_Rd_ARVALID_1;

endmodule  // SYSTEM_ip_axi4_master_rd

