// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\tb_SYSTEM\SYSTEM_ip_src_AD7173_8_ADC_0.v
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// Copyright (c) 2023, Alexei Evsenin, evsenin@gmail.com
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: SYSTEM_ip_src_AD7173_8_ADC_0
// Source Path: tb_SYSTEM/SYSTEM/AD7173-8-ADC_0
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module SYSTEM_ip_src_AD7173_8_ADC_0
          (clk,
           reset_x,
           DATA_IN,
           MISO,
           CONTROL_IN,
           nERROR,
           FilterCoeff,
           nCS,
           SCK,
           MOSI,
           DATA_OUT,
           STATUS_OUT,
           channnels_0,
           channnels_1,
           channnels_2,
           channnels_3,
           channnels_4,
           channnels_5,
           channnels_6,
           channnels_7);


  input   clk;
  input   reset_x;
  input   [31:0] DATA_IN;  // uint32
  input   MISO;
  input   [31:0] CONTROL_IN;  // uint32
  input   nERROR;
  input   [15:0] FilterCoeff;  // ufix16_En16
  output  nCS;
  output  SCK;
  output  MOSI;
  output  [31:0] DATA_OUT;  // uint32
  output  [31:0] STATUS_OUT;  // uint32
  output  signed [31:0] channnels_0;  // sfix32_En31
  output  signed [31:0] channnels_1;  // sfix32_En31
  output  signed [31:0] channnels_2;  // sfix32_En31
  output  signed [31:0] channnels_3;  // sfix32_En31
  output  signed [31:0] channnels_4;  // sfix32_En31
  output  signed [31:0] channnels_5;  // sfix32_En31
  output  signed [31:0] channnels_6;  // sfix32_En31
  output  signed [31:0] channnels_7;  // sfix32_En31


  wire [23:0] Constant2_out1 [0:12];  // ufix24 [13]
  reg [31:0] Unit_Delay10_out1;  // uint32
  wire [23:0] Data_Type_Conversion_out1;  // ufix24
  reg [31:0] Unit_Delay9_out1;  // uint32
  wire dtc1;  // ufix1
  wire Extract_Bits4_out1;  // ufix1
  wire Data_Type_Conversion2_out1;
  wire Data_Type_Conversion4_out1;  // ufix1
  reg  REG_MISO_out1;  // ufix1
  wire dtc1_1;  // ufix1_E1
  wire Extract_Bits7_out1;  // ufix1
  wire NOT1_out1;
  wire init_done;
  wire AND_out1;
  wire HDL_FIFO_out2;
  wire NOT_out1;
  reg  Unit_Delay12_out1;
  wire stop;
  reg  Delay2_out1;
  wire push;
  reg  Delay3_out1;
  reg  Delay5_out1;
  wire [23:0] data_out_1;  // ufix24
  reg [23:0] Delay1_out1;  // ufix24
  wire [23:0] HDL_FIFO_out1;  // ufix24
  wire [23:0] din;  // ufix24
  reg [23:0] Unit_Delay11_out1;  // ufix24
  wire nCS_1;  // ufix1
  wire MOSI_1;  // ufix1
  wire SCK_1;  // ufix1
  wire cont_read_enabled;
  wire dread_push;
  wire [31:0] dread_out;  // uint32
  wire [23:0] dout;  // ufix24
  wire dread_waitdeadOutdeadOut;
  wire Data_Type_Conversion10_out1;
  reg  Unit_Delay7_out1;
  wire Data_Type_Conversion11_out1;
  reg  Unit_Delay6_out1;
  wire Data_Type_Conversion12_out1;
  reg  Unit_Delay2_out1;
  wire OR_out1;
  wire [31:0] Data_Type_Conversion3_out1;  // uint32
  wire [31:0] Switch_out1;  // uint32
  reg [31:0] Unit_Delay_Enabled_Synchronous_out1;  // uint32
  reg  Unit_Delay8_out1;
  wire AND1_out1;
  reg [31:0] Unit_Delay_Enabled_Synchronous1_out1;  // uint32
  wire dtc1_2;  // ufix1_E6
  wire ADC_ERROR;  // ufix1
  wire dtc1_3;  // ufix1_E5
  wire CRC_ERROR;  // ufix1
  wire dtc1_4;  // ufix1_E4
  wire REG_ERROR;  // ufix1
  wire [5:0] y;  // ufix6
  wire [31:0] Data_Type_Conversion1_out1;  // uint32
  reg [31:0] Unit_Delay_out1;  // uint32
  wire [23:0] Extract_Bits6_out1;  // ufix24
  reg  valid;
  wire [3:0] Extract_Bits5_out1;  // ufix4
  wire [7:0] chan;  // uint8
  wire [7:0] Constant_out1 [0:7];  // uint8 [8]
  wire signed [31:0] proc_out1 [0:7];  // sfix32_En31 [8]

  // any change of DATA_IN value 
  // start SPI load of new value
  // see init INF state
  // Module frequency should be less 100 MHz, e.g. 62.5spi_sm clk_len=8proc filter is too slow
  // Manual:
  // https://www.analog.com/media/en/technical-documentation/data-sheets/AD7173-8.pdf
  // offset binary coded output:
  // Decimal	Offset binary,K = 8	Two'scomplement	
  // 1	1001	0001	
  // 0	1000	0000	
  // −1	0111	1111
  // Result in range [-1 : 1]  of Fuyl scale.
  // e.g. -1 = -5V; 1 = 5V


  assign Constant2_out1[0] = 24'b000100001000000000000001;
  assign Constant2_out1[1] = 24'b000100011000000001000011;
  assign Constant2_out1[2] = 24'b000100101000000010000101;
  assign Constant2_out1[3] = 24'b000100111000000011000111;
  assign Constant2_out1[4] = 24'b000101001000000100001001;
  assign Constant2_out1[5] = 24'b000101011000000101001011;
  assign Constant2_out1[6] = 24'b000101101000000110001101;
  assign Constant2_out1[7] = 24'b000101111000000111001111;
  assign Constant2_out1[8] = 24'b001000000001111100000000;
  assign Constant2_out1[9] = 24'b001010000000000000000000;
  assign Constant2_out1[10] = 24'b000001100000110000000000;
  assign Constant2_out1[11] = 24'b000000010000000000001100;
  assign Constant2_out1[12] = 24'b000000100000000001000000;


  always @(posedge clk or posedge reset_x)
    begin : Unit_Delay10_process
      if (reset_x == 1'b1) begin
        Unit_Delay10_out1 <= 32'b00000000000000000000000000000000;
      end
      else begin
        Unit_Delay10_out1 <= DATA_IN;
      end
    end


  assign Data_Type_Conversion_out1 = Unit_Delay10_out1[23:0];


  always @(posedge clk or posedge reset_x)
    begin : Unit_Delay9_process
      if (reset_x == 1'b1) begin
        Unit_Delay9_out1 <= 32'b00000000000000000000000000000000;
      end
      else begin
        Unit_Delay9_out1 <= CONTROL_IN;
      end
    end


  assign dtc1 = Unit_Delay9_out1[0];


  assign Extract_Bits4_out1 = dtc1;



  assign Data_Type_Conversion2_out1 = (Extract_Bits4_out1 != 1'b0 ? 1'b1 :
              1'b0);


  assign Data_Type_Conversion4_out1 = MISO;


  always @(posedge clk or posedge reset_x)
    begin : REG_MISO_process
      if (reset_x == 1'b1) begin
        REG_MISO_out1 <= 1'b0;
      end
      else begin
        REG_MISO_out1 <= Data_Type_Conversion4_out1;
      end
    end


  assign dtc1_1 = Unit_Delay9_out1[1];


  assign Extract_Bits7_out1 = dtc1_1;



  assign NOT1_out1 =  ~ Extract_Bits7_out1;


  assign AND_out1 = NOT1_out1 & init_done;


  assign NOT_out1 =  ~ HDL_FIFO_out2;


  always @(posedge clk or posedge reset_x)
    begin : Unit_Delay12_process
      if (reset_x == 1'b1) begin
        Unit_Delay12_out1 <= 1'b0;
      end
      else begin
        Unit_Delay12_out1 <= NOT_out1;
      end
    end


  always @(posedge clk or posedge reset_x)
    begin : Delay2_process
      if (reset_x == 1'b1) begin
        Delay2_out1 <= 1'b0;
      end
      else begin
        Delay2_out1 <= stop;
      end
    end


  always @(posedge clk or posedge reset_x)
    begin : Delay3_process
      if (reset_x == 1'b1) begin
        Delay3_out1 <= 1'b0;
      end
      else begin
        Delay3_out1 <= push;
      end
    end


  always @(posedge clk or posedge reset_x)
    begin : Delay5_process
      if (reset_x == 1'b1) begin
        Delay5_out1 <= 1'b0;
      end
      else begin
        Delay5_out1 <= HDL_FIFO_out2;
      end
    end


  SYSTEM_ip_src_init u_init (.clk(clk),
                             .reset_x(reset_x),
                             .data_init_0(Constant2_out1[0]),  // ufix24
                             .data_init_1(Constant2_out1[1]),  // ufix24
                             .data_init_2(Constant2_out1[2]),  // ufix24
                             .data_init_3(Constant2_out1[3]),  // ufix24
                             .data_init_4(Constant2_out1[4]),  // ufix24
                             .data_init_5(Constant2_out1[5]),  // ufix24
                             .data_init_6(Constant2_out1[6]),  // ufix24
                             .data_init_7(Constant2_out1[7]),  // ufix24
                             .data_init_8(Constant2_out1[8]),  // ufix24
                             .data_init_9(Constant2_out1[9]),  // ufix24
                             .data_init_10(Constant2_out1[10]),  // ufix24
                             .data_init_11(Constant2_out1[11]),  // ufix24
                             .data_init_12(Constant2_out1[12]),  // ufix24
                             .data_in(Data_Type_Conversion_out1),  // ufix24
                             .fifo_empty(Delay5_out1),
                             .rst(Data_Type_Conversion2_out1),
                             .push(push),
                             .data_out(data_out_1),  // ufix24
                             .init_done(init_done)
                             );
  always @(posedge clk or posedge reset_x)
    begin : Delay1_process
      if (reset_x == 1'b1) begin
        Delay1_out1 <= 24'b000000000000000000000000;
      end
      else begin
        Delay1_out1 <= data_out_1;
      end
    end


  SYSTEM_ip_src_HDL_FIFO u_HDL_FIFO (.clk(clk),
                                     .reset_x(reset_x),
                                     .In(Delay1_out1),  // ufix24
                                     .Push(Delay3_out1),
                                     .Pop(Delay2_out1),
                                     .Out(HDL_FIFO_out1),  // ufix24
                                     .Empty(HDL_FIFO_out2)
                                     );
  assign din = HDL_FIFO_out1;
  always @(posedge clk or posedge reset_x)
    begin : Unit_Delay11_process
      if (reset_x == 1'b1) begin
        Unit_Delay11_out1 <= 24'b000000000000000000000000;
      end
      else begin
        Unit_Delay11_out1 <= din;
      end
    end


  SYSTEM_ip_src_spi_sm u_spi_sm (.clk(clk),
                                 .reset_x(reset_x),
                                 .data_in(Unit_Delay11_out1),  // ufix24
                                 .MISO(REG_MISO_out1),  // ufix1
                                 .start(Unit_Delay12_out1),
                                 .rst(Data_Type_Conversion2_out1),
                                 .start_cont_read(AND_out1),
                                 .nCS(nCS_1),  // ufix1
                                 .MOSI(MOSI_1),  // ufix1
                                 .SCK(SCK_1),  // ufix1
                                 .stop(stop),
                                 .cont_read_enabled(cont_read_enabled),
                                 .dread_push(dread_push),
                                 .dread_out(dread_out),  // uint32
                                 .dout(dout),  // ufix24
                                 .dread_wait(dread_waitdeadOutdeadOut)
                                 );
  assign Data_Type_Conversion10_out1 = (nCS_1 != 1'b0 ? 1'b1 :
              1'b0);


  always @(posedge clk or posedge reset_x)
    begin : Unit_Delay7_process
      if (reset_x == 1'b1) begin
        Unit_Delay7_out1 <= 1'b0;
      end
      else begin
        Unit_Delay7_out1 <= Data_Type_Conversion10_out1;
      end
    end


  assign nCS = Unit_Delay7_out1;

  assign Data_Type_Conversion11_out1 = (SCK_1 != 1'b0 ? 1'b1 :
              1'b0);


  always @(posedge clk or posedge reset_x)
    begin : Unit_Delay6_process
      if (reset_x == 1'b1) begin
        Unit_Delay6_out1 <= 1'b0;
      end
      else begin
        Unit_Delay6_out1 <= Data_Type_Conversion11_out1;
      end
    end


  assign SCK = Unit_Delay6_out1;

  assign Data_Type_Conversion12_out1 = (MOSI_1 != 1'b0 ? 1'b1 :
              1'b0);


  always @(posedge clk or posedge reset_x)
    begin : Unit_Delay2_process
      if (reset_x == 1'b1) begin
        Unit_Delay2_out1 <= 1'b0;
      end
      else begin
        Unit_Delay2_out1 <= Data_Type_Conversion12_out1;
      end
    end


  assign MOSI = Unit_Delay2_out1;

  assign OR_out1 = dread_push | stop;


  assign Data_Type_Conversion3_out1 = {8'b0, dout};


  assign Switch_out1 = (dread_push == 1'b0 ? Data_Type_Conversion3_out1 :
              dread_out);


  always @(posedge clk or posedge reset_x)
    begin : Unit_Delay_Enabled_Synchronous_process
      if (reset_x == 1'b1) begin
        Unit_Delay_Enabled_Synchronous_out1 <= 32'b00000000000000000000000000000000;
      end
      else begin
        if (OR_out1) begin
          Unit_Delay_Enabled_Synchronous_out1 <= Switch_out1;
        end
      end
    end


  assign DATA_OUT = Unit_Delay_Enabled_Synchronous_out1;

  always @(posedge clk or posedge reset_x)
    begin : Unit_Delay8_process
      if (reset_x == 1'b1) begin
        Unit_Delay8_out1 <= 1'b0;
      end
      else begin
        Unit_Delay8_out1 <= nERROR;
      end
    end


  assign AND1_out1 = dread_push & Unit_Delay8_out1;


  always @(posedge clk or posedge reset_x)
    begin : Unit_Delay_Enabled_Synchronous1_process
      if (reset_x == 1'b1) begin
        Unit_Delay_Enabled_Synchronous1_out1 <= 32'b00000000000000000000000000000000;
      end
      else begin
        if (AND1_out1) begin
          Unit_Delay_Enabled_Synchronous1_out1 <= dread_out;
        end
      end
    end


  assign dtc1_2 = Unit_Delay_Enabled_Synchronous1_out1[6];


  assign ADC_ERROR = dtc1_2;



  assign dtc1_3 = Unit_Delay_Enabled_Synchronous1_out1[5];


  assign CRC_ERROR = dtc1_3;



  assign dtc1_4 = Unit_Delay_Enabled_Synchronous1_out1[4];


  assign REG_ERROR = dtc1_4;



  assign y = {ADC_ERROR, CRC_ERROR, REG_ERROR, Unit_Delay8_out1, cont_read_enabled, init_done};


  assign Data_Type_Conversion1_out1 = {26'b0, y};


  always @(posedge clk or posedge reset_x)
    begin : Unit_Delay_process
      if (reset_x == 1'b1) begin
        Unit_Delay_out1 <= 32'b00000000000000000000000000000000;
      end
      else begin
        Unit_Delay_out1 <= Data_Type_Conversion1_out1;
      end
    end


  assign STATUS_OUT = Unit_Delay_out1;

  assign Extract_Bits6_out1 = Unit_Delay_Enabled_Synchronous1_out1[31:8];


  always @(posedge clk or posedge reset_x)
    begin : Unit_Delay3_process
      if (reset_x == 1'b1) begin
        valid <= 1'b0;
      end
      else begin
        valid <= dread_push;
      end
    end


  assign Extract_Bits5_out1 = Unit_Delay_Enabled_Synchronous1_out1[3:0];


  assign chan = {4'b0, Extract_Bits5_out1};


  assign Constant_out1[0] = 8'b00000000;
  assign Constant_out1[1] = 8'b00000001;
  assign Constant_out1[2] = 8'b00000010;
  assign Constant_out1[3] = 8'b00000011;
  assign Constant_out1[4] = 8'b00000100;
  assign Constant_out1[5] = 8'b00000101;
  assign Constant_out1[6] = 8'b00000110;
  assign Constant_out1[7] = 8'b00000111;


  generate
    genvar k;
    for(k = 0; k < 8; k = k + 1) begin : GEN_LABEL
      SYSTEM_ip_src_proc u_proc (.clk(clk),
                                 .reset_x(reset_x),
                                 .data(Extract_Bits6_out1),  // ufix24
                                 .valid(valid),
                                 .chan(chan),  // uint8
                                 .idx(Constant_out1[k]),  // uint8
                                 .coeff(FilterCoeff),  // ufix16_En16
                                 .value(proc_out1[k])  // sfix32_En31
                                 );
    end
  endgenerate
  assign channnels_0 = proc_out1[0];

  assign channnels_1 = proc_out1[1];

  assign channnels_2 = proc_out1[2];

  assign channnels_3 = proc_out1[3];

  assign channnels_4 = proc_out1[4];

  assign channnels_5 = proc_out1[5];

  assign channnels_6 = proc_out1[6];

  assign channnels_7 = proc_out1[7];

endmodule  // SYSTEM_ip_src_AD7173_8_ADC_0

