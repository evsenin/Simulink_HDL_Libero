// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\tb_SYSTEM\SYSTEM_ip_src_Pulse_extender_ctrl.v
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// Copyright (c) 2023, Alexei Evsenin, evsenin@gmail.com
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: SYSTEM_ip_src_Pulse_extender_ctrl
// Source Path: tb_SYSTEM/SYSTEM/time_stamp_engine/pulse_10mks/Pulse extender ctrl
// Hierarchy Level: 3
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module SYSTEM_ip_src_Pulse_extender_ctrl
          (clk,
           reset_x,
           PULSE_LEN,
           trigger,
           valid,
           value);

  // Default encoded enumeration values for type state_type_is_Pulse_extender_ctrl
  parameter state_type_is_Pulse_extender_ctrl_IN_RESET = 1'd0, state_type_is_Pulse_extender_ctrl_IN_VALID = 1'd1;

  input   clk;
  input   reset_x;
  input   [15:0] PULSE_LEN;  // uint16
  input   trigger;
  output  valid;
  output  [15:0] value;  // uint16


  reg  is_Pulse_extender_ctrl;  // uint8
  wire [15:0] valuedeadOut;  // uint16
  reg  valid_reg;
  reg [15:0] value_reg;  // uint16
  reg  is_Pulse_extender_ctrl_next;  // enum type state_type_is_Pulse_extender_ctrl (2 enums)
  reg  valid_reg_next;
  reg [15:0] value_reg_next;  // uint16


  always @(posedge clk or posedge reset_x)
    begin : Pulse_extender_ctrl_process
      if (reset_x == 1'b1) begin
        //Entry: SYSTEM/time_stamp_engine/pulse_10mks/Pulse extender ctrl
        //Entry Internal: SYSTEM/time_stamp_engine/pulse_10mks/Pulse extender ctrl
        //Transition
        is_Pulse_extender_ctrl <= state_type_is_Pulse_extender_ctrl_IN_RESET;
        //Entry 'RESET'
        valid_reg <= 1'b0;
        value_reg <= 16'd0;
      end
      else begin
        is_Pulse_extender_ctrl <= is_Pulse_extender_ctrl_next;
        valid_reg <= valid_reg_next;
        value_reg <= value_reg_next;
      end
    end

  always @(PULSE_LEN, is_Pulse_extender_ctrl, trigger, valid_reg, value_reg) begin
    valid_reg_next = valid_reg;
    value_reg_next = value_reg;
    is_Pulse_extender_ctrl_next = is_Pulse_extender_ctrl;
    //Gateway: SYSTEM/time_stamp_engine/pulse_10mks/Pulse extender ctrl
    //During: SYSTEM/time_stamp_engine/pulse_10mks/Pulse extender ctrl
    case ( is_Pulse_extender_ctrl)
      state_type_is_Pulse_extender_ctrl_IN_RESET :
        begin
          //During 'RESET'
          if (trigger) begin
            //Transition
            is_Pulse_extender_ctrl_next = state_type_is_Pulse_extender_ctrl_IN_VALID;
            //Entry 'VALID'
            valid_reg_next = 1'b1;
            value_reg_next = 16'd0;
          end
          else begin
            valid_reg_next = 1'b0;
            value_reg_next = 16'd0;
          end
        end
      default :
        begin
          //case IN_VALID:
          //During 'VALID'
          if (value_reg == (PULSE_LEN - 16'b0000000000000001)) begin
            //Transition
            //Exit 'VALID'
            is_Pulse_extender_ctrl_next = state_type_is_Pulse_extender_ctrl_IN_RESET;
            //Entry 'RESET'
            valid_reg_next = 1'b0;
            value_reg_next = 16'd0;
          end
          else begin
            valid_reg_next = 1'b1;
            value_reg_next = value_reg + 16'b0000000000000001;
          end
        end
    endcase
  end

  assign valid = valid_reg_next;
  assign valuedeadOut = value_reg_next;


  assign value = 16'b0000000000000000;



endmodule  // SYSTEM_ip_src_Pulse_extender_ctrl

