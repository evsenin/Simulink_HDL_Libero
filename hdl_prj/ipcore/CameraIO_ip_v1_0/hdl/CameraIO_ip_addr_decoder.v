// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\tb_CameraIO\CameraIO_ip_addr_decoder.v
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// Copyright (c) 2023, Alexei Evsenin, evsenin@gmail.com
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: CameraIO_ip_addr_decoder
// Source Path: CameraIO_ip/CameraIO_ip_axi4/CameraIO_ip_addr_decoder
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module CameraIO_ip_addr_decoder
          (clk,
           reset_x,
           data_write,
           addr_sel,
           wr_enb,
           rd_enb,
           read_ip_timestamp,
           read_AXI_ExpanderValue,
           read_AXI_CameraIO_Status,
           read_AXI_MuxerValue,
           data_read,
           write_AXI_CameraIO_Control);


  input   clk;
  input   reset_x;
  input   [31:0] data_write;  // ufix32
  input   [13:0] addr_sel;  // ufix14
  input   wr_enb;  // ufix1
  input   rd_enb;  // ufix1
  input   [31:0] read_ip_timestamp;  // ufix32
  input   [23:0] read_AXI_ExpanderValue;  // ufix24
  input   [11:0] read_AXI_CameraIO_Status;  // ufix12
  input   [7:0] read_AXI_MuxerValue;  // ufix8
  output  [31:0] data_read;  // ufix32
  output  [31:0] write_AXI_CameraIO_Control;  // ufix32


  wire enb;
  wire decode_sel_ip_timestamp_1_1;  // ufix1
  wire [31:0] const_0;  // ufix32
  wire const_1;  // ufix1
  wire decode_sel_AXI_MuxerValue_1_1;  // ufix1
  wire decode_sel_AXI_CameraIO_Status_1_1;  // ufix1
  wire decode_sel_AXI_ExpanderValue_1_1;  // ufix1
  reg [31:0] read_reg_ip_timestamp;  // ufix32
  wire [31:0] decode_rd_ip_timestamp_1_1;  // ufix32
  reg [23:0] read_reg_AXI_ExpanderValue;  // ufix24
  wire [31:0] data_slice_AXI_ExpanderValue_1;  // ufix32
  wire [31:0] decode_rd_AXI_ExpanderValue_1_1;  // ufix32
  reg [11:0] read_reg_AXI_CameraIO_Status;  // ufix12
  wire [31:0] data_slice_AXI_CameraIO_Status_1;  // ufix32
  wire [31:0] decode_rd_AXI_CameraIO_Status_1_1;  // ufix32
  reg [7:0] read_reg_AXI_MuxerValue;  // ufix8
  wire [31:0] data_slice_AXI_MuxerValue_1;  // ufix32
  wire [31:0] decode_rd_AXI_MuxerValue_1_1;  // ufix32
  wire decode_sel_AXI_CameraIO_Control_1_1;  // ufix1
  wire reg_enb_AXI_CameraIO_Control_1_1;  // ufix1
  reg [31:0] data_reg_AXI_CameraIO_Control_1_1;  // ufix32


  assign decode_sel_ip_timestamp_1_1 = addr_sel == 14'b00000000000010;



  assign const_0 = 32'b00000000000000000000000000000000;



  assign const_1 = 1'b1;



  assign enb = const_1;

  assign decode_sel_AXI_MuxerValue_1_1 = addr_sel == 14'b00000001000011;



  assign decode_sel_AXI_CameraIO_Status_1_1 = addr_sel == 14'b00000001000001;



  assign decode_sel_AXI_ExpanderValue_1_1 = addr_sel == 14'b00000001000000;



  always @(posedge clk or posedge reset_x)
    begin : reg_ip_timestamp_process
      if (reset_x == 1'b1) begin
        read_reg_ip_timestamp <= 32'b00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          read_reg_ip_timestamp <= read_ip_timestamp;
        end
      end
    end



  assign decode_rd_ip_timestamp_1_1 = (decode_sel_ip_timestamp_1_1 == 1'b0 ? const_0 :
              read_reg_ip_timestamp);



  always @(posedge clk or posedge reset_x)
    begin : reg_AXI_ExpanderValue_process
      if (reset_x == 1'b1) begin
        read_reg_AXI_ExpanderValue <= 24'b000000000000000000000000;
      end
      else begin
        if (enb) begin
          read_reg_AXI_ExpanderValue <= read_AXI_ExpanderValue;
        end
      end
    end



  assign data_slice_AXI_ExpanderValue_1 = {8'b0, read_reg_AXI_ExpanderValue};



  assign decode_rd_AXI_ExpanderValue_1_1 = (decode_sel_AXI_ExpanderValue_1_1 == 1'b0 ? decode_rd_ip_timestamp_1_1 :
              data_slice_AXI_ExpanderValue_1);



  always @(posedge clk or posedge reset_x)
    begin : reg_AXI_CameraIO_Status_process
      if (reset_x == 1'b1) begin
        read_reg_AXI_CameraIO_Status <= 12'b000000000000;
      end
      else begin
        if (enb) begin
          read_reg_AXI_CameraIO_Status <= read_AXI_CameraIO_Status;
        end
      end
    end



  assign data_slice_AXI_CameraIO_Status_1 = {20'b0, read_reg_AXI_CameraIO_Status};



  assign decode_rd_AXI_CameraIO_Status_1_1 = (decode_sel_AXI_CameraIO_Status_1_1 == 1'b0 ? decode_rd_AXI_ExpanderValue_1_1 :
              data_slice_AXI_CameraIO_Status_1);



  always @(posedge clk or posedge reset_x)
    begin : reg_AXI_MuxerValue_process
      if (reset_x == 1'b1) begin
        read_reg_AXI_MuxerValue <= 8'b00000000;
      end
      else begin
        if (enb) begin
          read_reg_AXI_MuxerValue <= read_AXI_MuxerValue;
        end
      end
    end



  assign data_slice_AXI_MuxerValue_1 = {24'b0, read_reg_AXI_MuxerValue};



  assign decode_rd_AXI_MuxerValue_1_1 = (decode_sel_AXI_MuxerValue_1_1 == 1'b0 ? decode_rd_AXI_CameraIO_Status_1_1 :
              data_slice_AXI_MuxerValue_1);



  assign data_read = decode_rd_AXI_MuxerValue_1_1;

  assign decode_sel_AXI_CameraIO_Control_1_1 = addr_sel == 14'b00000001000010;



  assign reg_enb_AXI_CameraIO_Control_1_1 = decode_sel_AXI_CameraIO_Control_1_1 & wr_enb;



  always @(posedge clk or posedge reset_x)
    begin : reg_AXI_CameraIO_Control_1_1_process
      if (reset_x == 1'b1) begin
        data_reg_AXI_CameraIO_Control_1_1 <= 32'b00000000000000000000000000000000;
      end
      else begin
        if (enb && reg_enb_AXI_CameraIO_Control_1_1) begin
          data_reg_AXI_CameraIO_Control_1_1 <= data_write;
        end
      end
    end



  assign write_AXI_CameraIO_Control = data_reg_AXI_CameraIO_Control_1_1;

endmodule  // CameraIO_ip_addr_decoder

