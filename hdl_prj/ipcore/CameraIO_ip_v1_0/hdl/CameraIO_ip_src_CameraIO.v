// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\tb_CameraIO\CameraIO_ip_src_CameraIO.v
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1.25e-08
// Target subsystem base rate: 1.25e-08
// 
// Copyright (c) 2023, Alexei Evsenin, evsenin@gmail.com
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: CameraIO_ip_src_CameraIO
// Source Path: tb_CameraIO/CameraIO
// Hierarchy Level: 0
// 
// Simulink model description for tb_CameraIO:
// 
// Copyright (c) 2023, Alexei Evsenin, evsenin@gmail.com
// 
// 
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module CameraIO_ip_src_CameraIO
          (clk,
           reset_x,
           Muxer_sdi,
           Muxer_sci,
           Expander_sdi,
           Expander_sci,
           Cam1_sdi,
           Cam2_sdi,
           Cam3_sdi,
           Expander_nRST,
           CAM_Master_CLK,
           GPIO27_PWM2,
           Cam1_sci,
           Cam2_sci,
           Cam3_sci,
           AXI_CameraIO_Control,
           Expander_sdoen,
           Expander_scoen,
           Muxer_sdoen,
           Muxer_scoen,
           CAM1_nCS,
           CAM1_nRST,
           CAM1_PWDN,
           CAM1_FLASH,
           CAM2_nCS,
           CAM2_nRST,
           CAM2_PWDN,
           CAM2_FLASH,
           CAM3_nCS,
           CAM3_nRST,
           CAM3_PWDN,
           CAM3_FLASH,
           Cam3_sdoen,
           Cam3_scoen,
           Cam2_sdoen,
           Cam2_scoen,
           Cam1_sdoen,
           Cam1_scoen,
           Expander_nINT,
           AXI_CameraIO_Status,
           CAM1_TRIG,
           CAM2_TRIG,
           CAM3_TRIG,
           RADAR0_enable,
           RADAR1_enable,
           AXI_ExpanderValue,
           AXI_MuxerValue);


  input   clk;
  input   reset_x;
  input   Muxer_sdi;
  input   Muxer_sci;
  input   Expander_sdi;
  input   Expander_sci;
  input   Cam1_sdi;
  input   Cam2_sdi;
  input   Cam3_sdi;
  input   Expander_nRST;
  input   CAM_Master_CLK;
  input   GPIO27_PWM2;
  input   Cam1_sci;
  input   Cam2_sci;
  input   Cam3_sci;
  input   [31:0] AXI_CameraIO_Control;  // uint32 Tunable port
  output  Expander_sdoen;
  output  Expander_scoen;
  output  Muxer_sdoen;
  output  Muxer_scoen;
  output  CAM1_nCS;  // ufix1
  output  CAM1_nRST;  // ufix1
  output  CAM1_PWDN;  // ufix1
  output  CAM1_FLASH;  // ufix1
  output  CAM2_nCS;  // ufix1
  output  CAM2_nRST;  // ufix1
  output  CAM2_PWDN;  // ufix1
  output  CAM2_FLASH;  // ufix1
  output  CAM3_nCS;  // ufix1
  output  CAM3_nRST;  // ufix1
  output  CAM3_PWDN;  // ufix1
  output  CAM3_FLASH;  // ufix1
  output  Cam3_sdoen;
  output  Cam3_scoen;
  output  Cam2_sdoen;
  output  Cam2_scoen;
  output  Cam1_sdoen;
  output  Cam1_scoen;
  output  Expander_nINT;
  output  [11:0] AXI_CameraIO_Status;  // ufix12
  output  CAM1_TRIG;  // ufix1
  output  CAM2_TRIG;  // ufix1
  output  CAM3_TRIG;  // ufix1
  output  RADAR0_enable;
  output  RADAR1_enable;
  output  [23:0] AXI_ExpanderValue;  // ufix24
  output  [7:0] AXI_MuxerValue;  // uint8


  reg  Exp_SCI_REG_out1;
  reg  Exp_SDI_REG_out1;
  reg  Exp_nRST_REG_out1;
  wire TCA6424A_out1;
  wire TCA6424A_out2;  // ufix1
  wire [23:0] TCA6424A_out3;  // ufix24
  reg [31:0] Unit_Delay_out1;  // uint32
  wire dtc1;  // ufix1_E16
  wire Extract_Bits23_out1;  // ufix1
  wire OR8_out1;
  reg  Exp_SDO_REG_out1;
  wire NOT4_out1;
  wire OR7_out1;
  reg  Exp_SCO_REG_out1;
  wire NOT1_out1;
  wire dtc1_1;  // ufix1_E20
  wire Extract_Bits26_out1;  // ufix1
  reg  Mux_SCI_REG_out1;
  reg  Mux_SDI_REG_out1;
  wire dtc1_2;  // ufix1_E24
  wire Extract_Bits25_out1;  // ufix1
  wire OR4_out1;
  wire dtc1_3;  // ufix1_E25
  wire Extract_Bits27_out1;  // ufix1
  wire OR5_out1;
  wire dtc1_4;  // ufix1_E26
  wire Extract_Bits28_out1;  // ufix1
  wire OR6_out1;
  wire [7:0] Constant6_out1;  // uint8
  wire [7:0] Constant8_out1;  // uint8
  wire [7:0] Constant7_out1;  // uint8
  wire [7:0] Constant9_out1;  // uint8
  wire Constant13_out1;
  wire Constant14_out1;
  wire Constant15_out1;
  reg  [0:7] Cam_SDI_REG_out1;  // boolean [8]
  reg  [0:7] Cam_SDO_REG_out1;  // boolean [8]
  wire Selector9_out1;
  reg  [0:7] Cam_SCO_REG_out1;  // boolean [8]
  wire Selector7_out1;
  wire [7:0] RADAR1_MIPI_I2C_out1;  // uint8
  wire RADAR1_MIPI_I2C_out2;
  wire y_0;
  wire y_1;
  wire y_2;
  wire y_3;
  wire y_4;
  wire y_5;
  wire y_6;
  wire y_7;
  wire [0:7] y;  // boolean [8]
  wire Selector8_out1;
  wire y_0_1;
  wire y_1_1;
  wire y_2_1;
  wire y_3_1;
  wire y_4_1;
  wire y_5_1;
  wire y_6_1;
  wire y_7_1;
  wire [0:7] y_8;  // boolean [8]
  wire Selector6_out1;
  wire [7:0] RADAR0_MIPI_I2C_out1;  // uint8
  wire RADAR0_MIPI_I2C_out2;
  wire [0:7] Vector_Concatenate1_out1;  // boolean [8]
  wire TCA9548A_out1;
  wire TCA9548A_out2;
  wire [7:0] TCA9548A_out5;  // uint8
  wire OR10_out1;
  reg  Mux_SDO_REG_out1;
  wire NOT5_out1;
  wire OR9_out1;
  reg  Mux_SCO_REG_out1;
  wire NOT3_out1;
  wire dtc1_5;  // ufix1
  wire dtc1_6;  // ufix1_E1
  wire Extract_Bits1_out1;  // ufix1
  wire dtc1_7;  // ufix1_E2
  wire Extract_Bits2_out1;  // ufix1
  wire dtc1_8;  // ufix1_E3
  wire Extract_Bits3_out1;  // ufix1
  wire dtc1_9;  // ufix1_E5
  wire Extract_Bits4_out1;  // ufix1
  wire dtc1_10;  // ufix1_E6
  wire Extract_Bits5_out1;  // ufix1
  wire dtc1_11;  // ufix1_E7
  wire Extract_Bits6_out1;  // ufix1
  wire dtc1_12;  // ufix1_E8
  wire Extract_Bits7_out1;  // ufix1
  wire dtc1_13;  // ufix1_E9
  wire Extract_Bits8_out1;  // ufix1
  wire dtc1_14;  // ufix1_E10
  wire Extract_Bits9_out1;  // ufix1
  wire dtc1_15;  // ufix1_E11
  wire Extract_Bits10_out1;  // ufix1
  wire dtc1_16;  // ufix1_E12
  wire Extract_Bits11_out1;  // ufix1
  wire [7:0] Constant5_out1;  // uint8
  wire Selector5_out1;
  wire NOT11_out1;
  wire [7:0] Constant2_out1;  // uint8
  wire Selector2_out1;
  wire NOT8_out1;
  wire [7:0] Constant4_out1;  // uint8
  wire Selector4_out1;
  wire NOT10_out1;
  wire [7:0] Constant1_out1;  // uint8
  wire Selector1_out1;
  wire NOT7_out1;
  wire [7:0] Constant3_out1;  // uint8
  wire Selector3_out1;
  wire NOT9_out1;
  wire [7:0] Constant_out1;  // uint8
  wire Selector_out1;
  wire NOT6_out1;
  wire dtc1_17;  // ufix1_E17
  wire Extract_Bits24_out1;  // ufix1
  reg  Exp_nINT_REG_out1;  // ufix1
  wire NOT2_out1;
  wire Constant10_out1;
  wire [2:0] y_9;  // ufix3
  wire [2:0] y_10;  // ufix3
  reg  Unit_Delay2_out1;
  reg  Unit_Delay1_out1;
  wire [11:0] y_11;  // ufix12
  wire dtc1_18;  // ufix1_E1
  wire Extract_Bits14_out1;  // ufix1
  wire dtc1_19;  // ufix1_E2
  wire Extract_Bits15_out1;  // ufix1
  wire dtc1_20;  // ufix1_E3
  wire Extract_Bits16_out1;  // ufix1
  wire dtc1_21;  // ufix1_E13
  wire Extract_Bits12_out1;  // ufix1
  wire dtc1_22;  // ufix1
  wire dtc1_23;  // ufix1_E11
  wire Extract_Bits18_out1;  // ufix1
  wire OR1_out1;
  reg  REG_ENB_out1;  // ufix1
  wire dtc1_24;  // ufix1_E10
  wire Extract_Bits17_out1;  // ufix1
  wire OR_out1;
  wire AND_out1;
  wire dtc1_25;  // ufix1_E14
  wire Extract_Bits13_out1;  // ufix1
  wire dtc1_26;  // ufix1
  wire dtc1_27;  // ufix1_E9
  wire Extract_Bits21_out1;  // ufix1
  wire OR3_out1;
  reg  REG_ENB1_out1;  // ufix1
  wire dtc1_28;  // ufix1_E8
  wire Extract_Bits20_out1;  // ufix1
  wire OR2_out1;
  wire AND1_out1;

  // sdoen /
  // scoen
  // _oen pin enables external bidir driver to pass 0 on pad.
  // It means, that 
  // if you want on pad 1, disable driver (0)
  // if you want on pad 0, enable driver (1)
  // This is reason for NOT before output _oen
  // sdi /
  // sci
  // sda / 
  // scl


  always @(posedge clk or posedge reset_x)
    begin : Exp_SCI_REG_process
      if (reset_x == 1'b1) begin
        Exp_SCI_REG_out1 <= 1'b0;
      end
      else begin
        Exp_SCI_REG_out1 <= Expander_sci;
      end
    end


  always @(posedge clk or posedge reset_x)
    begin : Exp_SDI_REG_process
      if (reset_x == 1'b1) begin
        Exp_SDI_REG_out1 <= 1'b0;
      end
      else begin
        Exp_SDI_REG_out1 <= Expander_sdi;
      end
    end


  always @(posedge clk or posedge reset_x)
    begin : Exp_nRST_REG_process
      if (reset_x == 1'b1) begin
        Exp_nRST_REG_out1 <= 1'b0;
      end
      else begin
        Exp_nRST_REG_out1 <= Expander_nRST;
      end
    end


  CameraIO_ip_src_TCA6424A u_TCA6424A (.clk(clk),
                                       .reset_x(reset_x),
                                       .sci(Exp_SCI_REG_out1),
                                       .sdi(Exp_SDI_REG_out1),
                                       .nRST(Exp_nRST_REG_out1),
                                       .sco(TCA6424A_out1),
                                       .sdo(TCA6424A_out2),  // ufix1
                                       .OutPort(TCA6424A_out3)  // ufix24
                                       );
  always @(posedge clk or posedge reset_x)
    begin : Unit_Delay_process
      if (reset_x == 1'b1) begin
        Unit_Delay_out1 <= 32'b00000000000000000000000000000000;
      end
      else begin
        Unit_Delay_out1 <= AXI_CameraIO_Control;
      end
    end


  assign dtc1 = Unit_Delay_out1[16];


  assign Extract_Bits23_out1 = dtc1;



  assign OR8_out1 = TCA6424A_out2 | Extract_Bits23_out1;


  always @(posedge clk or posedge reset_x)
    begin : Exp_SDO_REG_process
      if (reset_x == 1'b1) begin
        Exp_SDO_REG_out1 <= 1'b0;
      end
      else begin
        Exp_SDO_REG_out1 <= OR8_out1;
      end
    end


  assign NOT4_out1 =  ~ Exp_SDO_REG_out1;


  assign Expander_sdoen = NOT4_out1;

  assign OR7_out1 = TCA6424A_out1 | Extract_Bits23_out1;


  always @(posedge clk or posedge reset_x)
    begin : Exp_SCO_REG_process
      if (reset_x == 1'b1) begin
        Exp_SCO_REG_out1 <= 1'b0;
      end
      else begin
        Exp_SCO_REG_out1 <= OR7_out1;
      end
    end


  assign NOT1_out1 =  ~ Exp_SCO_REG_out1;


  assign Expander_scoen = NOT1_out1;

  assign dtc1_1 = Unit_Delay_out1[20];


  assign Extract_Bits26_out1 = dtc1_1;



  always @(posedge clk or posedge reset_x)
    begin : Mux_SCI_REG_process
      if (reset_x == 1'b1) begin
        Mux_SCI_REG_out1 <= 1'b0;
      end
      else begin
        Mux_SCI_REG_out1 <= Muxer_sci;
      end
    end


  always @(posedge clk or posedge reset_x)
    begin : Mux_SDI_REG_process
      if (reset_x == 1'b1) begin
        Mux_SDI_REG_out1 <= 1'b0;
      end
      else begin
        Mux_SDI_REG_out1 <= Muxer_sdi;
      end
    end


  assign dtc1_2 = Unit_Delay_out1[24];


  assign Extract_Bits25_out1 = dtc1_2;



  assign OR4_out1 = Extract_Bits25_out1 | Cam1_sdi;


  assign dtc1_3 = Unit_Delay_out1[25];


  assign Extract_Bits27_out1 = dtc1_3;



  assign OR5_out1 = Extract_Bits27_out1 | Cam2_sdi;


  assign dtc1_4 = Unit_Delay_out1[26];


  assign Extract_Bits28_out1 = dtc1_4;



  assign OR6_out1 = Extract_Bits28_out1 | Cam3_sdi;


  assign Constant6_out1 = 8'b00000011;


  assign Constant8_out1 = 8'b00000011;


  assign Constant7_out1 = 8'b00000100;


  assign Constant9_out1 = 8'b00000100;


  assign Constant13_out1 = 1'b1;


  assign Constant14_out1 = 1'b1;


  assign Constant15_out1 = 1'b1;


  assign Selector9_out1 = (Constant9_out1 == 8'b00000000 ? Cam_SDO_REG_out1[0] :
              (Constant9_out1 == 8'b00000001 ? Cam_SDO_REG_out1[1] :
              (Constant9_out1 == 8'b00000010 ? Cam_SDO_REG_out1[2] :
              (Constant9_out1 == 8'b00000011 ? Cam_SDO_REG_out1[3] :
              (Constant9_out1 == 8'b00000100 ? Cam_SDO_REG_out1[4] :
              (Constant9_out1 == 8'b00000101 ? Cam_SDO_REG_out1[5] :
              (Constant9_out1 == 8'b00000110 ? Cam_SDO_REG_out1[6] :
              Cam_SDO_REG_out1[7])))))));


  assign Selector7_out1 = (Constant7_out1 == 8'b00000000 ? Cam_SCO_REG_out1[0] :
              (Constant7_out1 == 8'b00000001 ? Cam_SCO_REG_out1[1] :
              (Constant7_out1 == 8'b00000010 ? Cam_SCO_REG_out1[2] :
              (Constant7_out1 == 8'b00000011 ? Cam_SCO_REG_out1[3] :
              (Constant7_out1 == 8'b00000100 ? Cam_SCO_REG_out1[4] :
              (Constant7_out1 == 8'b00000101 ? Cam_SCO_REG_out1[5] :
              (Constant7_out1 == 8'b00000110 ? Cam_SCO_REG_out1[6] :
              Cam_SCO_REG_out1[7])))))));


  CameraIO_ip_src_RADAR1_MIPI_I2C u_RADAR1_MIPI_I2C (.clk(clk),
                                                     .reset_x(reset_x),
                                                     .sci(Selector7_out1),
                                                     .sdi(Selector9_out1),
                                                     .ctrl(RADAR1_MIPI_I2C_out1),  // uint8
                                                     .sdo(RADAR1_MIPI_I2C_out2)
                                                     );
  assign y[0] = y_0;
  assign y[1] = y_1;
  assign y[2] = y_2;
  assign y[3] = y_3;
  assign y[4] = y_4;
  assign y[5] = y_5;
  assign y[6] = y_6;
  assign y[7] = y_7;

  always @(posedge clk or posedge reset_x)
    begin : Cam_SDO_REG_process
      if (reset_x == 1'b1) begin
        Cam_SDO_REG_out1[0] <= 1'b0;
        Cam_SDO_REG_out1[1] <= 1'b0;
        Cam_SDO_REG_out1[2] <= 1'b0;
        Cam_SDO_REG_out1[3] <= 1'b0;
        Cam_SDO_REG_out1[4] <= 1'b0;
        Cam_SDO_REG_out1[5] <= 1'b0;
        Cam_SDO_REG_out1[6] <= 1'b0;
        Cam_SDO_REG_out1[7] <= 1'b0;
      end
      else begin
        Cam_SDO_REG_out1[0] <= y[0];
        Cam_SDO_REG_out1[1] <= y[1];
        Cam_SDO_REG_out1[2] <= y[2];
        Cam_SDO_REG_out1[3] <= y[3];
        Cam_SDO_REG_out1[4] <= y[4];
        Cam_SDO_REG_out1[5] <= y[5];
        Cam_SDO_REG_out1[6] <= y[6];
        Cam_SDO_REG_out1[7] <= y[7];
      end
    end


  assign Selector8_out1 = (Constant8_out1 == 8'b00000000 ? Cam_SDO_REG_out1[0] :
              (Constant8_out1 == 8'b00000001 ? Cam_SDO_REG_out1[1] :
              (Constant8_out1 == 8'b00000010 ? Cam_SDO_REG_out1[2] :
              (Constant8_out1 == 8'b00000011 ? Cam_SDO_REG_out1[3] :
              (Constant8_out1 == 8'b00000100 ? Cam_SDO_REG_out1[4] :
              (Constant8_out1 == 8'b00000101 ? Cam_SDO_REG_out1[5] :
              (Constant8_out1 == 8'b00000110 ? Cam_SDO_REG_out1[6] :
              Cam_SDO_REG_out1[7])))))));


  assign y_8[0] = y_0_1;
  assign y_8[1] = y_1_1;
  assign y_8[2] = y_2_1;
  assign y_8[3] = y_3_1;
  assign y_8[4] = y_4_1;
  assign y_8[5] = y_5_1;
  assign y_8[6] = y_6_1;
  assign y_8[7] = y_7_1;

  always @(posedge clk or posedge reset_x)
    begin : Cam_SCO_REG_process
      if (reset_x == 1'b1) begin
        Cam_SCO_REG_out1[0] <= 1'b0;
        Cam_SCO_REG_out1[1] <= 1'b0;
        Cam_SCO_REG_out1[2] <= 1'b0;
        Cam_SCO_REG_out1[3] <= 1'b0;
        Cam_SCO_REG_out1[4] <= 1'b0;
        Cam_SCO_REG_out1[5] <= 1'b0;
        Cam_SCO_REG_out1[6] <= 1'b0;
        Cam_SCO_REG_out1[7] <= 1'b0;
      end
      else begin
        Cam_SCO_REG_out1[0] <= y_8[0];
        Cam_SCO_REG_out1[1] <= y_8[1];
        Cam_SCO_REG_out1[2] <= y_8[2];
        Cam_SCO_REG_out1[3] <= y_8[3];
        Cam_SCO_REG_out1[4] <= y_8[4];
        Cam_SCO_REG_out1[5] <= y_8[5];
        Cam_SCO_REG_out1[6] <= y_8[6];
        Cam_SCO_REG_out1[7] <= y_8[7];
      end
    end


  assign Selector6_out1 = (Constant6_out1 == 8'b00000000 ? Cam_SCO_REG_out1[0] :
              (Constant6_out1 == 8'b00000001 ? Cam_SCO_REG_out1[1] :
              (Constant6_out1 == 8'b00000010 ? Cam_SCO_REG_out1[2] :
              (Constant6_out1 == 8'b00000011 ? Cam_SCO_REG_out1[3] :
              (Constant6_out1 == 8'b00000100 ? Cam_SCO_REG_out1[4] :
              (Constant6_out1 == 8'b00000101 ? Cam_SCO_REG_out1[5] :
              (Constant6_out1 == 8'b00000110 ? Cam_SCO_REG_out1[6] :
              Cam_SCO_REG_out1[7])))))));


  CameraIO_ip_src_RADAR0_MIPI_I2C u_RADAR0_MIPI_I2C (.clk(clk),
                                                     .reset_x(reset_x),
                                                     .sci(Selector6_out1),
                                                     .sdi(Selector8_out1),
                                                     .ctrl(RADAR0_MIPI_I2C_out1),  // uint8
                                                     .sdo(RADAR0_MIPI_I2C_out2)
                                                     );
  assign Vector_Concatenate1_out1[0] = OR4_out1;
  assign Vector_Concatenate1_out1[1] = OR5_out1;
  assign Vector_Concatenate1_out1[2] = OR6_out1;
  assign Vector_Concatenate1_out1[3] = RADAR0_MIPI_I2C_out2;
  assign Vector_Concatenate1_out1[4] = RADAR1_MIPI_I2C_out2;
  assign Vector_Concatenate1_out1[5] = Constant13_out1;
  assign Vector_Concatenate1_out1[6] = Constant14_out1;
  assign Vector_Concatenate1_out1[7] = Constant15_out1;
  always @(posedge clk or posedge reset_x)
    begin : Cam_SDI_REG_process
      if (reset_x == 1'b1) begin
        Cam_SDI_REG_out1[0] <= 1'b0;
        Cam_SDI_REG_out1[1] <= 1'b0;
        Cam_SDI_REG_out1[2] <= 1'b0;
        Cam_SDI_REG_out1[3] <= 1'b0;
        Cam_SDI_REG_out1[4] <= 1'b0;
        Cam_SDI_REG_out1[5] <= 1'b0;
        Cam_SDI_REG_out1[6] <= 1'b0;
        Cam_SDI_REG_out1[7] <= 1'b0;
      end
      else begin
        Cam_SDI_REG_out1[0] <= Vector_Concatenate1_out1[0];
        Cam_SDI_REG_out1[1] <= Vector_Concatenate1_out1[1];
        Cam_SDI_REG_out1[2] <= Vector_Concatenate1_out1[2];
        Cam_SDI_REG_out1[3] <= Vector_Concatenate1_out1[3];
        Cam_SDI_REG_out1[4] <= Vector_Concatenate1_out1[4];
        Cam_SDI_REG_out1[5] <= Vector_Concatenate1_out1[5];
        Cam_SDI_REG_out1[6] <= Vector_Concatenate1_out1[6];
        Cam_SDI_REG_out1[7] <= Vector_Concatenate1_out1[7];
      end
    end


  CameraIO_ip_src_TCA9548A u_TCA9548A (.clk(clk),
                                       .reset_x(reset_x),
                                       .sci_master(Mux_SCI_REG_out1),
                                       .sdi_master(Mux_SDI_REG_out1),
                                       .sdi_slave_0(Cam_SDI_REG_out1[0]),  // boolean
                                       .sdi_slave_1(Cam_SDI_REG_out1[1]),  // boolean
                                       .sdi_slave_2(Cam_SDI_REG_out1[2]),  // boolean
                                       .sdi_slave_3(Cam_SDI_REG_out1[3]),  // boolean
                                       .sdi_slave_4(Cam_SDI_REG_out1[4]),  // boolean
                                       .sdi_slave_5(Cam_SDI_REG_out1[5]),  // boolean
                                       .sdi_slave_6(Cam_SDI_REG_out1[6]),  // boolean
                                       .sdi_slave_7(Cam_SDI_REG_out1[7]),  // boolean
                                       .sco_master(TCA9548A_out1),
                                       .sdo_master(TCA9548A_out2),
                                       .sco_slave_0(y_0_1),  // boolean
                                       .sco_slave_1(y_1_1),  // boolean
                                       .sco_slave_2(y_2_1),  // boolean
                                       .sco_slave_3(y_3_1),  // boolean
                                       .sco_slave_4(y_4_1),  // boolean
                                       .sco_slave_5(y_5_1),  // boolean
                                       .sco_slave_6(y_6_1),  // boolean
                                       .sco_slave_7(y_7_1),  // boolean
                                       .sdo_slave_0(y_0),  // boolean
                                       .sdo_slave_1(y_1),  // boolean
                                       .sdo_slave_2(y_2),  // boolean
                                       .sdo_slave_3(y_3),  // boolean
                                       .sdo_slave_4(y_4),  // boolean
                                       .sdo_slave_5(y_5),  // boolean
                                       .sdo_slave_6(y_6),  // boolean
                                       .sdo_slave_7(y_7),  // boolean
                                       .last_byte(TCA9548A_out5)  // uint8
                                       );
  assign OR10_out1 = Extract_Bits26_out1 | TCA9548A_out2;


  always @(posedge clk or posedge reset_x)
    begin : Mux_SDO_REG_process
      if (reset_x == 1'b1) begin
        Mux_SDO_REG_out1 <= 1'b0;
      end
      else begin
        Mux_SDO_REG_out1 <= OR10_out1;
      end
    end


  assign NOT5_out1 =  ~ Mux_SDO_REG_out1;


  assign Muxer_sdoen = NOT5_out1;

  assign OR9_out1 = Extract_Bits26_out1 | TCA9548A_out1;


  always @(posedge clk or posedge reset_x)
    begin : Mux_SCO_REG_process
      if (reset_x == 1'b1) begin
        Mux_SCO_REG_out1 <= 1'b0;
      end
      else begin
        Mux_SCO_REG_out1 <= OR9_out1;
      end
    end


  assign NOT3_out1 =  ~ Mux_SCO_REG_out1;


  assign Muxer_scoen = NOT3_out1;

  assign dtc1_5 = TCA6424A_out3[0];


  assign CAM1_nCS = dtc1_5;

  assign dtc1_6 = TCA6424A_out3[1];


  assign Extract_Bits1_out1 = dtc1_6;



  assign CAM1_nRST = Extract_Bits1_out1;

  assign dtc1_7 = TCA6424A_out3[2];


  assign Extract_Bits2_out1 = dtc1_7;



  assign CAM1_PWDN = Extract_Bits2_out1;

  assign dtc1_8 = TCA6424A_out3[3];


  assign Extract_Bits3_out1 = dtc1_8;



  assign CAM1_FLASH = Extract_Bits3_out1;

  assign dtc1_9 = TCA6424A_out3[5];


  assign Extract_Bits4_out1 = dtc1_9;



  assign CAM2_nCS = Extract_Bits4_out1;

  assign dtc1_10 = TCA6424A_out3[6];


  assign Extract_Bits5_out1 = dtc1_10;



  assign CAM2_nRST = Extract_Bits5_out1;

  assign dtc1_11 = TCA6424A_out3[7];


  assign Extract_Bits6_out1 = dtc1_11;



  assign CAM2_PWDN = Extract_Bits6_out1;

  assign dtc1_12 = TCA6424A_out3[8];


  assign Extract_Bits7_out1 = dtc1_12;



  assign CAM2_FLASH = Extract_Bits7_out1;

  assign dtc1_13 = TCA6424A_out3[9];


  assign Extract_Bits8_out1 = dtc1_13;



  assign CAM3_nCS = Extract_Bits8_out1;

  assign dtc1_14 = TCA6424A_out3[10];


  assign Extract_Bits9_out1 = dtc1_14;



  assign CAM3_nRST = Extract_Bits9_out1;

  assign dtc1_15 = TCA6424A_out3[11];


  assign Extract_Bits10_out1 = dtc1_15;



  assign CAM3_PWDN = Extract_Bits10_out1;

  assign dtc1_16 = TCA6424A_out3[12];


  assign Extract_Bits11_out1 = dtc1_16;



  assign CAM3_FLASH = Extract_Bits11_out1;

  assign Constant5_out1 = 8'b00000010;


  assign Selector5_out1 = (Constant5_out1 == 8'b00000000 ? Cam_SDO_REG_out1[0] :
              (Constant5_out1 == 8'b00000001 ? Cam_SDO_REG_out1[1] :
              (Constant5_out1 == 8'b00000010 ? Cam_SDO_REG_out1[2] :
              (Constant5_out1 == 8'b00000011 ? Cam_SDO_REG_out1[3] :
              (Constant5_out1 == 8'b00000100 ? Cam_SDO_REG_out1[4] :
              (Constant5_out1 == 8'b00000101 ? Cam_SDO_REG_out1[5] :
              (Constant5_out1 == 8'b00000110 ? Cam_SDO_REG_out1[6] :
              Cam_SDO_REG_out1[7])))))));


  assign NOT11_out1 =  ~ Selector5_out1;


  assign Cam3_sdoen = NOT11_out1;

  assign Constant2_out1 = 8'b00000010;


  assign Selector2_out1 = (Constant2_out1 == 8'b00000000 ? Cam_SCO_REG_out1[0] :
              (Constant2_out1 == 8'b00000001 ? Cam_SCO_REG_out1[1] :
              (Constant2_out1 == 8'b00000010 ? Cam_SCO_REG_out1[2] :
              (Constant2_out1 == 8'b00000011 ? Cam_SCO_REG_out1[3] :
              (Constant2_out1 == 8'b00000100 ? Cam_SCO_REG_out1[4] :
              (Constant2_out1 == 8'b00000101 ? Cam_SCO_REG_out1[5] :
              (Constant2_out1 == 8'b00000110 ? Cam_SCO_REG_out1[6] :
              Cam_SCO_REG_out1[7])))))));


  assign NOT8_out1 =  ~ Selector2_out1;


  assign Cam3_scoen = NOT8_out1;

  assign Constant4_out1 = 8'b00000001;


  assign Selector4_out1 = (Constant4_out1 == 8'b00000000 ? Cam_SDO_REG_out1[0] :
              (Constant4_out1 == 8'b00000001 ? Cam_SDO_REG_out1[1] :
              (Constant4_out1 == 8'b00000010 ? Cam_SDO_REG_out1[2] :
              (Constant4_out1 == 8'b00000011 ? Cam_SDO_REG_out1[3] :
              (Constant4_out1 == 8'b00000100 ? Cam_SDO_REG_out1[4] :
              (Constant4_out1 == 8'b00000101 ? Cam_SDO_REG_out1[5] :
              (Constant4_out1 == 8'b00000110 ? Cam_SDO_REG_out1[6] :
              Cam_SDO_REG_out1[7])))))));


  assign NOT10_out1 =  ~ Selector4_out1;


  assign Cam2_sdoen = NOT10_out1;

  assign Constant1_out1 = 8'b00000001;


  assign Selector1_out1 = (Constant1_out1 == 8'b00000000 ? Cam_SCO_REG_out1[0] :
              (Constant1_out1 == 8'b00000001 ? Cam_SCO_REG_out1[1] :
              (Constant1_out1 == 8'b00000010 ? Cam_SCO_REG_out1[2] :
              (Constant1_out1 == 8'b00000011 ? Cam_SCO_REG_out1[3] :
              (Constant1_out1 == 8'b00000100 ? Cam_SCO_REG_out1[4] :
              (Constant1_out1 == 8'b00000101 ? Cam_SCO_REG_out1[5] :
              (Constant1_out1 == 8'b00000110 ? Cam_SCO_REG_out1[6] :
              Cam_SCO_REG_out1[7])))))));


  assign NOT7_out1 =  ~ Selector1_out1;


  assign Cam2_scoen = NOT7_out1;

  assign Constant3_out1 = 8'b00000000;


  assign Selector3_out1 = (Constant3_out1 == 8'b00000000 ? Cam_SDO_REG_out1[0] :
              (Constant3_out1 == 8'b00000001 ? Cam_SDO_REG_out1[1] :
              (Constant3_out1 == 8'b00000010 ? Cam_SDO_REG_out1[2] :
              (Constant3_out1 == 8'b00000011 ? Cam_SDO_REG_out1[3] :
              (Constant3_out1 == 8'b00000100 ? Cam_SDO_REG_out1[4] :
              (Constant3_out1 == 8'b00000101 ? Cam_SDO_REG_out1[5] :
              (Constant3_out1 == 8'b00000110 ? Cam_SDO_REG_out1[6] :
              Cam_SDO_REG_out1[7])))))));


  assign NOT9_out1 =  ~ Selector3_out1;


  assign Cam1_sdoen = NOT9_out1;

  assign Constant_out1 = 8'b00000000;


  assign Selector_out1 = (Constant_out1 == 8'b00000000 ? Cam_SCO_REG_out1[0] :
              (Constant_out1 == 8'b00000001 ? Cam_SCO_REG_out1[1] :
              (Constant_out1 == 8'b00000010 ? Cam_SCO_REG_out1[2] :
              (Constant_out1 == 8'b00000011 ? Cam_SCO_REG_out1[3] :
              (Constant_out1 == 8'b00000100 ? Cam_SCO_REG_out1[4] :
              (Constant_out1 == 8'b00000101 ? Cam_SCO_REG_out1[5] :
              (Constant_out1 == 8'b00000110 ? Cam_SCO_REG_out1[6] :
              Cam_SCO_REG_out1[7])))))));


  assign NOT6_out1 =  ~ Selector_out1;


  assign Cam1_scoen = NOT6_out1;

  assign dtc1_17 = Unit_Delay_out1[17];


  assign Extract_Bits24_out1 = dtc1_17;



  always @(posedge clk or posedge reset_x)
    begin : Exp_nINT_REG_process
      if (reset_x == 1'b1) begin
        Exp_nINT_REG_out1 <= 1'b0;
      end
      else begin
        Exp_nINT_REG_out1 <= Extract_Bits24_out1;
      end
    end


  assign NOT2_out1 =  ~ Exp_nINT_REG_out1;


  assign Expander_nINT = NOT2_out1;

  assign Constant10_out1 = 1'b0;


  assign y_9 = {Cam3_sdi, Cam2_sdi, Cam1_sdi};


  assign y_10 = {Cam3_sci, Cam2_sci, Cam1_sci};


  always @(posedge clk or posedge reset_x)
    begin : Unit_Delay2_process
      if (reset_x == 1'b1) begin
        Unit_Delay2_out1 <= 1'b0;
      end
      else begin
        Unit_Delay2_out1 <= GPIO27_PWM2;
      end
    end


  always @(posedge clk or posedge reset_x)
    begin : Unit_Delay1_process
      if (reset_x == 1'b1) begin
        Unit_Delay1_out1 <= 1'b0;
      end
      else begin
        Unit_Delay1_out1 <= CAM_Master_CLK;
      end
    end


  assign y_11 = {Constant10_out1, y_9, Constant10_out1, y_10, {Constant10_out1, Constant10_out1, Unit_Delay2_out1, Unit_Delay1_out1}};


  assign AXI_CameraIO_Status = y_11;

  assign dtc1_18 = Unit_Delay_out1[1];


  assign Extract_Bits14_out1 = dtc1_18;



  assign CAM1_TRIG = Extract_Bits14_out1;

  assign dtc1_19 = Unit_Delay_out1[2];


  assign Extract_Bits15_out1 = dtc1_19;



  assign CAM2_TRIG = Extract_Bits15_out1;

  assign dtc1_20 = Unit_Delay_out1[3];


  assign Extract_Bits16_out1 = dtc1_20;



  assign CAM3_TRIG = Extract_Bits16_out1;

  assign dtc1_21 = TCA6424A_out3[13];


  assign Extract_Bits12_out1 = dtc1_21;



  assign dtc1_22 = RADAR0_MIPI_I2C_out1[0];


  assign dtc1_23 = Unit_Delay_out1[11];


  assign Extract_Bits18_out1 = dtc1_23;



  assign OR1_out1 = dtc1_22 | Extract_Bits18_out1;


  always @(posedge clk or posedge reset_x)
    begin : REG_ENB_process
      if (reset_x == 1'b1) begin
        REG_ENB_out1 <= 1'b0;
      end
      else begin
        REG_ENB_out1 <= Extract_Bits12_out1;
      end
    end


  assign dtc1_24 = Unit_Delay_out1[10];


  assign Extract_Bits17_out1 = dtc1_24;



  assign OR_out1 = REG_ENB_out1 | Extract_Bits17_out1;


  assign AND_out1 = OR1_out1 & OR_out1;


  assign RADAR0_enable = AND_out1;

  assign dtc1_25 = TCA6424A_out3[14];


  assign Extract_Bits13_out1 = dtc1_25;



  assign dtc1_26 = RADAR1_MIPI_I2C_out1[0];


  assign dtc1_27 = Unit_Delay_out1[9];


  assign Extract_Bits21_out1 = dtc1_27;



  assign OR3_out1 = dtc1_26 | Extract_Bits21_out1;


  always @(posedge clk or posedge reset_x)
    begin : REG_ENB1_process
      if (reset_x == 1'b1) begin
        REG_ENB1_out1 <= 1'b0;
      end
      else begin
        REG_ENB1_out1 <= Extract_Bits13_out1;
      end
    end


  assign dtc1_28 = Unit_Delay_out1[8];


  assign Extract_Bits20_out1 = dtc1_28;



  assign OR2_out1 = REG_ENB1_out1 | Extract_Bits20_out1;


  assign AND1_out1 = OR3_out1 & OR2_out1;


  assign RADAR1_enable = AND1_out1;

  assign AXI_ExpanderValue = TCA6424A_out3;

  assign AXI_MuxerValue = TCA9548A_out5;

endmodule  // CameraIO_ip_src_CameraIO

