// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\tb_CameraIO\CameraIO_ip_src_TCA9548A.v
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// Copyright (c) 2023, Alexei Evsenin, evsenin@gmail.com
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: CameraIO_ip_src_TCA9548A
// Source Path: tb_CameraIO/CameraIO/TCA9548A
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module CameraIO_ip_src_TCA9548A
          (clk,
           reset_x,
           sci_master,
           sdi_master,
           sdi_slave_0,
           sdi_slave_1,
           sdi_slave_2,
           sdi_slave_3,
           sdi_slave_4,
           sdi_slave_5,
           sdi_slave_6,
           sdi_slave_7,
           sco_master,
           sdo_master,
           sco_slave_0,
           sco_slave_1,
           sco_slave_2,
           sco_slave_3,
           sco_slave_4,
           sco_slave_5,
           sco_slave_6,
           sco_slave_7,
           sdo_slave_0,
           sdo_slave_1,
           sdo_slave_2,
           sdo_slave_3,
           sdo_slave_4,
           sdo_slave_5,
           sdo_slave_6,
           sdo_slave_7,
           last_byte);


  input   clk;
  input   reset_x;
  input   sci_master;
  input   sdi_master;
  input   sdi_slave_0;  // boolean
  input   sdi_slave_1;  // boolean
  input   sdi_slave_2;  // boolean
  input   sdi_slave_3;  // boolean
  input   sdi_slave_4;  // boolean
  input   sdi_slave_5;  // boolean
  input   sdi_slave_6;  // boolean
  input   sdi_slave_7;  // boolean
  output  sco_master;
  output  sdo_master;
  output  sco_slave_0;  // boolean
  output  sco_slave_1;  // boolean
  output  sco_slave_2;  // boolean
  output  sco_slave_3;  // boolean
  output  sco_slave_4;  // boolean
  output  sco_slave_5;  // boolean
  output  sco_slave_6;  // boolean
  output  sco_slave_7;  // boolean
  output  sdo_slave_0;  // boolean
  output  sdo_slave_1;  // boolean
  output  sdo_slave_2;  // boolean
  output  sdo_slave_3;  // boolean
  output  sdo_slave_4;  // boolean
  output  sdo_slave_5;  // boolean
  output  sdo_slave_6;  // boolean
  output  sdo_slave_7;  // boolean
  output  [7:0] last_byte;  // uint8


  wire Constant3_out1;
  wire Data_Type_Conversion2_out1;  // ufix1
  wire Data_Type_Conversion3_out1;  // ufix1
  wire [7:0] Constant1_out1;  // uint8
  wire [6:0] Constant_out1;  // ufix7
  wire i2c_slave_serializer_out1;  // ufix1
  wire [7:0] i2c_slave_serializer_out2deadOutdeadOut;  // uint8
  wire [7:0] i2c_slave_serializer_out3;  // uint8
  wire i2c_slave_serializer_out4deadOutdeadOut;  // ufix1
  wire Data_Type_Conversion1_out1;
  reg  Unit_Delay2_out1;
  wire NOT_out1;
  wire pulse_out1;
  wire pulse_out2;
  wire Start_out1;
  wire Constant2_out1;
  reg  Unit_Delay_Enabled_Resettable_Synchronous1_out1;
  wire Stop_out1;
  wire AND3_out1;
  wire NOT1_out1;
  wire [15:0] count_step;  // uint16
  wire [15:0] count_reset;  // uint16
  reg [15:0] HDL_Counter_out1;  // uint16
  wire [15:0] count;  // uint16
  wire [7:0] Delay_out1;  // uint8
  reg [7:0] Unit_Delay1_out1;  // uint8
  wire Compare_To_Constant_out1;
  wire [15:0] count_1;  // uint16
  wire [15:0] count_2;  // uint16
  wire Compare_To_Constant1_out1;
  reg  Unit_Delay_out1;
  reg [7:0] MuxSelReg_out1;  // uint8
  reg [7:0] Delay_reg [0:63];  // ufix8 [64]
  wire [7:0] Delay_reg_next [0:63];  // ufix8 [64]
  wire y;
  wire AND_out1;
  wire y_0;
  wire y_1;
  wire y_2;
  wire y_3;
  wire y_4;
  wire y_5;
  wire y_6;
  wire y_7;
  wire sdo_slave_sel_out1_0;
  wire sdo_slave_sel_out1_1;
  wire sdo_slave_sel_out1_2;
  wire sdo_slave_sel_out1_3;
  wire sdo_slave_sel_out1_4;
  wire sdo_slave_sel_out1_5;
  wire sdo_slave_sel_out1_6;
  wire sdo_slave_sel_out1_7;

  // timeout ~0.5ms if no activity on SCL master - 
  // reset muxer to default (0) state
  // I2C start and stop conditions


  assign Constant3_out1 = 1'b1;


  assign sco_master = Constant3_out1;

  assign Data_Type_Conversion2_out1 = sci_master;


  assign Data_Type_Conversion3_out1 = sdi_master;


  assign Constant1_out1 = 8'b00000000;


  assign Constant_out1 = 7'b1110000;


  CameraIO_ip_src_i2c_slave_serializer_block u_i2c_slave_serializer (.clk(clk),
                                                                     .reset_x(reset_x),
                                                                     .scl(Data_Type_Conversion2_out1),  // ufix1
                                                                     .sdaIn(Data_Type_Conversion3_out1),  // ufix1
                                                                     .dataIn(Constant1_out1),  // uint8
                                                                     .I2C_ADDRESS(Constant_out1),  // ufix7
                                                                     .sdaOut(i2c_slave_serializer_out1),  // ufix1
                                                                     .dataOut(i2c_slave_serializer_out2deadOutdeadOut),  // uint8
                                                                     .regAddr(i2c_slave_serializer_out3),  // uint8
                                                                     .writeEn(i2c_slave_serializer_out4deadOutdeadOut)  // ufix1
                                                                     );
  assign Data_Type_Conversion1_out1 = (i2c_slave_serializer_out1 != 1'b0 ? 1'b1 :
              1'b0);


  always @(posedge clk or posedge reset_x)
    begin : Unit_Delay2_process
      if (reset_x == 1'b1) begin
        Unit_Delay2_out1 <= 1'b0;
      end
      else begin
        Unit_Delay2_out1 <= Data_Type_Conversion1_out1;
      end
    end


  assign NOT_out1 =  ~ i2c_slave_serializer_out1;


  CameraIO_ip_src_pulse u_pulse (.clk(clk),
                                 .reset_x(reset_x),
                                 .valid(sdi_master),
                                 .rise(pulse_out1),
                                 .fall(pulse_out2)
                                 );
  assign Start_out1 = pulse_out2 & sci_master;


  assign Constant2_out1 = 1'b1;


  always @(posedge clk or posedge reset_x)
    begin : Unit_Delay_Enabled_Resettable_Synchronous1_process
      if (reset_x == 1'b1) begin
        Unit_Delay_Enabled_Resettable_Synchronous1_out1 <= 1'b0;
      end
      else begin
        if (Start_out1 == 1'b1) begin
          Unit_Delay_Enabled_Resettable_Synchronous1_out1 <= 1'b0;
        end
        else begin
          if (NOT_out1) begin
            Unit_Delay_Enabled_Resettable_Synchronous1_out1 <= Constant2_out1;
          end
        end
      end
    end


  assign Stop_out1 = sci_master & pulse_out1;


  assign AND3_out1 = Unit_Delay_Enabled_Resettable_Synchronous1_out1 & Stop_out1;


  assign NOT1_out1 =  ~ sci_master;


  // Free running, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  assign count_step = 16'b0000000000000001;


  assign count_reset = 16'b0000000000000000;


  assign count = HDL_Counter_out1 + count_step;


  always @(posedge clk or posedge reset_x)
    begin : Unit_Delay1_process
      if (reset_x == 1'b1) begin
        Unit_Delay1_out1 <= 8'b00000000;
      end
      else begin
        Unit_Delay1_out1 <= Delay_out1;
      end
    end


  assign Compare_To_Constant_out1 = Unit_Delay1_out1 != 8'b00000000;


  assign count_1 = (Compare_To_Constant_out1 == 1'b0 ? HDL_Counter_out1 :
              count);


  assign count_2 = (NOT1_out1 == 1'b0 ? count_1 :
              count_reset);


  always @(posedge clk or posedge reset_x)
    begin : HDL_Counter_process
      if (reset_x == 1'b1) begin
        HDL_Counter_out1 <= 16'b0000000000000000;
      end
      else begin
        HDL_Counter_out1 <= count_2;
      end
    end


  assign Compare_To_Constant1_out1 = HDL_Counter_out1 == 16'b1111111111111111;


  always @(posedge clk or posedge reset_x)
    begin : Unit_Delay_process
      if (reset_x == 1'b1) begin
        Unit_Delay_out1 <= 1'b0;
      end
      else begin
        Unit_Delay_out1 <= Compare_To_Constant1_out1;
      end
    end


  always @(posedge clk or posedge reset_x)
    begin : MuxSelReg_process
      if (reset_x == 1'b1) begin
        MuxSelReg_out1 <= 8'b00000000;
      end
      else begin
        if (Unit_Delay_out1 == 1'b1) begin
          MuxSelReg_out1 <= 8'b00000000;
        end
        else begin
          if (AND3_out1) begin
            MuxSelReg_out1 <= i2c_slave_serializer_out3;
          end
        end
      end
    end


  always @(posedge clk or posedge reset_x)
    begin : Delay_process
      if (reset_x == 1'b1) begin
        Delay_reg[0] <= 8'b00000000;
        Delay_reg[1] <= 8'b00000000;
        Delay_reg[2] <= 8'b00000000;
        Delay_reg[3] <= 8'b00000000;
        Delay_reg[4] <= 8'b00000000;
        Delay_reg[5] <= 8'b00000000;
        Delay_reg[6] <= 8'b00000000;
        Delay_reg[7] <= 8'b00000000;
        Delay_reg[8] <= 8'b00000000;
        Delay_reg[9] <= 8'b00000000;
        Delay_reg[10] <= 8'b00000000;
        Delay_reg[11] <= 8'b00000000;
        Delay_reg[12] <= 8'b00000000;
        Delay_reg[13] <= 8'b00000000;
        Delay_reg[14] <= 8'b00000000;
        Delay_reg[15] <= 8'b00000000;
        Delay_reg[16] <= 8'b00000000;
        Delay_reg[17] <= 8'b00000000;
        Delay_reg[18] <= 8'b00000000;
        Delay_reg[19] <= 8'b00000000;
        Delay_reg[20] <= 8'b00000000;
        Delay_reg[21] <= 8'b00000000;
        Delay_reg[22] <= 8'b00000000;
        Delay_reg[23] <= 8'b00000000;
        Delay_reg[24] <= 8'b00000000;
        Delay_reg[25] <= 8'b00000000;
        Delay_reg[26] <= 8'b00000000;
        Delay_reg[27] <= 8'b00000000;
        Delay_reg[28] <= 8'b00000000;
        Delay_reg[29] <= 8'b00000000;
        Delay_reg[30] <= 8'b00000000;
        Delay_reg[31] <= 8'b00000000;
        Delay_reg[32] <= 8'b00000000;
        Delay_reg[33] <= 8'b00000000;
        Delay_reg[34] <= 8'b00000000;
        Delay_reg[35] <= 8'b00000000;
        Delay_reg[36] <= 8'b00000000;
        Delay_reg[37] <= 8'b00000000;
        Delay_reg[38] <= 8'b00000000;
        Delay_reg[39] <= 8'b00000000;
        Delay_reg[40] <= 8'b00000000;
        Delay_reg[41] <= 8'b00000000;
        Delay_reg[42] <= 8'b00000000;
        Delay_reg[43] <= 8'b00000000;
        Delay_reg[44] <= 8'b00000000;
        Delay_reg[45] <= 8'b00000000;
        Delay_reg[46] <= 8'b00000000;
        Delay_reg[47] <= 8'b00000000;
        Delay_reg[48] <= 8'b00000000;
        Delay_reg[49] <= 8'b00000000;
        Delay_reg[50] <= 8'b00000000;
        Delay_reg[51] <= 8'b00000000;
        Delay_reg[52] <= 8'b00000000;
        Delay_reg[53] <= 8'b00000000;
        Delay_reg[54] <= 8'b00000000;
        Delay_reg[55] <= 8'b00000000;
        Delay_reg[56] <= 8'b00000000;
        Delay_reg[57] <= 8'b00000000;
        Delay_reg[58] <= 8'b00000000;
        Delay_reg[59] <= 8'b00000000;
        Delay_reg[60] <= 8'b00000000;
        Delay_reg[61] <= 8'b00000000;
        Delay_reg[62] <= 8'b00000000;
        Delay_reg[63] <= 8'b00000000;
      end
      else begin
        Delay_reg[0] <= Delay_reg_next[0];
        Delay_reg[1] <= Delay_reg_next[1];
        Delay_reg[2] <= Delay_reg_next[2];
        Delay_reg[3] <= Delay_reg_next[3];
        Delay_reg[4] <= Delay_reg_next[4];
        Delay_reg[5] <= Delay_reg_next[5];
        Delay_reg[6] <= Delay_reg_next[6];
        Delay_reg[7] <= Delay_reg_next[7];
        Delay_reg[8] <= Delay_reg_next[8];
        Delay_reg[9] <= Delay_reg_next[9];
        Delay_reg[10] <= Delay_reg_next[10];
        Delay_reg[11] <= Delay_reg_next[11];
        Delay_reg[12] <= Delay_reg_next[12];
        Delay_reg[13] <= Delay_reg_next[13];
        Delay_reg[14] <= Delay_reg_next[14];
        Delay_reg[15] <= Delay_reg_next[15];
        Delay_reg[16] <= Delay_reg_next[16];
        Delay_reg[17] <= Delay_reg_next[17];
        Delay_reg[18] <= Delay_reg_next[18];
        Delay_reg[19] <= Delay_reg_next[19];
        Delay_reg[20] <= Delay_reg_next[20];
        Delay_reg[21] <= Delay_reg_next[21];
        Delay_reg[22] <= Delay_reg_next[22];
        Delay_reg[23] <= Delay_reg_next[23];
        Delay_reg[24] <= Delay_reg_next[24];
        Delay_reg[25] <= Delay_reg_next[25];
        Delay_reg[26] <= Delay_reg_next[26];
        Delay_reg[27] <= Delay_reg_next[27];
        Delay_reg[28] <= Delay_reg_next[28];
        Delay_reg[29] <= Delay_reg_next[29];
        Delay_reg[30] <= Delay_reg_next[30];
        Delay_reg[31] <= Delay_reg_next[31];
        Delay_reg[32] <= Delay_reg_next[32];
        Delay_reg[33] <= Delay_reg_next[33];
        Delay_reg[34] <= Delay_reg_next[34];
        Delay_reg[35] <= Delay_reg_next[35];
        Delay_reg[36] <= Delay_reg_next[36];
        Delay_reg[37] <= Delay_reg_next[37];
        Delay_reg[38] <= Delay_reg_next[38];
        Delay_reg[39] <= Delay_reg_next[39];
        Delay_reg[40] <= Delay_reg_next[40];
        Delay_reg[41] <= Delay_reg_next[41];
        Delay_reg[42] <= Delay_reg_next[42];
        Delay_reg[43] <= Delay_reg_next[43];
        Delay_reg[44] <= Delay_reg_next[44];
        Delay_reg[45] <= Delay_reg_next[45];
        Delay_reg[46] <= Delay_reg_next[46];
        Delay_reg[47] <= Delay_reg_next[47];
        Delay_reg[48] <= Delay_reg_next[48];
        Delay_reg[49] <= Delay_reg_next[49];
        Delay_reg[50] <= Delay_reg_next[50];
        Delay_reg[51] <= Delay_reg_next[51];
        Delay_reg[52] <= Delay_reg_next[52];
        Delay_reg[53] <= Delay_reg_next[53];
        Delay_reg[54] <= Delay_reg_next[54];
        Delay_reg[55] <= Delay_reg_next[55];
        Delay_reg[56] <= Delay_reg_next[56];
        Delay_reg[57] <= Delay_reg_next[57];
        Delay_reg[58] <= Delay_reg_next[58];
        Delay_reg[59] <= Delay_reg_next[59];
        Delay_reg[60] <= Delay_reg_next[60];
        Delay_reg[61] <= Delay_reg_next[61];
        Delay_reg[62] <= Delay_reg_next[62];
        Delay_reg[63] <= Delay_reg_next[63];
      end
    end

  assign Delay_out1 = Delay_reg[63];
  assign Delay_reg_next[0] = MuxSelReg_out1;
  assign Delay_reg_next[1] = Delay_reg[0];
  assign Delay_reg_next[2] = Delay_reg[1];
  assign Delay_reg_next[3] = Delay_reg[2];
  assign Delay_reg_next[4] = Delay_reg[3];
  assign Delay_reg_next[5] = Delay_reg[4];
  assign Delay_reg_next[6] = Delay_reg[5];
  assign Delay_reg_next[7] = Delay_reg[6];
  assign Delay_reg_next[8] = Delay_reg[7];
  assign Delay_reg_next[9] = Delay_reg[8];
  assign Delay_reg_next[10] = Delay_reg[9];
  assign Delay_reg_next[11] = Delay_reg[10];
  assign Delay_reg_next[12] = Delay_reg[11];
  assign Delay_reg_next[13] = Delay_reg[12];
  assign Delay_reg_next[14] = Delay_reg[13];
  assign Delay_reg_next[15] = Delay_reg[14];
  assign Delay_reg_next[16] = Delay_reg[15];
  assign Delay_reg_next[17] = Delay_reg[16];
  assign Delay_reg_next[18] = Delay_reg[17];
  assign Delay_reg_next[19] = Delay_reg[18];
  assign Delay_reg_next[20] = Delay_reg[19];
  assign Delay_reg_next[21] = Delay_reg[20];
  assign Delay_reg_next[22] = Delay_reg[21];
  assign Delay_reg_next[23] = Delay_reg[22];
  assign Delay_reg_next[24] = Delay_reg[23];
  assign Delay_reg_next[25] = Delay_reg[24];
  assign Delay_reg_next[26] = Delay_reg[25];
  assign Delay_reg_next[27] = Delay_reg[26];
  assign Delay_reg_next[28] = Delay_reg[27];
  assign Delay_reg_next[29] = Delay_reg[28];
  assign Delay_reg_next[30] = Delay_reg[29];
  assign Delay_reg_next[31] = Delay_reg[30];
  assign Delay_reg_next[32] = Delay_reg[31];
  assign Delay_reg_next[33] = Delay_reg[32];
  assign Delay_reg_next[34] = Delay_reg[33];
  assign Delay_reg_next[35] = Delay_reg[34];
  assign Delay_reg_next[36] = Delay_reg[35];
  assign Delay_reg_next[37] = Delay_reg[36];
  assign Delay_reg_next[38] = Delay_reg[37];
  assign Delay_reg_next[39] = Delay_reg[38];
  assign Delay_reg_next[40] = Delay_reg[39];
  assign Delay_reg_next[41] = Delay_reg[40];
  assign Delay_reg_next[42] = Delay_reg[41];
  assign Delay_reg_next[43] = Delay_reg[42];
  assign Delay_reg_next[44] = Delay_reg[43];
  assign Delay_reg_next[45] = Delay_reg[44];
  assign Delay_reg_next[46] = Delay_reg[45];
  assign Delay_reg_next[47] = Delay_reg[46];
  assign Delay_reg_next[48] = Delay_reg[47];
  assign Delay_reg_next[49] = Delay_reg[48];
  assign Delay_reg_next[50] = Delay_reg[49];
  assign Delay_reg_next[51] = Delay_reg[50];
  assign Delay_reg_next[52] = Delay_reg[51];
  assign Delay_reg_next[53] = Delay_reg[52];
  assign Delay_reg_next[54] = Delay_reg[53];
  assign Delay_reg_next[55] = Delay_reg[54];
  assign Delay_reg_next[56] = Delay_reg[55];
  assign Delay_reg_next[57] = Delay_reg[56];
  assign Delay_reg_next[58] = Delay_reg[57];
  assign Delay_reg_next[59] = Delay_reg[58];
  assign Delay_reg_next[60] = Delay_reg[59];
  assign Delay_reg_next[61] = Delay_reg[60];
  assign Delay_reg_next[62] = Delay_reg[61];
  assign Delay_reg_next[63] = Delay_reg[62];


  CameraIO_ip_src_sdo_master_sel u_sdo_master_sel (.w(Data_Type_Conversion1_out1),
                                                   .v_0(sdi_slave_0),  // boolean
                                                   .v_1(sdi_slave_1),  // boolean
                                                   .v_2(sdi_slave_2),  // boolean
                                                   .v_3(sdi_slave_3),  // boolean
                                                   .v_4(sdi_slave_4),  // boolean
                                                   .v_5(sdi_slave_5),  // boolean
                                                   .v_6(sdi_slave_6),  // boolean
                                                   .v_7(sdi_slave_7),  // boolean
                                                   .u(Delay_out1),  // uint8
                                                   .y(y)
                                                   );
  assign AND_out1 = Unit_Delay2_out1 & y;


  assign sdo_master = AND_out1;

  CameraIO_ip_src_sco_slave_sel u_sco_slave_sel (.u(Delay_out1),  // uint8
                                                 .w(sci_master),
                                                 .y_0(y_0),  // boolean
                                                 .y_1(y_1),  // boolean
                                                 .y_2(y_2),  // boolean
                                                 .y_3(y_3),  // boolean
                                                 .y_4(y_4),  // boolean
                                                 .y_5(y_5),  // boolean
                                                 .y_6(y_6),  // boolean
                                                 .y_7(y_7)  // boolean
                                                 );
  assign sco_slave_0 = y_0;

  assign sco_slave_1 = y_1;

  assign sco_slave_2 = y_2;

  assign sco_slave_3 = y_3;

  assign sco_slave_4 = y_4;

  assign sco_slave_5 = y_5;

  assign sco_slave_6 = y_6;

  assign sco_slave_7 = y_7;

  CameraIO_ip_src_sco_slave_sel u_sdo_slave_sel (.u(Delay_out1),  // uint8
                                                 .w(sdi_master),
                                                 .y_0(sdo_slave_sel_out1_0),  // boolean
                                                 .y_1(sdo_slave_sel_out1_1),  // boolean
                                                 .y_2(sdo_slave_sel_out1_2),  // boolean
                                                 .y_3(sdo_slave_sel_out1_3),  // boolean
                                                 .y_4(sdo_slave_sel_out1_4),  // boolean
                                                 .y_5(sdo_slave_sel_out1_5),  // boolean
                                                 .y_6(sdo_slave_sel_out1_6),  // boolean
                                                 .y_7(sdo_slave_sel_out1_7)  // boolean
                                                 );
  assign sdo_slave_0 = sdo_slave_sel_out1_0;

  assign sdo_slave_1 = sdo_slave_sel_out1_1;

  assign sdo_slave_2 = sdo_slave_sel_out1_2;

  assign sdo_slave_3 = sdo_slave_sel_out1_3;

  assign sdo_slave_4 = sdo_slave_sel_out1_4;

  assign sdo_slave_5 = sdo_slave_sel_out1_5;

  assign sdo_slave_6 = sdo_slave_sel_out1_6;

  assign sdo_slave_7 = sdo_slave_sel_out1_7;

  assign last_byte = Delay_out1;

endmodule  // CameraIO_ip_src_TCA9548A

